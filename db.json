{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/Yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1487671763863},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1487671763870},{"_id":"themes/Yelee/_config.yml","hash":"09a86d43d7bc67abe8ee0b323648ec1a47ee7d23","modified":1539505976304},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1487671764532},{"_id":"source/about/index-1.md","hash":"03c96050db1892bf5a968bc4017f70220e10b970","modified":1487673357443},{"_id":"source/about/index.md","hash":"c16630b80e5d4581e6a1d5e4f4b019d7d49fe358","modified":1487908473216},{"_id":"source/tags/index.md","hash":"8f179b85e4ce6db40a64547c4d2fa9b6a13b597b","modified":1487673173082},{"_id":"source/smallwenzi.github.io-master/.gitattributes","hash":"4a3348fc9a3d1ec1bc517399089440028e2242fd","modified":1487560992000},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1487671763860},{"_id":"source/_discarded/MarkDown语法.md","hash":"cfffb7a47aadc4afad3fbd489aa3216548231326","modified":1525764815986},{"_id":"source/404/index.md","hash":"fd1d6927c79e66599bb9c42b7fd7586968fe0e0d","modified":1487729024014},{"_id":"source/smallwenzi.github.io-master/.gitignore","hash":"3809d45d6f3670729017961126fee68de00eebb3","modified":1487560992000},{"_id":"source/_discarded/Red-Hat-升级-rpm软件、YUM软件（root用户）.md","hash":"0279603f1cdd5a30968b4aeb6ac1b4b48c9ea26d","modified":1525936509688},{"_id":"source/_discarded/ink-java.md","hash":"494827d47c75ed883b13f5798f5a0d5b4d3d7c34","modified":1525760176693},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1487671764503},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487671764525},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1487671764520},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1487671764528},{"_id":"source/_discarded/exo git.md","hash":"83d3c4fdc7617a50c759bff91c5e5192a5c496d8","modified":1487586393202},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1487671764509},{"_id":"source/_discarded/lr教程（一）.md","hash":"98c7c65ab16995770421367f310e2fa1eabb1992","modified":1539498747016},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1487671763891},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487671764523},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1487671764507},{"_id":"themes/Yelee/.git/ORIG_HEAD","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1487671921252},{"_id":"themes/Yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1487671763845},{"_id":"themes/Yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487671747401},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1487671763881},{"_id":"themes/Yelee/.git/index","hash":"9f767f6a5fb25674b6c4eaa88ac9f1ec0e9b9652","modified":1487671765212},{"_id":"themes/Yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487671763828},{"_id":"themes/Yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1487671763814},{"_id":"themes/Yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1487671921080},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1487671763901},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1487671763886},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1487671763896},{"_id":"source/_posts/docker的使用.md","hash":"edfcc9f421eb8631d0906be4d429a1b0eb87e2fa","modified":1539408919099},{"_id":"source/_posts/-jenkins-配置git证书.md","hash":"9479c483ec82ccdc2c00a12f201d7e7339e3e440","modified":1526053131977},{"_id":"source/_posts/-jenkins-配置maven打包git代码.md","hash":"b2be31058e0d26b27c702b3e4f7265df010a12fd","modified":1526303445233},{"_id":"source/_posts/Red-Hat-升级-rpm软件、YUM软件（root用户）.md","hash":"b7e5593d22405c513cdccf2c40eed320d7537f86","modified":1528471574768},{"_id":"source/_posts/gtmetix.md","hash":"f618ab8d0c9eeee8d6394c4d03cb7a3c507ef9a1","modified":1488338497958},{"_id":"source/_posts/hexo git.md","hash":"fda18b6a792ce84044840c827ebed34508feb9c1","modified":1487673319940},{"_id":"source/_posts/Singleton.md","hash":"e20378b908a51f02ce3cfb94bf2b7de60ec2d5b0","modified":1487845530038},{"_id":"source/_posts/lr教程.md","hash":"ab68346dff9e3d7e82b2144e5f9a1786c6fe7c09","modified":1539500951274},{"_id":"source/_posts/enkinx-配置任务.md","hash":"da7320163f536716ba1c4042d675e2228f580961","modified":1526052448001},{"_id":"source/_posts/hymeleaf学习的坑.md","hash":"91bbe6745a5d48708b19744d0d819f405c799d69","modified":1525761585556},{"_id":"source/_posts/ocker-mysql.md","hash":"aa5b248781ad818086530369c9ad3aec3b76ec80","modified":1525772064586},{"_id":"source/_posts/ring-cloud-docker-git-maven-jenkins-Kubernetes-目录.md","hash":"735dfb8752a68f57adbd63ff8551db7db3993f3c","modified":1525773460039},{"_id":"source/_posts/tepad-compare.md","hash":"28786821d13959a11fd5a840aa254eeedb2797e4","modified":1525759998766},{"_id":"source/_posts/九-linux配置java和maven.md","hash":"f7cca6cf05810de06ecf7b70b3e7c1ee1b76336a","modified":1526050791185},{"_id":"source/_posts/windows下atom上搭建PlantUML书写环境.md","hash":"7cc7cfc5db3fac1cdc92e0af15c78bf825a989b7","modified":1539503544276},{"_id":"source/_posts/三）linux-安装-GIT（root用户）.md","hash":"f8bbb12e6d0cba5c619a259975b1f53a3c05a51d","modified":1528464648968},{"_id":"source/_posts/那些提升开发人员工作效率的在线工具.md","hash":"4c35782e6fedc8c2e69670ee6203cf6e625b75b0","modified":1525760953937},{"_id":"source/_posts/七）maven-build-docker-and-push-Image.md","hash":"3d729331a263871b9e48e99b2ef5842f79ed012e","modified":1525772524873},{"_id":"source/_posts/升工作效率.md","hash":"c92749fd53fc248edf663bbf4b33561bfde672ef","modified":1525760930021},{"_id":"source/_posts/安装jenkins.md","hash":"88dac7779bec603aa2c09089822e13eace7810db","modified":1525774488416},{"_id":"source/_posts/）oracle-VM安装red-hat-liunx.md","hash":"d52d68510814e50cdd05f996aa0129b48a4becbf","modified":1525764497424},{"_id":"source/_posts/（六）docker安装本地仓库（root用户）.md","hash":"0f180632ec92ede59a718af660b36e4395482259","modified":1557129059709},{"_id":"source/_posts/olr的主从模式Master-Slave.md","hash":"c6c63e77f3a98ef320ca550b7923ef8d4300f626","modified":1539502393713},{"_id":"source/_posts/）更新docker-版本（root用户）.md","hash":"432337dbc7185e33066a3f57252f14aa46e777c5","modified":1557122619216},{"_id":"source/_posts/（四）安装docker（root用户）.md","hash":"6dfa793e0a1bb984274b1cf6be07d60e15284b69","modified":1557122597972},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1487671764533},{"_id":"source/_discarded/exo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"source/_discarded/exo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"themes/Yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1487671747585},{"_id":"themes/Yelee/.git/logs/HEAD","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763835},{"_id":"source/_discarded/exo git/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487586393338},{"_id":"source/_posts/exo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"source/_discarded/exo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"source/_posts/exo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"source/_posts/exo git/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487586393338},{"_id":"source/_posts/gtmetix/1.jpg","hash":"33942df97031a319ffba6e735b26a3592426ce38","modified":1488265485707},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1487671764156},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1487671763990},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1487671763921},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1487671764147},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1487671764287},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1487671764002},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1487671763935},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1487671763917},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1487671764299},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1487671764307},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1487671764355},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1487671764232},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1487671764331},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1487671764238},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1487671764340},{"_id":"themes/Yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487671747471},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1487671764359},{"_id":"source/_posts/exo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1487671764418},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1487671764465},{"_id":"themes/Yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487671747530},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1487671764500},{"_id":"themes/Yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1487671747567},{"_id":"themes/Yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487671747554},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1487671764429},{"_id":"themes/Yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487671747526},{"_id":"themes/Yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487671747580},{"_id":"themes/Yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487671747561},{"_id":"themes/Yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487671747548},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1487671764731},{"_id":"source/_posts/hexo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1487671764922},{"_id":"themes/Yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487671747573},{"_id":"themes/Yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487671747495},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1487671764912},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1487671764925},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1487671764926},{"_id":"source/_posts/hexo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1487671764929},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1487671764921},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1487671764920},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1487671764930},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1487671764935},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1487671764924},{"_id":"source/_posts/hexo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1487671764934},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1487671764927},{"_id":"themes/Yelee/source/img/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487572462503},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1487671764940},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1487671764938},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1487671764941},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1487671764942},{"_id":"themes/Yelee/source/img/wechat.jpg","hash":"79f03ce57452d84c10a726c758a5210b193b27eb","modified":1487583917917},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1487671764936},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1487671764939},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1487671764933},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1487671764931},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1487671764932},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1487671764937},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1487671764655},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1487671764616},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1487671764646},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1487671765108},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1487671765148},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1487671764637},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1487671765188},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1487671765167},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1487671765206},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1487671765060},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1487671765129},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1487671764716},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1487671764660},{"_id":"themes/Yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1487671763833},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1487671764367},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1487671764410},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1487671764414},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1487671764900},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1487671764905},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1487671764375},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1487671764389},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1487749937187},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1487671764539},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1487671764549},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1487671764545},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1487671764011},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1487671764554},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1487671764089},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1487671764065},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1487671764076},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1487671764030},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1487671764753},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1487671764760},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1487671764820},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1487671764824},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1487671764828},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1487671764832},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1487671764839},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1487671764852},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1487671764849},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1487671764842},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1487671764856},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1487671764892},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1487671764861},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1487671764872},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1487671764881},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1487671764885},{"_id":"themes/Yelee/.git/logs/refs/heads/master","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763837},{"_id":"themes/Yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487671763826},{"_id":"themes/Yelee/.git/objects/pack/pack-493eb329b8ff3d0c9c1e2553152d7360bec26ee2.idx","hash":"5c356891946c1b399d3a1a70349e6e4ca9e85899","modified":1487671763459},{"_id":"source/_posts/hexo git/4.png","hash":"9cd1c8552ae4b20a22451ddc5d948f5d116c51b1","modified":1487646880422},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1487671764768},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1487671764808},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1487671764802},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1487671764776},{"_id":"themes/Yelee/.git/logs/refs/remotes/origin/HEAD","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763823},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1487671764812},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1487671764781},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1487671764816},{"_id":"themes/Yelee/.git/objects/pack/pack-493eb329b8ff3d0c9c1e2553152d7360bec26ee2.pack","hash":"727a7d63bd7082f0dc7c2b2683f030f1b15d6e68","modified":1487671763600},{"_id":"source/_posts/PA问题.md","hash":"bb04dc8c522369101dea88e5ccc1c05629bf667b","modified":1557111929209},{"_id":"source/images/pasted-0.png","hash":"eeeb7a46d25458f707233f486838388f30675dd0","modified":1557111711633},{"_id":"public/baidu_urls.txt","hash":"ecc0c7968bccbb20b5363f61402f4e9bbd2b3b95","modified":1557112408133},{"_id":"public/baidusitemap.xml","hash":"697eee4c8b22c5bbe3b716994225d0f115d71c29","modified":1557129591098},{"_id":"public/atom.xml","hash":"31845411d68209877300919f0710831cd7cd7deb","modified":1557129591230},{"_id":"public/content.json","hash":"c9b06e4e11e24e3e714472756872e8d37c1493b1","modified":1557129591233},{"_id":"public/search.xml","hash":"a10073b94abc254ec6bd51ea9b013a04835712a9","modified":1557129591232},{"_id":"public/post-sitemap.xml","hash":"f9da88ec8666e78c0dfa72fd92dd08b3bacf4c2a","modified":1557129591232},{"_id":"public/page-sitemap.xml","hash":"2b6c4b33d10e863f05f4642dc96a4a61e436b39a","modified":1557111954743},{"_id":"public/tag-sitemap.xml","hash":"9e95f992aedf2350680704029f3addbbf30fa097","modified":1557129591232},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1557111954949},{"_id":"public/sitemap.xml","hash":"83357edc6a6cdd3b8d3550fc46aa6462c52657fb","modified":1557129591233},{"_id":"public/category-sitemap.xml","hash":"710635c66f64dccb8c2627472ab68d2ac2701084","modified":1557111954949},{"_id":"public/about/index-1.html","hash":"2a5ffe7ef590bb4fa9970d8a63d3660052bd71e7","modified":1557111956006},{"_id":"public/about/index.html","hash":"7782c13bc580889d69fe87223a11c1ced8609693","modified":1557111956597},{"_id":"public/404.html","hash":"ae68b28b52590493aa1787914bdf8ef871277fd9","modified":1557111956626},{"_id":"public/2018/10/14/windows下atom上搭建PlantUML书写环境/index.html","hash":"570a30326799bf47c5120924d6f56144507ca6d3","modified":1557112709041},{"_id":"public/2018/10/14/olr的主从模式Master-Slave/index.html","hash":"996459c78f0296fae6f0c4c90b1ec138470178a9","modified":1557112709041},{"_id":"public/2018/10/13/lr教程/index.html","hash":"afe8ed92bb3968275081b86eea169871fdfbfb25","modified":1557112709042},{"_id":"public/2018/05/11/-jenkins-配置maven打包git代码/index.html","hash":"69cba000aea0550aa251855bb16cb1152935900e","modified":1557112709044},{"_id":"public/2018/05/11/-jenkins-配置git证书/index.html","hash":"4036e4abd37273de09ea009b338e96010e0a87e5","modified":1557112709042},{"_id":"public/2018/05/11/enkinx-配置任务/index.html","hash":"c5fed4b857f815790acb971c90b706309a9f2dab","modified":1557112709042},{"_id":"public/2018/05/11/九-linux配置java和maven/index.html","hash":"1d2699eb8d656b5e85e45e36559257e88efdf243","modified":1557112709042},{"_id":"public/2018/05/08/安装jenkins/index.html","hash":"b9a2d1a87afdfa650f79e0f405203f3812851a12","modified":1557112709043},{"_id":"public/2018/05/08/ring-cloud-docker-git-maven-jenkins-Kubernetes-目录/index.html","hash":"bf250f2e23da640a9efe45c6c218ab21f10cee30","modified":1557112709044},{"_id":"public/2018/05/08/七）maven-build-docker-and-push-Image/index.html","hash":"bc64f29fcc801942092c3ffdbff0501f91231f02","modified":1557112709044},{"_id":"public/2018/05/08/ocker-mysql/index.html","hash":"8200ffe2dbaa9c27d9e57949a3530809f0f7eefb","modified":1557112709044},{"_id":"public/2018/06/11/docker的使用/index.html","hash":"f24732cc0a4adf35fc3c4cca46708ce69e7c5cfb","modified":1557112709042},{"_id":"public/2019/05/06/PA问题/index.html","hash":"97434da2b87577c14f8462b62a2305b9f831c95c","modified":1557111956707},{"_id":"public/tags/index.html","hash":"5b1ca155f9943e98245c3caa8de04556f8f3ea58","modified":1557111956750},{"_id":"public/2018/05/08/（四）安装docker（root用户）/index.html","hash":"3b62d3413113a1f93d06e09a7a25a20fc1b30423","modified":1557122651721},{"_id":"public/2018/05/08/三）linux-安装-GIT（root用户）/index.html","hash":"fefc197e529edf067f50a1c3b60c19816cc59197","modified":1557112709045},{"_id":"public/2018/05/08/）更新docker-版本（root用户）/index.html","hash":"8d21c29767cca24fe217a44b4a916cc397654a28","modified":1557122651270},{"_id":"public/2018/05/08/hymeleaf学习的坑/index.html","hash":"5db29d264143e2ac29707a50c5261d250a730065","modified":1557112709045},{"_id":"public/2018/05/08/那些提升开发人员工作效率的在线工具/index.html","hash":"406c5a5b5f834c37bfff1288ea3a002a1b7ce7e0","modified":1557112709045},{"_id":"public/2018/05/08/升工作效率/index.html","hash":"0d5cddc41db3df8ce77d4bb6a421691baeffea3a","modified":1557112709046},{"_id":"public/2017/03/06/tepad-compare/index.html","hash":"5d45dd76085162c4a6c747477ef2572ad0e069ae","modified":1557112709046},{"_id":"public/2017/02/28/gtmetix/index.html","hash":"1ebb3c588b29a2cfcbe5e8d9533829433871e6f4","modified":1557112709046},{"_id":"public/2018/05/08/（六）docker安装本地仓库（root用户）/index.html","hash":"59c499ba8aa628f8f1bb892c68e2e2a246b3430d","modified":1557129593961},{"_id":"public/2017/02/20/hexo git/index.html","hash":"6bf922b0a626edee0792c8d6a746c8d8e0d09ba9","modified":1557112709046},{"_id":"public/archives/index.html","hash":"4c28cbe57f385c413dc40930fdbdcacb1453fdd8","modified":1557112709046},{"_id":"public/archives/page/2/index.html","hash":"8d7e90a9f7cd3174db6a16e9ef09f473ef09f8bc","modified":1557111956752},{"_id":"public/2018/05/08/）oracle-VM安装red-hat-liunx/index.html","hash":"c0101a434fd5743b35a851d8c3186a6323cb656c","modified":1557112709045},{"_id":"public/archives/2017/index.html","hash":"0d0685885119c6fa297ca8d61489180689c5d2dd","modified":1557111956752},{"_id":"public/archives/2017/02/index.html","hash":"70629c9c21bcbd0f9ca2f21e9d55d03f38d8062a","modified":1557111956752},{"_id":"public/archives/2017/03/index.html","hash":"3c3fc3f56b6a14c2a6598b45ea8203304be1982b","modified":1557111956752},{"_id":"public/archives/2018/index.html","hash":"e7f9c10bf638fcfa7885da8b36669f3d22e5ffe8","modified":1557111956753},{"_id":"public/archives/2018/page/2/index.html","hash":"54566309937224158e9bb8e4cf6a08f47b57a488","modified":1557111956753},{"_id":"public/archives/2018/page/3/index.html","hash":"faf961e284aa29bc6f6e4eaf14bd232721766373","modified":1557111956753},{"_id":"public/archives/2018/05/index.html","hash":"7b0db0861694b7a412f906920ea75e72f248a498","modified":1557111956753},{"_id":"public/archives/2018/05/page/2/index.html","hash":"c3eb5ed9fa42e2f64423d1858f961b5a86cf6839","modified":1557111956754},{"_id":"public/2017/02/20/Singleton/index.html","hash":"158c9c07f1d5d832f93de6d89d98827c24f86c3e","modified":1557112709046},{"_id":"public/archives/page/3/index.html","hash":"091e3804cb252f9609dc3e4d01a32982eb1583a4","modified":1557111956754},{"_id":"public/archives/2018/06/index.html","hash":"d5505db6d6bd8163746a72e45df98f98a2b2d90b","modified":1557111956754},{"_id":"public/archives/2018/10/index.html","hash":"d5f56f0380b715bec3ae37c3a88f88fbc12cea31","modified":1557111956754},{"_id":"public/categories/jenkins/index.html","hash":"32714f77d8e72826b0e10df2b391ab85c9c08e9a","modified":1557111956754},{"_id":"public/categories/linux/index.html","hash":"199239a9358942da120491b8549f47fc82751125","modified":1557111956754},{"_id":"public/categories/性能优化/index.html","hash":"cbeff660e205564f14861205f27c47a14c5b820c","modified":1557111956755},{"_id":"public/categories/hexo/index.html","hash":"0d341f9de5a696014a25eca7019c1f6eb446a434","modified":1557111956755},{"_id":"public/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/index.html","hash":"4ea88361f51630168fedeab20ab8f2ec01dd5469","modified":1557112709045},{"_id":"public/categories/docker/index.html","hash":"972c1dc21b05511fcc9b77afae11893f6976d5f8","modified":1557111956755},{"_id":"public/categories/atom/index.html","hash":"03ef60cd816c0a138f0c18a86357e0cd8714be3e","modified":1557111956755},{"_id":"public/categories/work/index.html","hash":"a09e61d683ff543477c3a104d49eeb2b4e6acb6b","modified":1557111956755},{"_id":"public/categories/solr/index.html","hash":"e56c61c72539673998b91adab290798ece52b838","modified":1557111956755},{"_id":"public/index.html","hash":"82d1226a15ace6ce5af76022c297f6b1bea9e71c","modified":1557112709047},{"_id":"public/categories/git/index.html","hash":"a14d9c7fa549510b00d1df2c11130c7f8e49e6aa","modified":1557111956756},{"_id":"public/page/2/index.html","hash":"b03f8b4a2094f92ff07820bd8fa22286c8a1fe21","modified":1557129593962},{"_id":"public/tags/docker/index.html","hash":"3bce11c2bb17fc9382bb940979895ed3d9817244","modified":1557111956756},{"_id":"public/tags/git/index.html","hash":"c1418a9637f7ef652d2206a0f31a06df48a4ee5e","modified":1557111956756},{"_id":"public/tags/maven/index.html","hash":"4238da1a201ca69a2ba6bf1c2a2e82f9d9ca29c8","modified":1557111956756},{"_id":"public/tags/jenkins/index.html","hash":"6ba9627fc10d5fa4b183b87c7b837f14fae8fc3f","modified":1557111956756},{"_id":"public/page/3/index.html","hash":"dd56f5a81f5bb929956375ab98e8c7ac7b2a0ec0","modified":1557111956756},{"_id":"public/tags/linux/index.html","hash":"e6f304d35cc6799155936f9428076270b023323f","modified":1557111956756},{"_id":"public/tags/rpm/index.html","hash":"9fb7e8b49a6ff55388ff6550418d4e866e528706","modified":1557111956757},{"_id":"public/tags/yum/index.html","hash":"9eb8d804f7836752043f508b1e017faba888fd0c","modified":1557111956757},{"_id":"public/tags/性能优化/index.html","hash":"7377f701b6c2abfa74d066d3a5c28ed2a13930d4","modified":1557111956757},{"_id":"public/tags/githubpage/index.html","hash":"c9f53becde13b86d52474f065b53d455b694187e","modified":1557111956757},{"_id":"public/tags/hexo/index.html","hash":"5d1c6bc04f313994fef1d74579898c14cba04d10","modified":1557111956757},{"_id":"public/categories/java/index.html","hash":"96693a35d44d41e69b5a6bd32b874509f5a09175","modified":1557111956757},{"_id":"public/categories/java/设计模式/index.html","hash":"ccb5b1797ece576a877db99c1b1589a84ee65c02","modified":1557111956758},{"_id":"public/tags/hexo-admin/index.html","hash":"41b8d6238800a91bafcd1bdc51cdc62229b168d2","modified":1557111956758},{"_id":"public/tags/java/index.html","hash":"ba3ea7f97ef9e3fd648d031ff2b938878c82e682","modified":1557111956761},{"_id":"public/tags/单例模式/index.html","hash":"83f2610a86d8d70a16bb1291b0decedc977c9bb3","modified":1557111956761},{"_id":"public/tags/线程/index.html","hash":"5ef45f1e138bc5c2cbe96a72c93abd766b522731","modified":1557111956762},{"_id":"public/tags/solr/index.html","hash":"2d3f11dcdc5d8b04f4a99cdec7ab5a535ba814f6","modified":1557111956762},{"_id":"public/tags/thymeleaf/index.html","hash":"809967785f8bb8a12a93ebc50e21f1e59f00b1d4","modified":1557111956762},{"_id":"public/tags/mysql/index.html","hash":"3e16346dad94860b0c24ac980fb1776fad6625eb","modified":1557111956762},{"_id":"public/tags/notepad/index.html","hash":"e396f2769012b0fe7fa15131c6481fbeb9afae01","modified":1557111956762},{"_id":"public/tags/plantuml/index.html","hash":"1257105763104d36393a6b7bad095454aeab9dc1","modified":1557111956762},{"_id":"public/tags/设计模式/index.html","hash":"133f3ba34f692b67dcd44a5a548e34337d381586","modified":1557111956762},{"_id":"public/tags/工作/index.html","hash":"1dc4674d037e391f914195c5170876de62e64025","modified":1557111956762},{"_id":"public/tags/work/index.html","hash":"b7c9802042628dec84ec0c29ea0713890dabc38d","modified":1557111956763},{"_id":"public/tags/工作效率/index.html","hash":"a6303f4ec96621430bed51d4821d5a5e729e6dd9","modified":1557111956763},{"_id":"public/tags/red-hat-Linux/index.html","hash":"4c65100fbfb7f734fa5e693e88e60d819e6c9e5b","modified":1557111956763},{"_id":"public/tags/tools/index.html","hash":"ba4ac582a8251dfa105bdaec0770d821bcc64b7d","modified":1557111956763},{"_id":"public/tags/atom/index.html","hash":"16065527365a52d0720ae7802f07ac1beb3936ff","modified":1557111956763},{"_id":"public/tags/solr-master/index.html","hash":"2f208a3a092b521516d368b99703411febdc5e57","modified":1557111956763},{"_id":"public/tags/solr-slave/index.html","hash":"1860116694fcc9c6e6f664f46f225c07aac6adfb","modified":1557111956763},{"_id":"public/tags/工具/index.html","hash":"a1d1b4c64f9839da2a70bfc91c10b06e597fd1fe","modified":1557111956763},{"_id":"public/archives/2019/index.html","hash":"fa43f46593fb6c90f7710514ffde6303ef33970c","modified":1557112709047},{"_id":"public/archives/2019/05/index.html","hash":"23ad82aa267a9443636f31ff253737d0c1d2785f","modified":1557112709046},{"_id":"public/tags/jpa/index.html","hash":"0f6692707560eb9e9027c751db7bcfc681e4588f","modified":1557112709047},{"_id":"public/images/pasted-0.png","hash":"eeeb7a46d25458f707233f486838388f30675dd0","modified":1557111956807},{"_id":"source/_posts/A问题.md","hash":"e6f8650bd38d75cbdb55f60a228f6d5e9bef8d0d","modified":1557112645926},{"_id":"source/images/pasted-1.png","hash":"3c34c5f526ed014aadcdd18bb1616e5f4967973c","modified":1557112052859},{"_id":"public/2019/05/06/A问题/index.html","hash":"691cdf346a4e01f59b832ed3b0de62f2c5dd63e1","modified":1557112709039},{"_id":"public/images/pasted-1.png","hash":"3c34c5f526ed014aadcdd18bb1616e5f4967973c","modified":1557112409588}],"Category":[{"name":"docker","_id":"cjvbprzh60006xwjlgg6a6rzp"},{"name":"jenkins","_id":"cjvbprzhy000bxwjlet5e42qj"},{"name":"linux","_id":"cjvbprzis000lxwjl3ramhaf2"},{"name":"性能优化","_id":"cjvbprzj5000rxwjly49m5po6"},{"name":"hexo","_id":"cjvbprzjf000xxwjl65bfbz6m"},{"name":"java","_id":"cjvbprzjv0016xwjlorm96kf8"},{"name":"solr","_id":"cjvbprzkb001exwjlh52ybp0g"},{"name":"atom","_id":"cjvbprzku001kxwjlljcj4ci6"},{"name":"git","_id":"cjvbprzl6001sxwjlakn09aio"},{"name":"work","_id":"cjvbprzli0020xwjltyhniqmm"},{"name":"设计模式","parent":"cjvbprzjv0016xwjlorm96kf8","_id":"cjvbprzlp0026xwjlp636i9ws"}],"Data":[],"Page":[{"title":"about","date":"2017-02-21T10:35:57.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2017-02-21 18:35:57\n---\n","updated":"2017-02-21T10:35:57.443Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"cjvbprzep0000xwjlc0pwbmg5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-02-20T09:27:32.000Z","_content":"我喜欢计算编程,专注后端开发 性能调优 spring 框架","source":"about/index.md","raw":"title: 关于我\ndate: 2017-02-20 17:27:32\n---\n我喜欢计算编程,专注后端开发 性能调优 spring 框架","updated":"2017-02-24T03:54:33.216Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvbprzeu0001xwjljn2gizyx","content":"<p>我喜欢计算编程,专注后端开发 性能调优 spring 框架</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我喜欢计算编程,专注后端开发 性能调优 spring 框架</p>\n"},{"title":"tags","date":"2017-02-21T10:32:53.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-21 18:32:53\n---\n","updated":"2017-02-21T10:32:53.082Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvbprzev0002xwjl6yanfnr1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"_content":"\n<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\n---\n\n<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","date":"2017-02-22T02:03:44.014Z","updated":"2017-02-22T02:03:44.014Z","path":"/404.html","layout":"page","_id":"cjvbprzg10003xwjlj9daz4er","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>","site":{"data":{}},"excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>"}],"Post":[{"title":"docker的使用","author":"wen","date":"2018-06-11T12:50:00.000Z","_content":"\n\n1 docker build出现Temporary failure resolving\n```\nvi/etc/systemd/system/multi-user.target.wants/docker.service ExecStart=/usr/bin/dockerd \n添加 --dns=8.8.8.8\n重新加载配置\n>systemctl daemon-reload \n --启动docker\n>systemctl start docker\n```","source":"_posts/docker的使用.md","raw":"title: docker的使用\nauthor: wen\ntags:\n  - docker\ncategories:\n  - docker\ndate: 2018-06-11 20:50:00\n---\n\n\n1 docker build出现Temporary failure resolving\n```\nvi/etc/systemd/system/multi-user.target.wants/docker.service ExecStart=/usr/bin/dockerd \n添加 --dns=8.8.8.8\n重新加载配置\n>systemctl daemon-reload \n --启动docker\n>systemctl start docker\n```","slug":"docker的使用","published":1,"updated":"2018-10-13T05:35:19.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzg20004xwjlihdcxz0g","content":"<p>1 docker build出现Temporary failure resolving<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi/etc/systemd/system/multi-user.target.wants/docker.service ExecStart=/usr/bin/dockerd </span><br><span class=\"line\">添加 --dns=8.8.8.8</span><br><span class=\"line\">重新加载配置</span><br><span class=\"line\">&gt;systemctl daemon-reload </span><br><span class=\"line\"> --启动docker</span><br><span class=\"line\">&gt;systemctl start docker</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1 docker build出现Temporary failure resolving<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi/etc/systemd/system/multi-user.target.wants/docker.service ExecStart=/usr/bin/dockerd </span><br><span class=\"line\">添加 --dns=8.8.8.8</span><br><span class=\"line\">重新加载配置</span><br><span class=\"line\">&gt;systemctl daemon-reload </span><br><span class=\"line\"> --启动docker</span><br><span class=\"line\">&gt;systemctl start docker</span><br></pre></td></tr></table></figure></p>\n"},{"title":"十二 jenkins 配置maven打包git代码","author":"wen","date":"2018-05-11T15:36:00.000Z","_content":"一 [jenkins-配置git证书](/2018/05/11/-jenkins-配置git证书/)\n二 [安装jenkins](/2018/05/08/安装jenkins/)\n三 [jenkins 配置java和Maven环境](/2018/05/11/enkinx-配置任务/)\n\n![logo](-jenkins-配置maven打包git代码/总图.png)\n# 一配置任务\n1.1点击 创建一个新任务\n![logo](-jenkins-配置maven打包git代码/1.png)\n1.2 输入名称  选择自由风格的软件项目\n![logo](-jenkins-配置maven打包git代码/2.png)\n1.3新增文本参数\n1.3.1参数docker.image.prefix: 私有库域名\n![logo](-jenkins-配置maven打包git代码/3.png)\n1.3.2参数docker.registry：私有库地址\n![logo](-jenkins-配置maven打包git代码/4.png)\n1.3.3参数docker.servcerId：刚才maven配置 私有库用户名和密码\n![logo](-jenkins-配置maven打包git代码/5.png)\n1.3.4参数version \n![logo](-jenkins-配置maven打包git代码/6.png)\n1.4配置 git库\n![logo](-jenkins-配置maven打包git代码/7.png)\n1.5构建步骤添加 执行Shell脚本\n![logo](-jenkins-配置maven打包git代码/8.png)\n```\n脚本命令：\necho $WORKSPACE\necho $MAVEN_HOME\ncd $WORKSPACE/Eureka\n$MAVEN_HOME/bin/mvn clean package docker:build -DpushImage -Ddocker.image.prefix=$docker_image_prefix -Ddocker.registry=$docker_registry -Ddocker.servcerId=$docker_servcerId -Dtag.version=$version\n```\n保存\n\n# 二 配置jenkins用户可以执行docker 命令\nliunx用户 使用jenkins 用户启动jenkins\n```\nvi /etc/systemd/system/multi-user.target.wants/docker.service\n ExecStart=/usr/bin/dockerd  -G jenkins\n\n```\n -G表示 jenkins用户可以执行docker 命令\n ![logo](-jenkins-配置maven打包git代码/9.png)\n \n 重新加载配置\n ```\n  systemctl daemon-reload\n  ```\n  重新启动docker\n  ```\n systemctl restart docker\n ```\n\n# 三执行任务 \n3.1 点击 Build with Parameters\n![logo](-jenkins-配置maven打包git代码/10.png)\n3.2 点击开始创建\n![logo](-jenkins-配置maven打包git代码/11.png)\n3.3查看脚本执行情况\n![logo](-jenkins-配置maven打包git代码/12.png)\n3.4成功后查看私有仓库目录\n![logo](-jenkins-配置maven打包git代码/132.png)","source":"_posts/-jenkins-配置maven打包git代码.md","raw":"title: 十二 jenkins 配置maven打包git代码\nauthor: wen\ntags:\n  - git\n  - maven\n  - docker\n  - jenkins\ncategories:\n  - jenkins\ndate: 2018-05-11 23:36:00\n---\n一 [jenkins-配置git证书](/2018/05/11/-jenkins-配置git证书/)\n二 [安装jenkins](/2018/05/08/安装jenkins/)\n三 [jenkins 配置java和Maven环境](/2018/05/11/enkinx-配置任务/)\n\n![logo](-jenkins-配置maven打包git代码/总图.png)\n# 一配置任务\n1.1点击 创建一个新任务\n![logo](-jenkins-配置maven打包git代码/1.png)\n1.2 输入名称  选择自由风格的软件项目\n![logo](-jenkins-配置maven打包git代码/2.png)\n1.3新增文本参数\n1.3.1参数docker.image.prefix: 私有库域名\n![logo](-jenkins-配置maven打包git代码/3.png)\n1.3.2参数docker.registry：私有库地址\n![logo](-jenkins-配置maven打包git代码/4.png)\n1.3.3参数docker.servcerId：刚才maven配置 私有库用户名和密码\n![logo](-jenkins-配置maven打包git代码/5.png)\n1.3.4参数version \n![logo](-jenkins-配置maven打包git代码/6.png)\n1.4配置 git库\n![logo](-jenkins-配置maven打包git代码/7.png)\n1.5构建步骤添加 执行Shell脚本\n![logo](-jenkins-配置maven打包git代码/8.png)\n```\n脚本命令：\necho $WORKSPACE\necho $MAVEN_HOME\ncd $WORKSPACE/Eureka\n$MAVEN_HOME/bin/mvn clean package docker:build -DpushImage -Ddocker.image.prefix=$docker_image_prefix -Ddocker.registry=$docker_registry -Ddocker.servcerId=$docker_servcerId -Dtag.version=$version\n```\n保存\n\n# 二 配置jenkins用户可以执行docker 命令\nliunx用户 使用jenkins 用户启动jenkins\n```\nvi /etc/systemd/system/multi-user.target.wants/docker.service\n ExecStart=/usr/bin/dockerd  -G jenkins\n\n```\n -G表示 jenkins用户可以执行docker 命令\n ![logo](-jenkins-配置maven打包git代码/9.png)\n \n 重新加载配置\n ```\n  systemctl daemon-reload\n  ```\n  重新启动docker\n  ```\n systemctl restart docker\n ```\n\n# 三执行任务 \n3.1 点击 Build with Parameters\n![logo](-jenkins-配置maven打包git代码/10.png)\n3.2 点击开始创建\n![logo](-jenkins-配置maven打包git代码/11.png)\n3.3查看脚本执行情况\n![logo](-jenkins-配置maven打包git代码/12.png)\n3.4成功后查看私有仓库目录\n![logo](-jenkins-配置maven打包git代码/132.png)","slug":"-jenkins-配置maven打包git代码","published":1,"updated":"2018-05-14T13:10:45.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzgd0005xwjl97gwkk4r","content":"<p>一 <a href=\"/2018/05/11/-jenkins-配置git证书/\">jenkins-配置git证书</a><br>二 <a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a><br>三 <a href=\"/2018/05/11/enkinx-配置任务/\">jenkins 配置java和Maven环境</a></p>\n<p><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/总图.png\" alt=\"logo\"></p>\n<h1 id=\"一配置任务\"><a href=\"#一配置任务\" class=\"headerlink\" title=\"一配置任务\"></a>一配置任务</h1><p>1.1点击 创建一个新任务<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/1.png\" alt=\"logo\"><br>1.2 输入名称  选择自由风格的软件项目<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/2.png\" alt=\"logo\"><br>1.3新增文本参数<br>1.3.1参数docker.image.prefix: 私有库域名<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/3.png\" alt=\"logo\"><br>1.3.2参数docker.registry：私有库地址<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/4.png\" alt=\"logo\"><br>1.3.3参数docker.servcerId：刚才maven配置 私有库用户名和密码<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/5.png\" alt=\"logo\"><br>1.3.4参数version<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/6.png\" alt=\"logo\"><br>1.4配置 git库<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/7.png\" alt=\"logo\"><br>1.5构建步骤添加 执行Shell脚本<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/8.png\" alt=\"logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">脚本命令：</span><br><span class=\"line\">echo $WORKSPACE</span><br><span class=\"line\">echo $MAVEN_HOME</span><br><span class=\"line\">cd $WORKSPACE/Eureka</span><br><span class=\"line\">$MAVEN_HOME/bin/mvn clean package docker:build -DpushImage -Ddocker.image.prefix=$docker_image_prefix -Ddocker.registry=$docker_registry -Ddocker.servcerId=$docker_servcerId -Dtag.version=$version</span><br></pre></td></tr></table></figure></p>\n<p>保存</p>\n<h1 id=\"二-配置jenkins用户可以执行docker-命令\"><a href=\"#二-配置jenkins用户可以执行docker-命令\" class=\"headerlink\" title=\"二 配置jenkins用户可以执行docker 命令\"></a>二 配置jenkins用户可以执行docker 命令</h1><p>liunx用户 使用jenkins 用户启动jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system/multi-user.target.wants/docker.service</span><br><span class=\"line\"> ExecStart=/usr/bin/dockerd  -G jenkins</span><br></pre></td></tr></table></figure></p>\n<p> -G表示 jenkins用户可以执行docker 命令<br> <img src=\"/2018/05/11/-jenkins-配置maven打包git代码/9.png\" alt=\"logo\"></p>\n<p> 重新加载配置<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>  重新启动docker<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"三执行任务\"><a href=\"#三执行任务\" class=\"headerlink\" title=\"三执行任务\"></a>三执行任务</h1><p>3.1 点击 Build with Parameters<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/10.png\" alt=\"logo\"><br>3.2 点击开始创建<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/11.png\" alt=\"logo\"><br>3.3查看脚本执行情况<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/12.png\" alt=\"logo\"><br>3.4成功后查看私有仓库目录<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/132.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一 <a href=\"/2018/05/11/-jenkins-配置git证书/\">jenkins-配置git证书</a><br>二 <a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a><br>三 <a href=\"/2018/05/11/enkinx-配置任务/\">jenkins 配置java和Maven环境</a></p>\n<p><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/总图.png\" alt=\"logo\"></p>\n<h1 id=\"一配置任务\"><a href=\"#一配置任务\" class=\"headerlink\" title=\"一配置任务\"></a>一配置任务</h1><p>1.1点击 创建一个新任务<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/1.png\" alt=\"logo\"><br>1.2 输入名称  选择自由风格的软件项目<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/2.png\" alt=\"logo\"><br>1.3新增文本参数<br>1.3.1参数docker.image.prefix: 私有库域名<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/3.png\" alt=\"logo\"><br>1.3.2参数docker.registry：私有库地址<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/4.png\" alt=\"logo\"><br>1.3.3参数docker.servcerId：刚才maven配置 私有库用户名和密码<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/5.png\" alt=\"logo\"><br>1.3.4参数version<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/6.png\" alt=\"logo\"><br>1.4配置 git库<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/7.png\" alt=\"logo\"><br>1.5构建步骤添加 执行Shell脚本<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/8.png\" alt=\"logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">脚本命令：</span><br><span class=\"line\">echo $WORKSPACE</span><br><span class=\"line\">echo $MAVEN_HOME</span><br><span class=\"line\">cd $WORKSPACE/Eureka</span><br><span class=\"line\">$MAVEN_HOME/bin/mvn clean package docker:build -DpushImage -Ddocker.image.prefix=$docker_image_prefix -Ddocker.registry=$docker_registry -Ddocker.servcerId=$docker_servcerId -Dtag.version=$version</span><br></pre></td></tr></table></figure></p>\n<p>保存</p>\n<h1 id=\"二-配置jenkins用户可以执行docker-命令\"><a href=\"#二-配置jenkins用户可以执行docker-命令\" class=\"headerlink\" title=\"二 配置jenkins用户可以执行docker 命令\"></a>二 配置jenkins用户可以执行docker 命令</h1><p>liunx用户 使用jenkins 用户启动jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system/multi-user.target.wants/docker.service</span><br><span class=\"line\"> ExecStart=/usr/bin/dockerd  -G jenkins</span><br></pre></td></tr></table></figure></p>\n<p> -G表示 jenkins用户可以执行docker 命令<br> <img src=\"/2018/05/11/-jenkins-配置maven打包git代码/9.png\" alt=\"logo\"></p>\n<p> 重新加载配置<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>  重新启动docker<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"三执行任务\"><a href=\"#三执行任务\" class=\"headerlink\" title=\"三执行任务\"></a>三执行任务</h1><p>3.1 点击 Build with Parameters<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/10.png\" alt=\"logo\"><br>3.2 点击开始创建<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/11.png\" alt=\"logo\"><br>3.3查看脚本执行情况<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/12.png\" alt=\"logo\"><br>3.4成功后查看私有仓库目录<br><img src=\"/2018/05/11/-jenkins-配置maven打包git代码/132.png\" alt=\"logo\"></p>\n"},{"title":"十一 jenkins 配置git证书","author":"wen","date":"2018-05-11T15:26:00.000Z","_content":"[linux 安装 GIT（root用户）](/2018/05/08/三）linux-安装-GIT（root用户）/)\n[安装jenkins](/2018/05/08/安装jenkins/)\n\n# 一 linux 生成RSA key\nlinux远程登录ssh ywtan@localhost\n```\n  ssh-keygen -t rsa\n```\n![logo](-jenkins-配置git证书/1.png)\n\n全部回车\n```\ncat .ssh/id_rsa(这是刚才设置 rsa_key)\n```\n\n# 二 jenkins 配置git证书\n2.1 在jenkins 页面点击credentials\n![logo](-jenkins-配置git证书/2.png)\n2.2 点击 system\n![logo](-jenkins-配置git证书/3.png)\n2.3 点击 Global credentials (unrestricted)\n![logo](-jenkins-配置git证书/4.png)\n2.4 add Credentials\n![logo](-jenkins-配置git证书/5.png)\n2.5 如图所示填写， key是刚才生成的key，最后点击保存\n![logo](-jenkins-配置git证书/6.png)","source":"_posts/-jenkins-配置git证书.md","raw":"title: 十一 jenkins 配置git证书\nauthor: wen\ntags:\n  - jenkins\n  - git\ncategories:\n  - jenkins\ndate: 2018-05-11 23:26:00\n---\n[linux 安装 GIT（root用户）](/2018/05/08/三）linux-安装-GIT（root用户）/)\n[安装jenkins](/2018/05/08/安装jenkins/)\n\n# 一 linux 生成RSA key\nlinux远程登录ssh ywtan@localhost\n```\n  ssh-keygen -t rsa\n```\n![logo](-jenkins-配置git证书/1.png)\n\n全部回车\n```\ncat .ssh/id_rsa(这是刚才设置 rsa_key)\n```\n\n# 二 jenkins 配置git证书\n2.1 在jenkins 页面点击credentials\n![logo](-jenkins-配置git证书/2.png)\n2.2 点击 system\n![logo](-jenkins-配置git证书/3.png)\n2.3 点击 Global credentials (unrestricted)\n![logo](-jenkins-配置git证书/4.png)\n2.4 add Credentials\n![logo](-jenkins-配置git证书/5.png)\n2.5 如图所示填写， key是刚才生成的key，最后点击保存\n![logo](-jenkins-配置git证书/6.png)","slug":"-jenkins-配置git证书","published":1,"updated":"2018-05-11T15:38:51.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzhd0008xwjlpvmpnqk8","content":"<p><a href=\"/2018/05/08/三）linux-安装-GIT（root用户）/\">linux 安装 GIT（root用户）</a><br><a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a></p>\n<h1 id=\"一-linux-生成RSA-key\"><a href=\"#一-linux-生成RSA-key\" class=\"headerlink\" title=\"一 linux 生成RSA key\"></a>一 linux 生成RSA key</h1><p>linux远程登录ssh ywtan@localhost<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/05/11/-jenkins-配置git证书/1.png\" alt=\"logo\"></p>\n<p>全部回车<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat .ssh/id_rsa(这是刚才设置 rsa_key)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-jenkins-配置git证书\"><a href=\"#二-jenkins-配置git证书\" class=\"headerlink\" title=\"二 jenkins 配置git证书\"></a>二 jenkins 配置git证书</h1><p>2.1 在jenkins 页面点击credentials<br><img src=\"/2018/05/11/-jenkins-配置git证书/2.png\" alt=\"logo\"><br>2.2 点击 system<br><img src=\"/2018/05/11/-jenkins-配置git证书/3.png\" alt=\"logo\"><br>2.3 点击 Global credentials (unrestricted)<br><img src=\"/2018/05/11/-jenkins-配置git证书/4.png\" alt=\"logo\"><br>2.4 add Credentials<br><img src=\"/2018/05/11/-jenkins-配置git证书/5.png\" alt=\"logo\"><br>2.5 如图所示填写， key是刚才生成的key，最后点击保存<br><img src=\"/2018/05/11/-jenkins-配置git证书/6.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/2018/05/08/三）linux-安装-GIT（root用户）/\">linux 安装 GIT（root用户）</a><br><a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a></p>\n<h1 id=\"一-linux-生成RSA-key\"><a href=\"#一-linux-生成RSA-key\" class=\"headerlink\" title=\"一 linux 生成RSA key\"></a>一 linux 生成RSA key</h1><p>linux远程登录ssh ywtan@localhost<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/05/11/-jenkins-配置git证书/1.png\" alt=\"logo\"></p>\n<p>全部回车<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat .ssh/id_rsa(这是刚才设置 rsa_key)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-jenkins-配置git证书\"><a href=\"#二-jenkins-配置git证书\" class=\"headerlink\" title=\"二 jenkins 配置git证书\"></a>二 jenkins 配置git证书</h1><p>2.1 在jenkins 页面点击credentials<br><img src=\"/2018/05/11/-jenkins-配置git证书/2.png\" alt=\"logo\"><br>2.2 点击 system<br><img src=\"/2018/05/11/-jenkins-配置git证书/3.png\" alt=\"logo\"><br>2.3 点击 Global credentials (unrestricted)<br><img src=\"/2018/05/11/-jenkins-配置git证书/4.png\" alt=\"logo\"><br>2.4 add Credentials<br><img src=\"/2018/05/11/-jenkins-配置git证书/5.png\" alt=\"logo\"><br>2.5 如图所示填写， key是刚才生成的key，最后点击保存<br><img src=\"/2018/05/11/-jenkins-配置git证书/6.png\" alt=\"logo\"></p>\n"},{"title":"(二）Red-Hat-升级-rpm软件、YUM软件（root用户）","author":"wen","date":"2018-05-08T07:30:00.000Z","_content":"以下操作是root用户\n\n1 [oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\nrpm 下载链接：http://mirrors.163.com/centos/7/os/x86_64/Packages/\n\n# 查看版本\n```\n> rpm version\n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-76fc51b36f51535f.png)\n\n# 升级rpm\n```\n>rpm -Uvh rpm-4.11.3-25.el7.x86_64.rpm  rpm-build-libs-4.11.3-25.el7.x86_64.rpm rpm-libs-4.11.3-25.el7.x86_64.rpm rpm-python-4.11.3-25.el7.x86_64.rpm --force -i  \n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-2b0c840c69622e92.png)\n# 删除旧的yum\n```\n> rpm -e yum-metadata-parser-1.1.4-10.el7.x86_64 yum-3.4.3-125.el7.noarch yum-rhn-plugin-2.0.1-5.el7.noarch --nodeps\n```\n# 安装yum\n```\n> rpm -Uvh yum-3.4.3-154.el7.centos.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm python-urlgrabber-3.10-8.el7.noarch.rpm yum-plugin-fastestmirror-1.1.31-42.el7.noarch.rpm yum-utils-1.1.31-42.el7.noarch.rpm  python-kitchen-1.1.1-5.el7.noarch.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm\n```\n# 编辑 CentOS6-Base.repo\n```\nvi CentOS6-Base.repo 文件\n```\n\n# CentOS-Base.repo\n```\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n \n[base]\nname=CentOS-7 - Base - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/os/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=os\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#released updates \n[updates]\nname=CentOS-7 - Updates - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=updates\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#additional packages that may be useful\n[extras]\nname=CentOS-7 - Extras - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=extras\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-7 - Plus - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/centosplus/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/centosplus/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=centosplus\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#contrib - packages by Centos Users\n[contrib]\nname=CentOS-7 - Contrib - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=contrib\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n```\n\n# 复制资源库文件至yum目录\n```\n> cp CentOS6-Base.repo /etc/yum.repos.d/\n```\n# 清除缓存\n```\n>yum clean all\n```\n# 建立yum 缓存\n```\n>yum makecache\n\n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-d31d27becb290491.png)\n\n# 再次更新yum\n```\nyum update yum\n```\n\nyum install yum-rhn*\n\nyum update redhat*","source":"_posts/Red-Hat-升级-rpm软件、YUM软件（root用户）.md","raw":"title: (二）Red-Hat-升级-rpm软件、YUM软件（root用户）\nauthor: wen\ntags:\n  - linux\n  - rpm\n  - yum\ncategories:\n  - linux\ndate: 2018-05-08 15:30:00\n---\n以下操作是root用户\n\n1 [oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\nrpm 下载链接：http://mirrors.163.com/centos/7/os/x86_64/Packages/\n\n# 查看版本\n```\n> rpm version\n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-76fc51b36f51535f.png)\n\n# 升级rpm\n```\n>rpm -Uvh rpm-4.11.3-25.el7.x86_64.rpm  rpm-build-libs-4.11.3-25.el7.x86_64.rpm rpm-libs-4.11.3-25.el7.x86_64.rpm rpm-python-4.11.3-25.el7.x86_64.rpm --force -i  \n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-2b0c840c69622e92.png)\n# 删除旧的yum\n```\n> rpm -e yum-metadata-parser-1.1.4-10.el7.x86_64 yum-3.4.3-125.el7.noarch yum-rhn-plugin-2.0.1-5.el7.noarch --nodeps\n```\n# 安装yum\n```\n> rpm -Uvh yum-3.4.3-154.el7.centos.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm python-urlgrabber-3.10-8.el7.noarch.rpm yum-plugin-fastestmirror-1.1.31-42.el7.noarch.rpm yum-utils-1.1.31-42.el7.noarch.rpm  python-kitchen-1.1.1-5.el7.noarch.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm\n```\n# 编辑 CentOS6-Base.repo\n```\nvi CentOS6-Base.repo 文件\n```\n\n# CentOS-Base.repo\n```\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n \n[base]\nname=CentOS-7 - Base - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/os/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=os\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#released updates \n[updates]\nname=CentOS-7 - Updates - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=updates\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#additional packages that may be useful\n[extras]\nname=CentOS-7 - Extras - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=extras\ngpgcheck=1\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-7 - Plus - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/centosplus/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/centosplus/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=centosplus\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n \n#contrib - packages by Centos Users\n[contrib]\nname=CentOS-7 - Contrib - mirrors.aliyun.com\nfailovermethod=priority\nbaseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/\n        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/\n#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=$basearch&repo=contrib\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7\n\n```\n\n# 复制资源库文件至yum目录\n```\n> cp CentOS6-Base.repo /etc/yum.repos.d/\n```\n# 清除缓存\n```\n>yum clean all\n```\n# 建立yum 缓存\n```\n>yum makecache\n\n```\n![logo](Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-d31d27becb290491.png)\n\n# 再次更新yum\n```\nyum update yum\n```\n\nyum install yum-rhn*\n\nyum update redhat*","slug":"Red-Hat-升级-rpm软件、YUM软件（root用户）","published":1,"updated":"2018-06-08T15:26:14.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzho0009xwjl8a5ta1f3","content":"<p>以下操作是root用户</p>\n<p>1 <a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p>rpm 下载链接：<a href=\"http://mirrors.163.com/centos/7/os/x86_64/Packages/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/centos/7/os/x86_64/Packages/</a></p>\n<h1 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-76fc51b36f51535f.png\" alt=\"logo\"></p>\n<h1 id=\"升级rpm\"><a href=\"#升级rpm\" class=\"headerlink\" title=\"升级rpm\"></a>升级rpm</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;rpm -Uvh rpm-4.11.3-25.el7.x86_64.rpm  rpm-build-libs-4.11.3-25.el7.x86_64.rpm rpm-libs-4.11.3-25.el7.x86_64.rpm rpm-python-4.11.3-25.el7.x86_64.rpm --force -i</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-2b0c840c69622e92.png\" alt=\"logo\"></p>\n<h1 id=\"删除旧的yum\"><a href=\"#删除旧的yum\" class=\"headerlink\" title=\"删除旧的yum\"></a>删除旧的yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -e yum-metadata-parser-1.1.4-10.el7.x86_64 yum-3.4.3-125.el7.noarch yum-rhn-plugin-2.0.1-5.el7.noarch --nodeps</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装yum\"><a href=\"#安装yum\" class=\"headerlink\" title=\"安装yum\"></a>安装yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -Uvh yum-3.4.3-154.el7.centos.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm python-urlgrabber-3.10-8.el7.noarch.rpm yum-plugin-fastestmirror-1.1.31-42.el7.noarch.rpm yum-utils-1.1.31-42.el7.noarch.rpm  python-kitchen-1.1.1-5.el7.noarch.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑-CentOS6-Base-repo\"><a href=\"#编辑-CentOS6-Base-repo\" class=\"headerlink\" title=\"编辑 CentOS6-Base.repo\"></a>编辑 CentOS6-Base.repo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi CentOS6-Base.repo 文件</span><br></pre></td></tr></table></figure>\n<h1 id=\"CentOS-Base-repo\"><a href=\"#CentOS-Base-repo\" class=\"headerlink\" title=\"CentOS-Base.repo\"></a>CentOS-Base.repo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CentOS-Base.repo</span><br><span class=\"line\">#</span><br><span class=\"line\"># The mirror system uses the connecting IP address of the client and the</span><br><span class=\"line\"># update status of each mirror to pick mirrors that are updated to and</span><br><span class=\"line\"># geographically close to the client.  You should use this for CentOS updates</span><br><span class=\"line\"># unless you are manually picking other mirrors.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class=\"line\"># remarked out baseurl= line instead.</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"> </span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-7 - Base - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/os/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=os</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#released updates </span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-7 - Updates - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=updates</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#additional packages that may be useful</span><br><span class=\"line\">[extras]</span><br><span class=\"line\">name=CentOS-7 - Extras - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=extras</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#additional packages that extend functionality of existing packages</span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-7 - Plus - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/centosplus/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/centosplus/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=centosplus</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#contrib - packages by Centos Users</span><br><span class=\"line\">[contrib]</span><br><span class=\"line\">name=CentOS-7 - Contrib - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=contrib</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>\n<h1 id=\"复制资源库文件至yum目录\"><a href=\"#复制资源库文件至yum目录\" class=\"headerlink\" title=\"复制资源库文件至yum目录\"></a>复制资源库文件至yum目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cp CentOS6-Base.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>\n<h1 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;yum clean all</span><br></pre></td></tr></table></figure>\n<h1 id=\"建立yum-缓存\"><a href=\"#建立yum-缓存\" class=\"headerlink\" title=\"建立yum 缓存\"></a>建立yum 缓存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;yum makecache</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-d31d27becb290491.png\" alt=\"logo\"></p>\n<h1 id=\"再次更新yum\"><a href=\"#再次更新yum\" class=\"headerlink\" title=\"再次更新yum\"></a>再次更新yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update yum</span><br></pre></td></tr></table></figure>\n<p>yum install yum-rhn*</p>\n<p>yum update redhat*</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下操作是root用户</p>\n<p>1 <a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p>rpm 下载链接：<a href=\"http://mirrors.163.com/centos/7/os/x86_64/Packages/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/centos/7/os/x86_64/Packages/</a></p>\n<h1 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-76fc51b36f51535f.png\" alt=\"logo\"></p>\n<h1 id=\"升级rpm\"><a href=\"#升级rpm\" class=\"headerlink\" title=\"升级rpm\"></a>升级rpm</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;rpm -Uvh rpm-4.11.3-25.el7.x86_64.rpm  rpm-build-libs-4.11.3-25.el7.x86_64.rpm rpm-libs-4.11.3-25.el7.x86_64.rpm rpm-python-4.11.3-25.el7.x86_64.rpm --force -i</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-2b0c840c69622e92.png\" alt=\"logo\"></p>\n<h1 id=\"删除旧的yum\"><a href=\"#删除旧的yum\" class=\"headerlink\" title=\"删除旧的yum\"></a>删除旧的yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -e yum-metadata-parser-1.1.4-10.el7.x86_64 yum-3.4.3-125.el7.noarch yum-rhn-plugin-2.0.1-5.el7.noarch --nodeps</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装yum\"><a href=\"#安装yum\" class=\"headerlink\" title=\"安装yum\"></a>安装yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpm -Uvh yum-3.4.3-154.el7.centos.noarch.rpm yum-metadata-parser-1.1.4-10.el7.x86_64.rpm python-urlgrabber-3.10-8.el7.noarch.rpm yum-plugin-fastestmirror-1.1.31-42.el7.noarch.rpm yum-utils-1.1.31-42.el7.noarch.rpm  python-kitchen-1.1.1-5.el7.noarch.rpm python-chardet-2.2.1-1.el7_1.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑-CentOS6-Base-repo\"><a href=\"#编辑-CentOS6-Base-repo\" class=\"headerlink\" title=\"编辑 CentOS6-Base.repo\"></a>编辑 CentOS6-Base.repo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi CentOS6-Base.repo 文件</span><br></pre></td></tr></table></figure>\n<h1 id=\"CentOS-Base-repo\"><a href=\"#CentOS-Base-repo\" class=\"headerlink\" title=\"CentOS-Base.repo\"></a>CentOS-Base.repo</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CentOS-Base.repo</span><br><span class=\"line\">#</span><br><span class=\"line\"># The mirror system uses the connecting IP address of the client and the</span><br><span class=\"line\"># update status of each mirror to pick mirrors that are updated to and</span><br><span class=\"line\"># geographically close to the client.  You should use this for CentOS updates</span><br><span class=\"line\"># unless you are manually picking other mirrors.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class=\"line\"># remarked out baseurl= line instead.</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"> </span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-7 - Base - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/os/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/os/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=os</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#released updates </span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-7 - Updates - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/updates/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/updates/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=updates</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#additional packages that may be useful</span><br><span class=\"line\">[extras]</span><br><span class=\"line\">name=CentOS-7 - Extras - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/extras/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/extras/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=extras</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#additional packages that extend functionality of existing packages</span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-7 - Plus - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/centosplus/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/centosplus/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=centosplus</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">#contrib - packages by Centos Users</span><br><span class=\"line\">[contrib]</span><br><span class=\"line\">name=CentOS-7 - Contrib - mirrors.aliyun.com</span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/centos/7/contrib/$basearch/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos/7/contrib/$basearch/</span><br><span class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=contrib</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>\n<h1 id=\"复制资源库文件至yum目录\"><a href=\"#复制资源库文件至yum目录\" class=\"headerlink\" title=\"复制资源库文件至yum目录\"></a>复制资源库文件至yum目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cp CentOS6-Base.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>\n<h1 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;yum clean all</span><br></pre></td></tr></table></figure>\n<h1 id=\"建立yum-缓存\"><a href=\"#建立yum-缓存\" class=\"headerlink\" title=\"建立yum 缓存\"></a>建立yum 缓存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;yum makecache</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/08/Red-Hat-升级-rpm软件、YUM软件（root用户）/11278290-d31d27becb290491.png\" alt=\"logo\"></p>\n<h1 id=\"再次更新yum\"><a href=\"#再次更新yum\" class=\"headerlink\" title=\"再次更新yum\"></a>再次更新yum</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update yum</span><br></pre></td></tr></table></figure>\n<p>yum install yum-rhn*</p>\n<p>yum update redhat*</p>\n"},{"title":"用GTmetrix来优化你的网页（集成了YSlow、FireBug的功能）","author":"wen","date":"2017-02-28T06:57:00.000Z","_content":"<Excerpt in index | 首页摘要>\n网址是：http://gtmetrix.com/ ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n![logo](gtmetix/1.jpg)\n一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。\n\n## YSlow的检查项目\n  ### Leverage browser caching  浏览器缓存\n  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。\n      \n  ### Specify a cache validator 指定缓存验证器   \nAll static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。\n\n ### Optimize images 优化图片\nReduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。\n\n### Specify image dimensions 指定图片大小\nSpecifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。\n\n### Enable gzip compression 启用gzip压缩\n\nReduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。\n\n### Minify JavaScript 缩小javascript\nCompacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间\n\n### Minify HTML 缩小HTML\nCompacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。\n\n### Specify a Vary: Accept-Encoding header\n\nBugs in some public proxies may lead to compressed versions of your resources being served to users that don't support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。\n\n### Remove query strings from static resources 从静态资源中删除查询字符串\n\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a \"?\" in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。\n\n### Avoid bad requests 避免不良的请求\nRemoving \"broken links\", or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。\n\n### Avoid landing page redirects 避免着陆页重定向\nRedirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。\n\n### Defer parsing of JavaScript 延迟JavaScript的解析\nIn order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。\n\n### Enable Keep-Alive 启用保持活动\nEnabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。\n\n### Inline small CSS 内联小型外部CSS文件\nInlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。\n\n## PageSpeed的检查项\n\n## Waterfall\n\n## Timings\n\n\n## vedio\n\n## Histroy","source":"_posts/gtmetix.md","raw":"title: 用GTmetrix来优化你的网页（集成了YSlow、FireBug的功能）\nauthor: wen\ntags:\n  - 性能优化\ncategories:\n  - 性能优化\ndate: 2017-02-28 14:57:00\n---\n<Excerpt in index | 首页摘要>\n网址是：http://gtmetrix.com/ ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n![logo](gtmetix/1.jpg)\n一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。\n\n## YSlow的检查项目\n  ### Leverage browser caching  浏览器缓存\n  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。\n      \n  ### Specify a cache validator 指定缓存验证器   \nAll static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。\n\n ### Optimize images 优化图片\nReduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。\n\n### Specify image dimensions 指定图片大小\nSpecifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。\n\n### Enable gzip compression 启用gzip压缩\n\nReduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。\n\n### Minify JavaScript 缩小javascript\nCompacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间\n\n### Minify HTML 缩小HTML\nCompacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。\n\n### Specify a Vary: Accept-Encoding header\n\nBugs in some public proxies may lead to compressed versions of your resources being served to users that don't support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。\n\n### Remove query strings from static resources 从静态资源中删除查询字符串\n\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a \"?\" in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。\n\n### Avoid bad requests 避免不良的请求\nRemoving \"broken links\", or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。\n\n### Avoid landing page redirects 避免着陆页重定向\nRedirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。\n\n### Defer parsing of JavaScript 延迟JavaScript的解析\nIn order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。\n\n### Enable Keep-Alive 启用保持活动\nEnabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。\n\n### Inline small CSS 内联小型外部CSS文件\nInlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。\n\n## PageSpeed的检查项\n\n## Waterfall\n\n## Timings\n\n\n## vedio\n\n## Histroy","slug":"gtmetix","published":1,"updated":"2017-03-01T03:21:37.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzhs000axwjl7bny3vtp","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>网址是：<a href=\"http://gtmetrix.com/\" target=\"_blank\" rel=\"noopener\">http://gtmetrix.com/</a> ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。<br><a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><img src=\"/2017/02/28/gtmetix/1.jpg\" alt=\"logo\"><br>一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。</p>\n<h2 id=\"YSlow的检查项目\"><a href=\"#YSlow的检查项目\" class=\"headerlink\" title=\"YSlow的检查项目\"></a>YSlow的检查项目</h2><h3 id=\"Leverage-browser-caching-浏览器缓存\"><a href=\"#Leverage-browser-caching-浏览器缓存\" class=\"headerlink\" title=\"Leverage browser caching  浏览器缓存\"></a>Leverage browser caching  浏览器缓存</h3><p>  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。</p>\n<h3 id=\"Specify-a-cache-validator-指定缓存验证器\"><a href=\"#Specify-a-cache-validator-指定缓存验证器\" class=\"headerlink\" title=\"Specify a cache validator 指定缓存验证器\"></a>Specify a cache validator 指定缓存验证器</h3><p>All static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。</p>\n<h3 id=\"Optimize-images-优化图片\"><a href=\"#Optimize-images-优化图片\" class=\"headerlink\" title=\"Optimize images 优化图片\"></a>Optimize images 优化图片</h3><p>Reduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。</p>\n<h3 id=\"Specify-image-dimensions-指定图片大小\"><a href=\"#Specify-image-dimensions-指定图片大小\" class=\"headerlink\" title=\"Specify image dimensions 指定图片大小\"></a>Specify image dimensions 指定图片大小</h3><p>Specifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。</p>\n<h3 id=\"Enable-gzip-compression-启用gzip压缩\"><a href=\"#Enable-gzip-compression-启用gzip压缩\" class=\"headerlink\" title=\"Enable gzip compression 启用gzip压缩\"></a>Enable gzip compression 启用gzip压缩</h3><p>Reduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。</p>\n<h3 id=\"Minify-JavaScript-缩小javascript\"><a href=\"#Minify-JavaScript-缩小javascript\" class=\"headerlink\" title=\"Minify JavaScript 缩小javascript\"></a>Minify JavaScript 缩小javascript</h3><p>Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间</p>\n<h3 id=\"Minify-HTML-缩小HTML\"><a href=\"#Minify-HTML-缩小HTML\" class=\"headerlink\" title=\"Minify HTML 缩小HTML\"></a>Minify HTML 缩小HTML</h3><p>Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。</p>\n<h3 id=\"Specify-a-Vary-Accept-Encoding-header\"><a href=\"#Specify-a-Vary-Accept-Encoding-header\" class=\"headerlink\" title=\"Specify a Vary: Accept-Encoding header\"></a>Specify a Vary: Accept-Encoding header</h3><p>Bugs in some public proxies may lead to compressed versions of your resources being served to users that don’t support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。</p>\n<h3 id=\"Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\"><a href=\"#Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\" class=\"headerlink\" title=\"Remove query strings from static resources 从静态资源中删除查询字符串\"></a>Remove query strings from static resources 从静态资源中删除查询字符串</h3><p>Most proxies, most notably Squid up through version 3.0, do not cache resources with a “?” in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。</p>\n<h3 id=\"Avoid-bad-requests-避免不良的请求\"><a href=\"#Avoid-bad-requests-避免不良的请求\" class=\"headerlink\" title=\"Avoid bad requests 避免不良的请求\"></a>Avoid bad requests 避免不良的请求</h3><p>Removing “broken links”, or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。</p>\n<h3 id=\"Avoid-landing-page-redirects-避免着陆页重定向\"><a href=\"#Avoid-landing-page-redirects-避免着陆页重定向\" class=\"headerlink\" title=\"Avoid landing page redirects 避免着陆页重定向\"></a>Avoid landing page redirects 避免着陆页重定向</h3><p>Redirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。</p>\n<h3 id=\"Defer-parsing-of-JavaScript-延迟JavaScript的解析\"><a href=\"#Defer-parsing-of-JavaScript-延迟JavaScript的解析\" class=\"headerlink\" title=\"Defer parsing of JavaScript 延迟JavaScript的解析\"></a>Defer parsing of JavaScript 延迟JavaScript的解析</h3><p>In order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。</p>\n<h3 id=\"Enable-Keep-Alive-启用保持活动\"><a href=\"#Enable-Keep-Alive-启用保持活动\" class=\"headerlink\" title=\"Enable Keep-Alive 启用保持活动\"></a>Enable Keep-Alive 启用保持活动</h3><p>Enabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。</p>\n<h3 id=\"Inline-small-CSS-内联小型外部CSS文件\"><a href=\"#Inline-small-CSS-内联小型外部CSS文件\" class=\"headerlink\" title=\"Inline small CSS 内联小型外部CSS文件\"></a>Inline small CSS 内联小型外部CSS文件</h3><p>Inlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。</p>\n<h2 id=\"PageSpeed的检查项\"><a href=\"#PageSpeed的检查项\" class=\"headerlink\" title=\"PageSpeed的检查项\"></a>PageSpeed的检查项</h2><h2 id=\"Waterfall\"><a href=\"#Waterfall\" class=\"headerlink\" title=\"Waterfall\"></a>Waterfall</h2><h2 id=\"Timings\"><a href=\"#Timings\" class=\"headerlink\" title=\"Timings\"></a>Timings</h2><h2 id=\"vedio\"><a href=\"#vedio\" class=\"headerlink\" title=\"vedio\"></a>vedio</h2><h2 id=\"Histroy\"><a href=\"#Histroy\" class=\"headerlink\" title=\"Histroy\"></a>Histroy</h2></script></p></the>","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>网址是：<a href=\"http://gtmetrix.com/\" target=\"_blank\" rel=\"noopener\">http://gtmetrix.com/</a> ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。<br></excerpt></p>","more":"<p></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><img src=\"/2017/02/28/gtmetix/1.jpg\" alt=\"logo\"><br>一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。</p>\n<h2 id=\"YSlow的检查项目\"><a href=\"#YSlow的检查项目\" class=\"headerlink\" title=\"YSlow的检查项目\"></a>YSlow的检查项目</h2><h3 id=\"Leverage-browser-caching-浏览器缓存\"><a href=\"#Leverage-browser-caching-浏览器缓存\" class=\"headerlink\" title=\"Leverage browser caching  浏览器缓存\"></a>Leverage browser caching  浏览器缓存</h3><p>  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。</p>\n<h3 id=\"Specify-a-cache-validator-指定缓存验证器\"><a href=\"#Specify-a-cache-validator-指定缓存验证器\" class=\"headerlink\" title=\"Specify a cache validator 指定缓存验证器\"></a>Specify a cache validator 指定缓存验证器</h3><p>All static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。</p>\n<h3 id=\"Optimize-images-优化图片\"><a href=\"#Optimize-images-优化图片\" class=\"headerlink\" title=\"Optimize images 优化图片\"></a>Optimize images 优化图片</h3><p>Reduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。</p>\n<h3 id=\"Specify-image-dimensions-指定图片大小\"><a href=\"#Specify-image-dimensions-指定图片大小\" class=\"headerlink\" title=\"Specify image dimensions 指定图片大小\"></a>Specify image dimensions 指定图片大小</h3><p>Specifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。</p>\n<h3 id=\"Enable-gzip-compression-启用gzip压缩\"><a href=\"#Enable-gzip-compression-启用gzip压缩\" class=\"headerlink\" title=\"Enable gzip compression 启用gzip压缩\"></a>Enable gzip compression 启用gzip压缩</h3><p>Reduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。</p>\n<h3 id=\"Minify-JavaScript-缩小javascript\"><a href=\"#Minify-JavaScript-缩小javascript\" class=\"headerlink\" title=\"Minify JavaScript 缩小javascript\"></a>Minify JavaScript 缩小javascript</h3><p>Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间</p>\n<h3 id=\"Minify-HTML-缩小HTML\"><a href=\"#Minify-HTML-缩小HTML\" class=\"headerlink\" title=\"Minify HTML 缩小HTML\"></a>Minify HTML 缩小HTML</h3><p>Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。</p>\n<h3 id=\"Specify-a-Vary-Accept-Encoding-header\"><a href=\"#Specify-a-Vary-Accept-Encoding-header\" class=\"headerlink\" title=\"Specify a Vary: Accept-Encoding header\"></a>Specify a Vary: Accept-Encoding header</h3><p>Bugs in some public proxies may lead to compressed versions of your resources being served to users that don’t support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。</p>\n<h3 id=\"Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\"><a href=\"#Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\" class=\"headerlink\" title=\"Remove query strings from static resources 从静态资源中删除查询字符串\"></a>Remove query strings from static resources 从静态资源中删除查询字符串</h3><p>Most proxies, most notably Squid up through version 3.0, do not cache resources with a “?” in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。</p>\n<h3 id=\"Avoid-bad-requests-避免不良的请求\"><a href=\"#Avoid-bad-requests-避免不良的请求\" class=\"headerlink\" title=\"Avoid bad requests 避免不良的请求\"></a>Avoid bad requests 避免不良的请求</h3><p>Removing “broken links”, or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。</p>\n<h3 id=\"Avoid-landing-page-redirects-避免着陆页重定向\"><a href=\"#Avoid-landing-page-redirects-避免着陆页重定向\" class=\"headerlink\" title=\"Avoid landing page redirects 避免着陆页重定向\"></a>Avoid landing page redirects 避免着陆页重定向</h3><p>Redirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。</p>\n<h3 id=\"Defer-parsing-of-JavaScript-延迟JavaScript的解析\"><a href=\"#Defer-parsing-of-JavaScript-延迟JavaScript的解析\" class=\"headerlink\" title=\"Defer parsing of JavaScript 延迟JavaScript的解析\"></a>Defer parsing of JavaScript 延迟JavaScript的解析</h3><p>In order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。</p>\n<h3 id=\"Enable-Keep-Alive-启用保持活动\"><a href=\"#Enable-Keep-Alive-启用保持活动\" class=\"headerlink\" title=\"Enable Keep-Alive 启用保持活动\"></a>Enable Keep-Alive 启用保持活动</h3><p>Enabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。</p>\n<h3 id=\"Inline-small-CSS-内联小型外部CSS文件\"><a href=\"#Inline-small-CSS-内联小型外部CSS文件\" class=\"headerlink\" title=\"Inline small CSS 内联小型外部CSS文件\"></a>Inline small CSS 内联小型外部CSS文件</h3><p>Inlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。</p>\n<h2 id=\"PageSpeed的检查项\"><a href=\"#PageSpeed的检查项\" class=\"headerlink\" title=\"PageSpeed的检查项\"></a>PageSpeed的检查项</h2><h2 id=\"Waterfall\"><a href=\"#Waterfall\" class=\"headerlink\" title=\"Waterfall\"></a>Waterfall</h2><h2 id=\"Timings\"><a href=\"#Timings\" class=\"headerlink\" title=\"Timings\"></a>Timings</h2><h2 id=\"vedio\"><a href=\"#vedio\" class=\"headerlink\" title=\"vedio\"></a>vedio</h2><h2 id=\"Histroy\"><a href=\"#Histroy\" class=\"headerlink\" title=\"Histroy\"></a>Histroy</h2></script></p></the>"},{"title":"Hexo搭建githubpage博客","date":"2017-02-20T02:01:00.000Z","_content":"<Excerpt in index | 首页摘要>\n这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<!-- more -->\n<The rest of contents | 余下全文>\n## 系统环境配置\n要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！\n\n### 安装Node.js\n下载:[Node.js](https://nodejs.org/en/)\n参考地址：[安装Node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n### 安装Git\n下载地址：[git](http://git-scm.com/download/)\n\n### 安装hexo\n\n``` bash\n$ cd d:/hexo\n```\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n``` bash\n$ hexo init blog\n```\n\n``` bash\n$ cd blog\n```\n\n``` bash\n$ npm install\n```\n\n``` bash\n$ hexo s -g #生成预览\n```\n\n$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n$ hexo s == hexo server 启动本地web服务，用于博客的预览\n$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）\n\n现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。\n![logo](hexo git/1.jpeg)\n\n\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)\nhexo-cli: 1.0.2\nos: Windows_NT 6.1.7601 win32 x64\nhttp_parser: 2.7.0\nnode: 7.5.0\nv8: 5.4.500.48\nuv: 1.10.2\nzlib: 1.2.8\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n\n\n## Hexo主题设置\n这里以主题yilia为例进行说明。\n\n### 安装主题 (在blog目录下)\n``` bash\n$ hexo clean\n```\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n### 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。\n\n### 更新主题\n``` bash\n$ cd themes/yilia\n```\n``` bash\n$ git pull\n```\n``` bash\n$ hexo s -g\n```\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n![logo](hexo git/1.jpeg)\n\n\n## Github Pages设置\n\n### 什么是Github Pages\n\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。\n\n在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://smallwenzi.github.io/ 访问了。\n\n参考：[配置SSH keys](http://www.jianshu.com/p/05289a4bc8b2)\n\n## 部署Hexo到Github Pages\n\n这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://smallwenzi.github.io/访问了。\n首先需要明白所谓部署到github的原理。\n1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://smallwenzi.github.io来直接访问。\n2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。\n3需要将hexo生成的静态网站，提交(git commit)到github上。\n明白了原理，怎么做自然就清晰了。\n\n### 使用hexo deploy部署\nhexo deploy可以部署到很多平台，具体可以参考这个[链接](https://hexo.io/docs/deployment.html). 如果部署到github，需要在配置文件_config.xml中作如下修改：\ndeploy:\n  type: git\n  repo: git@github.com:smallwenzi/smallwenzi.github.io.git\n  branch: master\n  \n ![logo](hexo git/2.png)\n然后在命令行中执行 (在blog目录下)\n``` bash\n$ npm install hexo-deployer-git --save\n```\n``` bash\n$ hexo d -g\n```\n即可完成部署。现在打开https://smallwenzi.github.io/ ，\n\n简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。\n\n\n### Hexo 主题配置\n\n每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。\n以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：\n[参考](https://github.com/litten/hexo-theme-yilia).\n\n\n## Hexo 使用本地图片\n首先确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n假设在\n\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n\n![logo](hexo git/3.png)\n\n## Hexo 后台管理配置\n在blog 跟目录下\n``` bash\n$ npm install --save hexo-admin \n```\n``` bash\n$ hexo server -d\n```\n如下图：\n![logo](hexo git/4.png)\n[参考](https://github.com/jaredly/hexo-admin)\n","source":"_posts/hexo git.md","raw":"title: Hexo搭建githubpage博客\ntags:\n  - hexo\n  - githubpage\n  - hexo-admin\ncategories: hexo\ndate: 2017-02-20 10:01:00\n---\n<Excerpt in index | 首页摘要>\n这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<!-- more -->\n<The rest of contents | 余下全文>\n## 系统环境配置\n要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！\n\n### 安装Node.js\n下载:[Node.js](https://nodejs.org/en/)\n参考地址：[安装Node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n### 安装Git\n下载地址：[git](http://git-scm.com/download/)\n\n### 安装hexo\n\n``` bash\n$ cd d:/hexo\n```\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n``` bash\n$ hexo init blog\n```\n\n``` bash\n$ cd blog\n```\n\n``` bash\n$ npm install\n```\n\n``` bash\n$ hexo s -g #生成预览\n```\n\n$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n$ hexo s == hexo server 启动本地web服务，用于博客的预览\n$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）\n\n现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。\n![logo](hexo git/1.jpeg)\n\n\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)\nhexo-cli: 1.0.2\nos: Windows_NT 6.1.7601 win32 x64\nhttp_parser: 2.7.0\nnode: 7.5.0\nv8: 5.4.500.48\nuv: 1.10.2\nzlib: 1.2.8\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n\n\n## Hexo主题设置\n这里以主题yilia为例进行说明。\n\n### 安装主题 (在blog目录下)\n``` bash\n$ hexo clean\n```\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n### 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。\n\n### 更新主题\n``` bash\n$ cd themes/yilia\n```\n``` bash\n$ git pull\n```\n``` bash\n$ hexo s -g\n```\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n![logo](hexo git/1.jpeg)\n\n\n## Github Pages设置\n\n### 什么是Github Pages\n\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。\n\n在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://smallwenzi.github.io/ 访问了。\n\n参考：[配置SSH keys](http://www.jianshu.com/p/05289a4bc8b2)\n\n## 部署Hexo到Github Pages\n\n这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://smallwenzi.github.io/访问了。\n首先需要明白所谓部署到github的原理。\n1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://smallwenzi.github.io来直接访问。\n2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。\n3需要将hexo生成的静态网站，提交(git commit)到github上。\n明白了原理，怎么做自然就清晰了。\n\n### 使用hexo deploy部署\nhexo deploy可以部署到很多平台，具体可以参考这个[链接](https://hexo.io/docs/deployment.html). 如果部署到github，需要在配置文件_config.xml中作如下修改：\ndeploy:\n  type: git\n  repo: git@github.com:smallwenzi/smallwenzi.github.io.git\n  branch: master\n  \n ![logo](hexo git/2.png)\n然后在命令行中执行 (在blog目录下)\n``` bash\n$ npm install hexo-deployer-git --save\n```\n``` bash\n$ hexo d -g\n```\n即可完成部署。现在打开https://smallwenzi.github.io/ ，\n\n简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。\n\n\n### Hexo 主题配置\n\n每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。\n以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：\n[参考](https://github.com/litten/hexo-theme-yilia).\n\n\n## Hexo 使用本地图片\n首先确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n假设在\n\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n\n![logo](hexo git/3.png)\n\n## Hexo 后台管理配置\n在blog 跟目录下\n``` bash\n$ npm install --save hexo-admin \n```\n``` bash\n$ hexo server -d\n```\n如下图：\n![logo](hexo git/4.png)\n[参考](https://github.com/jaredly/hexo-admin)\n","slug":"hexo git","published":1,"updated":"2017-02-21T10:35:19.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzi4000exwjlog7hp0kh","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h2 id=\"系统环境配置\"><a href=\"#系统环境配置\" class=\"headerlink\" title=\"系统环境配置\"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>下载:<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>参考地址：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Node.js</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>下载地址：<a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">git</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> d:/hexo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g <span class=\"comment\">#生成预览</span></span><br></pre></td></tr></table></figure>\n<p>$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo s == hexo server 启动本地web服务，用于博客的预览<br>$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）</p>\n<p>现在我们打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br>hexo-cli: 1.0.2<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 2.7.0<br>node: 7.5.0<br>v8: 5.4.500.48<br>uv: 1.10.2<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>modules: 51<br>openssl: 1.0.2k<br>icu: 58.2<br>unicode: 9.0<br>cldr: 30.0.3<br>tz: 2016j</p>\n<h2 id=\"Hexo主题设置\"><a href=\"#Hexo主题设置\" class=\"headerlink\" title=\"Hexo主题设置\"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p>\n<h3 id=\"安装主题-在blog目录下\"><a href=\"#安装主题-在blog目录下\" class=\"headerlink\" title=\"安装主题 (在blog目录下)\"></a>安装主题 (在blog目录下)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/yilia</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g</span><br></pre></td></tr></table></figure>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<h2 id=\"Github-Pages设置\"><a href=\"#Github-Pages设置\" class=\"headerlink\" title=\"Github Pages设置\"></a>Github Pages设置</h2><h3 id=\"什么是Github-Pages\"><a href=\"#什么是Github-Pages\" class=\"headerlink\" title=\"什么是Github Pages\"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。<br>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p>\n<p>在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href=\"http://smallwenzi.github.io/\">http://smallwenzi.github.io/</a> 访问了。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">配置SSH keys</a></p>\n<h2 id=\"部署Hexo到Github-Pages\"><a href=\"#部署Hexo到Github-Pages\" class=\"headerlink\" title=\"部署Hexo到Github Pages\"></a>部署Hexo到Github Pages</h2><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href=\"http://smallwenzi.github.io/访问了。\">http://smallwenzi.github.io/访问了。</a><br>首先需要明白所谓部署到github的原理。<br>1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href=\"http://smallwenzi.github.io来直接访问。\" target=\"_blank\" rel=\"noopener\">http://smallwenzi.github.io来直接访问。</a><br>2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p>\n<h3 id=\"使用hexo-deploy部署\"><a href=\"#使用hexo-deploy部署\" class=\"headerlink\" title=\"使用hexo deploy部署\"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br>deploy:<br>  type: git<br>  repo: git@github.com:smallwenzi/smallwenzi.github.io.git<br>  branch: master</p>\n<p> <img src=\"/2017/02/20/hexo git/2.png\" alt=\"logo\"><br>然后在命令行中执行 (在blog目录下)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<p>即可完成部署。现在打开<a href=\"https://smallwenzi.github.io/\">https://smallwenzi.github.io/</a> ，</p>\n<p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。</p>\n<h3 id=\"Hexo-主题配置\"><a href=\"#Hexo-主题配置\" class=\"headerlink\" title=\"Hexo 主题配置\"></a>Hexo 主题配置</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：<br><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">参考</a>.</p>\n<h2 id=\"Hexo-使用本地图片\"><a href=\"#Hexo-使用本地图片\" class=\"headerlink\" title=\"Hexo 使用本地图片\"></a>Hexo 使用本地图片</h2><p>首先确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>假设在</p>\n<p>MacGesture2-Publish<br>├── apppicker.jpg<br>├── logo.jpg<br>└── rules.jpg<br>MacGesture2-Publish.md</p>\n<p><img src=\"/2017/02/20/hexo git/3.png\" alt=\"logo\"></p>\n<h2 id=\"Hexo-后台管理配置\"><a href=\"#Hexo-后台管理配置\" class=\"headerlink\" title=\"Hexo 后台管理配置\"></a>Hexo 后台管理配置</h2><p>在blog 跟目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"_\">-d</span></span><br></pre></td></tr></table></figure>\n<p>如下图：<br><img src=\"/2017/02/20/hexo git/4.png\" alt=\"logo\"><br><a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程</excerpt></p>","more":"<p></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h2 id=\"系统环境配置\"><a href=\"#系统环境配置\" class=\"headerlink\" title=\"系统环境配置\"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>下载:<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>参考地址：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">安装Node.js</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>下载地址：<a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">git</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> d:/hexo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g <span class=\"comment\">#生成预览</span></span><br></pre></td></tr></table></figure>\n<p>$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo s == hexo server 启动本地web服务，用于博客的预览<br>$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）</p>\n<p>现在我们打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br>hexo-cli: 1.0.2<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 2.7.0<br>node: 7.5.0<br>v8: 5.4.500.48<br>uv: 1.10.2<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>modules: 51<br>openssl: 1.0.2k<br>icu: 58.2<br>unicode: 9.0<br>cldr: 30.0.3<br>tz: 2016j</p>\n<h2 id=\"Hexo主题设置\"><a href=\"#Hexo主题设置\" class=\"headerlink\" title=\"Hexo主题设置\"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p>\n<h3 id=\"安装主题-在blog目录下\"><a href=\"#安装主题-在blog目录下\" class=\"headerlink\" title=\"安装主题 (在blog目录下)\"></a>安装主题 (在blog目录下)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/yilia</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g</span><br></pre></td></tr></table></figure>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<h2 id=\"Github-Pages设置\"><a href=\"#Github-Pages设置\" class=\"headerlink\" title=\"Github Pages设置\"></a>Github Pages设置</h2><h3 id=\"什么是Github-Pages\"><a href=\"#什么是Github-Pages\" class=\"headerlink\" title=\"什么是Github Pages\"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。<br>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p>\n<p>在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href=\"http://smallwenzi.github.io/\">http://smallwenzi.github.io/</a> 访问了。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">配置SSH keys</a></p>\n<h2 id=\"部署Hexo到Github-Pages\"><a href=\"#部署Hexo到Github-Pages\" class=\"headerlink\" title=\"部署Hexo到Github Pages\"></a>部署Hexo到Github Pages</h2><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href=\"http://smallwenzi.github.io/访问了。\">http://smallwenzi.github.io/访问了。</a><br>首先需要明白所谓部署到github的原理。<br>1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href=\"http://smallwenzi.github.io来直接访问。\" target=\"_blank\" rel=\"noopener\">http://smallwenzi.github.io来直接访问。</a><br>2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p>\n<h3 id=\"使用hexo-deploy部署\"><a href=\"#使用hexo-deploy部署\" class=\"headerlink\" title=\"使用hexo deploy部署\"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br>deploy:<br>  type: git<br>  repo: git@github.com:smallwenzi/smallwenzi.github.io.git<br>  branch: master</p>\n<p> <img src=\"/2017/02/20/hexo git/2.png\" alt=\"logo\"><br>然后在命令行中执行 (在blog目录下)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<p>即可完成部署。现在打开<a href=\"https://smallwenzi.github.io/\">https://smallwenzi.github.io/</a> ，</p>\n<p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。</p>\n<h3 id=\"Hexo-主题配置\"><a href=\"#Hexo-主题配置\" class=\"headerlink\" title=\"Hexo 主题配置\"></a>Hexo 主题配置</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：<br><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">参考</a>.</p>\n<h2 id=\"Hexo-使用本地图片\"><a href=\"#Hexo-使用本地图片\" class=\"headerlink\" title=\"Hexo 使用本地图片\"></a>Hexo 使用本地图片</h2><p>首先确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>假设在</p>\n<p>MacGesture2-Publish<br>├── apppicker.jpg<br>├── logo.jpg<br>└── rules.jpg<br>MacGesture2-Publish.md</p>\n<p><img src=\"/2017/02/20/hexo git/3.png\" alt=\"logo\"></p>\n<h2 id=\"Hexo-后台管理配置\"><a href=\"#Hexo-后台管理配置\" class=\"headerlink\" title=\"Hexo 后台管理配置\"></a>Hexo 后台管理配置</h2><p>在blog 跟目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"_\">-d</span></span><br></pre></td></tr></table></figure>\n<p>如下图：<br><img src=\"/2017/02/20/hexo git/4.png\" alt=\"logo\"><br><a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">参考</a></p>"},{"title":"java 单例模式","author":"wen","date":"2017-02-20T02:01:00.000Z","_content":"<Excerpt in index | 首页摘要>\n在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<!-- more -->\n<The rest of contents | 余下全文>\n# 什么是单例模式\n在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。\n从概念中体现出了单例的一些特点：\n\n> （1）、在任何情况下，单例类永远只有一个实例存在\n> （2）、单例需要有能力为整个系统提供这一唯一实例  \n\n为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：\n在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。\n\n正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。\n\n## 1、饿汉式单例\n饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = new MySingleton();\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n以上代码运行结果：\n```\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n```\n从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了\n\n## 2、懒汉式单例\n懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：\n```\npackage org.mlinge.s02;  \n  \npublic class MySingleton {  \n      \n    private static MySingleton instance = null;  \n      \n    private MySingleton(){}  \n      \n    public static MySingleton getInstance() {  \n        try {   \n            if(instance != null){//懒汉式   \n                  \n            }else{  \n                //创建实例之前可能会有一些准备性的耗时工作   \n                Thread.sleep(300);  \n                instance = new MySingleton();  \n            }  \n        } catch (InterruptedException e) {   \n            e.printStackTrace();  \n        }  \n        return instance;  \n    }  \n}  \n```\n这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用\n```\npackage wen.design.singleton.s02;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n5807702\n213274\n```\n## 3、线程安全的懒汉式单例\n要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。\n* （1）方法中声明synchronized关键字\n出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public synchronized static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                instance = new MySingleton();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n\n此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：\n\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n\n从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：\n\n* （2）、 同步代码块实现\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    //public synchronized static MySingleton getInstance() {\n    public static MySingleton getInstance() {\n        try {\n            synchronized (MySingleton.class) {\n                if(instance != null){//懒汉式\n\n                }else{\n                    //创建实例之前可能会有一些准备性的耗时工作\n                    Thread.sleep(300);\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。\n* （3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：\n\n```\npackage wen.design.singleton.s04;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n20358204\n5807702\n```\n\n从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。\n\n* （4）、 Double Check Locking 双检查锁机制（推荐）\n为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：\n\n```\npackage wen.design.singleton.s05;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //使用volatile关键字保其可见性\n    volatile private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    if(instance == null){//二次检查\n                        instance = new MySingleton();\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n从运行结果来看，该中方法保证了多线程并发下的线程安全性。\n这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。\n\n## 4、使用静态内置类实现单例模式\nDCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：\n\n```\npackage wen.design.singleton.s06;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n\n以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：\n\n```\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n```\n从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。\n\n## 5、序列化与反序列化的单例模式实现\n静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。\n代码实现如下：\n\n```\npackage wen.design.singleton.s07;\n\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉\n    protected Object readResolve() throws ObjectStreamException {\n        System.out.println(\"调用了readResolve方法！\");\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n序列化与反序列化测试代码：\n```\npackage wen.design.singleton.s07;\n\nimport java.io.*;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class SaveAndReadForSingleton {\n    public static void main(String[] args) {\n        MySingleton singleton = MySingleton.getInstance();\n\n        File file = new File(\"MySingleton.txt\");\n\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(singleton);\n            fos.close();\n            oos.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            FileInputStream fis = new FileInputStream(file);\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            MySingleton rSingleton = (MySingleton) ois.readObject();\n            fis.close();\n            ois.close();\n            System.out.println(rSingleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n运行上面的测试代码，得到的结果如下：\n```\n19235919\n调用了readResolve方法！\n19235919\n\n```\n从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证\n\n\n## 6、使用static代码块实现单例\n静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton{\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    static{\n        instance = new MySingleton();\n    }\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n\n测试代码如下：\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(MySingleton.getInstance().hashCode());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[3];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n```\n\n## 7、使用枚举数据类型实现单例模式\n\n枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/22.\n */\n\npublic enum EnumFactory{\n\n    singletonFactory;\n\n    private MySingleton instance;\n\n    private EnumFactory(){//枚举类的构造方法在类加载是被实例化\n        instance = new MySingleton();\n    }\n\n    public MySingleton getInstance(){\n        return instance;\n    }\n\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n\n```\n\n测试代码\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n```\n运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。\n## 8、完善使用enum枚举实现单例模式\n不暴露枚举类实现细节的封装代码如下：\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class ClassFactory{\n\n    private enum MyEnumSingleton{\n        singletonFactory;\n\n        private MySingleton instance;\n\n        private MyEnumSingleton(){//枚举类的构造方法在类加载是被实例化\n            instance = new MySingleton();\n        }\n\n        public MySingleton getInstance(){\n            return instance;\n        }\n    }\n\n    public static MySingleton getInstance(){\n        return MyEnumSingleton.singletonFactory.getInstance();\n    }\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n```\n测试代码\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(ClassFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n运行结果\n```\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n```\n验证结果表明，完善后的单例实现更为合理。\n以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！\n\n","source":"_posts/Singleton.md","raw":"title: java 单例模式\ntags:\n  - java\n  - 单例模式\n  - 设计模式\n  - 线程\ncategories:\n  - java\n  - 设计模式\nauthor: wen\ndate: 2017-02-20 10:01:00\n---\n<Excerpt in index | 首页摘要>\n在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<!-- more -->\n<The rest of contents | 余下全文>\n# 什么是单例模式\n在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。\n从概念中体现出了单例的一些特点：\n\n> （1）、在任何情况下，单例类永远只有一个实例存在\n> （2）、单例需要有能力为整个系统提供这一唯一实例  \n\n为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：\n在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。\n\n正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。\n\n## 1、饿汉式单例\n饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = new MySingleton();\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n以上代码运行结果：\n```\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n```\n从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了\n\n## 2、懒汉式单例\n懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：\n```\npackage org.mlinge.s02;  \n  \npublic class MySingleton {  \n      \n    private static MySingleton instance = null;  \n      \n    private MySingleton(){}  \n      \n    public static MySingleton getInstance() {  \n        try {   \n            if(instance != null){//懒汉式   \n                  \n            }else{  \n                //创建实例之前可能会有一些准备性的耗时工作   \n                Thread.sleep(300);  \n                instance = new MySingleton();  \n            }  \n        } catch (InterruptedException e) {   \n            e.printStackTrace();  \n        }  \n        return instance;  \n    }  \n}  \n```\n这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用\n```\npackage wen.design.singleton.s02;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n5807702\n213274\n```\n## 3、线程安全的懒汉式单例\n要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。\n* （1）方法中声明synchronized关键字\n出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public synchronized static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                instance = new MySingleton();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n\n此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：\n\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n\n从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：\n\n* （2）、 同步代码块实现\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    //public synchronized static MySingleton getInstance() {\n    public static MySingleton getInstance() {\n        try {\n            synchronized (MySingleton.class) {\n                if(instance != null){//懒汉式\n\n                }else{\n                    //创建实例之前可能会有一些准备性的耗时工作\n                    Thread.sleep(300);\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。\n* （3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：\n\n```\npackage wen.design.singleton.s04;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n20358204\n5807702\n```\n\n从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。\n\n* （4）、 Double Check Locking 双检查锁机制（推荐）\n为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：\n\n```\npackage wen.design.singleton.s05;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //使用volatile关键字保其可见性\n    volatile private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    if(instance == null){//二次检查\n                        instance = new MySingleton();\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n从运行结果来看，该中方法保证了多线程并发下的线程安全性。\n这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。\n\n## 4、使用静态内置类实现单例模式\nDCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：\n\n```\npackage wen.design.singleton.s06;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n\n以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：\n\n```\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n```\n从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。\n\n## 5、序列化与反序列化的单例模式实现\n静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。\n代码实现如下：\n\n```\npackage wen.design.singleton.s07;\n\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉\n    protected Object readResolve() throws ObjectStreamException {\n        System.out.println(\"调用了readResolve方法！\");\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n序列化与反序列化测试代码：\n```\npackage wen.design.singleton.s07;\n\nimport java.io.*;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class SaveAndReadForSingleton {\n    public static void main(String[] args) {\n        MySingleton singleton = MySingleton.getInstance();\n\n        File file = new File(\"MySingleton.txt\");\n\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(singleton);\n            fos.close();\n            oos.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            FileInputStream fis = new FileInputStream(file);\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            MySingleton rSingleton = (MySingleton) ois.readObject();\n            fis.close();\n            ois.close();\n            System.out.println(rSingleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n运行上面的测试代码，得到的结果如下：\n```\n19235919\n调用了readResolve方法！\n19235919\n\n```\n从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证\n\n\n## 6、使用static代码块实现单例\n静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton{\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    static{\n        instance = new MySingleton();\n    }\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n\n测试代码如下：\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(MySingleton.getInstance().hashCode());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[3];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n```\n\n## 7、使用枚举数据类型实现单例模式\n\n枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/22.\n */\n\npublic enum EnumFactory{\n\n    singletonFactory;\n\n    private MySingleton instance;\n\n    private EnumFactory(){//枚举类的构造方法在类加载是被实例化\n        instance = new MySingleton();\n    }\n\n    public MySingleton getInstance(){\n        return instance;\n    }\n\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n\n```\n\n测试代码\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n```\n运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。\n## 8、完善使用enum枚举实现单例模式\n不暴露枚举类实现细节的封装代码如下：\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class ClassFactory{\n\n    private enum MyEnumSingleton{\n        singletonFactory;\n\n        private MySingleton instance;\n\n        private MyEnumSingleton(){//枚举类的构造方法在类加载是被实例化\n            instance = new MySingleton();\n        }\n\n        public MySingleton getInstance(){\n            return instance;\n        }\n    }\n\n    public static MySingleton getInstance(){\n        return MyEnumSingleton.singletonFactory.getInstance();\n    }\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n```\n测试代码\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(ClassFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n运行结果\n```\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n```\n验证结果表明，完善后的单例实现更为合理。\n以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！\n\n","slug":"Singleton","published":1,"updated":"2017-02-23T10:25:30.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzi9000fxwjlbymkzqar","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。<br>从概念中体现出了单例的一些特点：</p>\n<blockquote>\n<p>（1）、在任何情况下，单例类永远只有一个实例存在<br>（2）、单例需要有能力为整个系统提供这一唯一实例  </p>\n</blockquote>\n<p>为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：<br>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>\n<p>正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。</p>\n<h2 id=\"1、饿汉式单例\"><a href=\"#1、饿汉式单例\" class=\"headerlink\" title=\"1、饿汉式单例\"></a>1、饿汉式单例</h2><p>饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s01;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = new MySingleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s01;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了</p>\n<h2 id=\"2、懒汉式单例\"><a href=\"#2、懒汉式单例\" class=\"headerlink\" title=\"2、懒汉式单例\"></a>2、懒汉式单例</h2><p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mlinge.s02;  </span><br><span class=\"line\">  </span><br><span class=\"line\">public class MySingleton &#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    private static MySingleton instance = null;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    private MySingleton()&#123;&#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    public static MySingleton getInstance() &#123;  </span><br><span class=\"line\">        try &#123;   </span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式   </span><br><span class=\"line\">                  </span><br><span class=\"line\">            &#125;else&#123;  </span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作   </span><br><span class=\"line\">                Thread.sleep(300);  </span><br><span class=\"line\">                instance = new MySingleton();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;   </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s02;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">7408068</span><br><span class=\"line\">20469344</span><br><span class=\"line\">28235257</span><br><span class=\"line\">23191477</span><br><span class=\"line\">10884088</span><br><span class=\"line\">23667197</span><br><span class=\"line\">20358204</span><br><span class=\"line\">5807702</span><br><span class=\"line\">213274</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、线程安全的懒汉式单例\"><a href=\"#3、线程安全的懒汉式单例\" class=\"headerlink\" title=\"3、线程安全的懒汉式单例\"></a>3、线程安全的懒汉式单例</h2><p>要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。</p>\n<ul>\n<li>（1）方法中声明synchronized关键字<br>出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s03;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                instance = new MySingleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br></pre></td></tr></table></figure>\n<p>从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：</p>\n<ul>\n<li>（2）、 同步代码块实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s03;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //public synchronized static MySingleton getInstance() &#123;</span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                    Thread.sleep(300);</span><br><span class=\"line\">                    instance = new MySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。</p>\n<ul>\n<li>（3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s04;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                    instance = new MySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">7408068</span><br><span class=\"line\">20469344</span><br><span class=\"line\">28235257</span><br><span class=\"line\">23191477</span><br><span class=\"line\">10884088</span><br><span class=\"line\">23667197</span><br><span class=\"line\">20358204</span><br><span class=\"line\">20358204</span><br><span class=\"line\">5807702</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。</p>\n<ul>\n<li>（4）、 Double Check Locking 双检查锁机制（推荐）<br>为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s05;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用volatile关键字保其可见性</span><br><span class=\"line\">    volatile private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                    if(instance == null)&#123;//二次检查</span><br><span class=\"line\">                        instance = new MySingleton();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果来看，该中方法保证了多线程并发下的线程安全性。<br>这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。</p>\n<h2 id=\"4、使用静态内置类实现单例模式\"><a href=\"#4、使用静态内置类实现单例模式\" class=\"headerlink\" title=\"4、使用静态内置类实现单例模式\"></a>4、使用静态内置类实现单例模式</h2><p>DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s06;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //内部类</span><br><span class=\"line\">    private static class MySingletonHandler&#123;</span><br><span class=\"line\">        private static MySingleton instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br></pre></td></tr></table></figure>\n<p>从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。</p>\n<h2 id=\"5、序列化与反序列化的单例模式实现\"><a href=\"#5、序列化与反序列化的单例模式实现\" class=\"headerlink\" title=\"5、序列化与反序列化的单例模式实现\"></a>5、序列化与反序列化的单例模式实现</h2><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。<br>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s07;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ObjectStreamException;</span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">    //内部类</span><br><span class=\"line\">    private static class MySingletonHandler&#123;</span><br><span class=\"line\">        private static MySingleton instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉</span><br><span class=\"line\">    protected Object readResolve() throws ObjectStreamException &#123;</span><br><span class=\"line\">        System.out.println(&quot;调用了readResolve方法！&quot;);</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化与反序列化测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s07;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SaveAndReadForSingleton &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MySingleton singleton = MySingleton.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = new File(&quot;MySingleton.txt&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</span><br><span class=\"line\">            ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class=\"line\">            oos.writeObject(singleton);</span><br><span class=\"line\">            fos.close();</span><br><span class=\"line\">            oos.close();</span><br><span class=\"line\">            System.out.println(singleton.hashCode());</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileInputStream fis = new FileInputStream(file);</span><br><span class=\"line\">            ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class=\"line\">            MySingleton rSingleton = (MySingleton) ois.readObject();</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            ois.close();</span><br><span class=\"line\">            System.out.println(rSingleton.hashCode());</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行上面的测试代码，得到的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">19235919</span><br><span class=\"line\">调用了readResolve方法！</span><br><span class=\"line\">19235919</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证</p>\n<h2 id=\"6、使用static代码块实现单例\"><a href=\"#6、使用static代码块实现单例\" class=\"headerlink\" title=\"6、使用static代码块实现单例\"></a>6、使用static代码块实现单例</h2><p>静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s08;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s08;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[3];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7、使用枚举数据类型实现单例模式\"><a href=\"#7、使用枚举数据类型实现单例模式\" class=\"headerlink\" title=\"7、使用枚举数据类型实现单例模式\"></a>7、使用枚举数据类型实现单例模式</h2><p>枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s09;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public enum EnumFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    singletonFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化</span><br><span class=\"line\">        instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MySingleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</span><br><span class=\"line\">    public MySingleton()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s09;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br></pre></td></tr></table></figure></p>\n<p>运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。</p>\n<h2 id=\"8、完善使用enum枚举实现单例模式\"><a href=\"#8、完善使用enum枚举实现单例模式\" class=\"headerlink\" title=\"8、完善使用enum枚举实现单例模式\"></a>8、完善使用enum枚举实现单例模式</h2><p>不暴露枚举类实现细节的封装代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s10;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private enum MyEnumSingleton&#123;</span><br><span class=\"line\">        singletonFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        private MySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">        private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化</span><br><span class=\"line\">            instance = new MySingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MySingleton getInstance()&#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance()&#123;</span><br><span class=\"line\">        return MyEnumSingleton.singletonFactory.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</span><br><span class=\"line\">    public MySingleton()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s10;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(ClassFactory.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br></pre></td></tr></table></figure></p>\n<p>验证结果表明，完善后的单例实现更为合理。<br>以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！</p>\n","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧</excerpt></p>","more":"<p></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。<br>从概念中体现出了单例的一些特点：</p>\n<blockquote>\n<p>（1）、在任何情况下，单例类永远只有一个实例存在<br>（2）、单例需要有能力为整个系统提供这一唯一实例  </p>\n</blockquote>\n<p>为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：<br>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>\n<p>正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。</p>\n<h2 id=\"1、饿汉式单例\"><a href=\"#1、饿汉式单例\" class=\"headerlink\" title=\"1、饿汉式单例\"></a>1、饿汉式单例</h2><p>饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s01;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = new MySingleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s01;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br><span class=\"line\">15779934</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了</p>\n<h2 id=\"2、懒汉式单例\"><a href=\"#2、懒汉式单例\" class=\"headerlink\" title=\"2、懒汉式单例\"></a>2、懒汉式单例</h2><p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mlinge.s02;  </span><br><span class=\"line\">  </span><br><span class=\"line\">public class MySingleton &#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    private static MySingleton instance = null;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    private MySingleton()&#123;&#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    public static MySingleton getInstance() &#123;  </span><br><span class=\"line\">        try &#123;   </span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式   </span><br><span class=\"line\">                  </span><br><span class=\"line\">            &#125;else&#123;  </span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作   </span><br><span class=\"line\">                Thread.sleep(300);  </span><br><span class=\"line\">                instance = new MySingleton();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;   </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s02;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">7408068</span><br><span class=\"line\">20469344</span><br><span class=\"line\">28235257</span><br><span class=\"line\">23191477</span><br><span class=\"line\">10884088</span><br><span class=\"line\">23667197</span><br><span class=\"line\">20358204</span><br><span class=\"line\">5807702</span><br><span class=\"line\">213274</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、线程安全的懒汉式单例\"><a href=\"#3、线程安全的懒汉式单例\" class=\"headerlink\" title=\"3、线程安全的懒汉式单例\"></a>3、线程安全的懒汉式单例</h2><p>要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。</p>\n<ul>\n<li>（1）方法中声明synchronized关键字<br>出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s03;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                instance = new MySingleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br></pre></td></tr></table></figure>\n<p>从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：</p>\n<ul>\n<li>（2）、 同步代码块实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s03;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //public synchronized static MySingleton getInstance() &#123;</span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                    Thread.sleep(300);</span><br><span class=\"line\">                    instance = new MySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。</p>\n<ul>\n<li>（3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s04;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                    instance = new MySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">7408068</span><br><span class=\"line\">20469344</span><br><span class=\"line\">28235257</span><br><span class=\"line\">23191477</span><br><span class=\"line\">10884088</span><br><span class=\"line\">23667197</span><br><span class=\"line\">20358204</span><br><span class=\"line\">20358204</span><br><span class=\"line\">5807702</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。</p>\n<ul>\n<li>（4）、 Double Check Locking 双检查锁机制（推荐）<br>为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s05;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用volatile关键字保其可见性</span><br><span class=\"line\">    volatile private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(instance != null)&#123;//懒汉式</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</span><br><span class=\"line\">                Thread.sleep(300);</span><br><span class=\"line\">                synchronized (MySingleton.class) &#123;</span><br><span class=\"line\">                    if(instance == null)&#123;//二次检查</span><br><span class=\"line\">                        instance = new MySingleton();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br><span class=\"line\">30863650</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果来看，该中方法保证了多线程并发下的线程安全性。<br>这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。</p>\n<h2 id=\"4、使用静态内置类实现单例模式\"><a href=\"#4、使用静态内置类实现单例模式\" class=\"headerlink\" title=\"4、使用静态内置类实现单例模式\"></a>4、使用静态内置类实现单例模式</h2><p>DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s06;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //内部类</span><br><span class=\"line\">    private static class MySingletonHandler&#123;</span><br><span class=\"line\">        private static MySingleton instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br><span class=\"line\">1696092</span><br></pre></td></tr></table></figure>\n<p>从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。</p>\n<h2 id=\"5、序列化与反序列化的单例模式实现\"><a href=\"#5、序列化与反序列化的单例模式实现\" class=\"headerlink\" title=\"5、序列化与反序列化的单例模式实现\"></a>5、序列化与反序列化的单例模式实现</h2><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。<br>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s07;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ObjectStreamException;</span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">    //内部类</span><br><span class=\"line\">    private static class MySingletonHandler&#123;</span><br><span class=\"line\">        private static MySingleton instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉</span><br><span class=\"line\">    protected Object readResolve() throws ObjectStreamException &#123;</span><br><span class=\"line\">        System.out.println(&quot;调用了readResolve方法！&quot;);</span><br><span class=\"line\">        return MySingletonHandler.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化与反序列化测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s07;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SaveAndReadForSingleton &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MySingleton singleton = MySingleton.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = new File(&quot;MySingleton.txt&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</span><br><span class=\"line\">            ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class=\"line\">            oos.writeObject(singleton);</span><br><span class=\"line\">            fos.close();</span><br><span class=\"line\">            oos.close();</span><br><span class=\"line\">            System.out.println(singleton.hashCode());</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileInputStream fis = new FileInputStream(file);</span><br><span class=\"line\">            ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class=\"line\">            MySingleton rSingleton = (MySingleton) ois.readObject();</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            ois.close();</span><br><span class=\"line\">            System.out.println(rSingleton.hashCode());</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行上面的测试代码，得到的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">19235919</span><br><span class=\"line\">调用了readResolve方法！</span><br><span class=\"line\">19235919</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证</p>\n<h2 id=\"6、使用static代码块实现单例\"><a href=\"#6、使用static代码块实现单例\" class=\"headerlink\" title=\"6、使用static代码块实现单例\"></a>6、使用static代码块实现单例</h2><p>静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s08;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MySingleton&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static MySingleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s08;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">            System.out.println(MySingleton.getInstance().hashCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[3];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br><span class=\"line\">27979955</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7、使用枚举数据类型实现单例模式\"><a href=\"#7、使用枚举数据类型实现单例模式\" class=\"headerlink\" title=\"7、使用枚举数据类型实现单例模式\"></a>7、使用枚举数据类型实现单例模式</h2><p>枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s09;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/22.</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public enum EnumFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    singletonFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化</span><br><span class=\"line\">        instance = new MySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MySingleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</span><br><span class=\"line\">    public MySingleton()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s09;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br><span class=\"line\">15055830</span><br></pre></td></tr></table></figure></p>\n<p>运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。</p>\n<h2 id=\"8、完善使用enum枚举实现单例模式\"><a href=\"#8、完善使用enum枚举实现单例模式\" class=\"headerlink\" title=\"8、完善使用enum枚举实现单例模式\"></a>8、完善使用enum枚举实现单例模式</h2><p>不暴露枚举类实现细节的封装代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s10;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private enum MyEnumSingleton&#123;</span><br><span class=\"line\">        singletonFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        private MySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">        private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化</span><br><span class=\"line\">            instance = new MySingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public MySingleton getInstance()&#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static MySingleton getInstance()&#123;</span><br><span class=\"line\">        return MyEnumSingleton.singletonFactory.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</span><br><span class=\"line\">    public MySingleton()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package wen.design.singleton.s10;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by dell on 2017/2/23.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyThread extends Thread&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(ClassFactory.getInstance().hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread[] mts = new MyThread[10];</span><br><span class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</span><br><span class=\"line\">            mts[i] = new MyThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</span><br><span class=\"line\">            mts[j].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br><span class=\"line\">25039388</span><br></pre></td></tr></table></figure></p>\n<p>验证结果表明，完善后的单例实现更为合理。<br>以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！</p>"},{"title":"solr教程","author":"wen","date":"2018-10-13T05:50:00.000Z","_content":"# 1.为什么选择Apache Solr\nApache Solr是一个功能强大的搜索服务器，它支持REST风格API。Solr是基于Lucene的，Lucene 支持强大的匹配能力，如短语，通配符，连接，分组和更多不同的数据类型。它使用 Apache Zookeeper特别针对高流量进行优化。Apache Solr提供各式各样的功能，我们列出了部分最主要的功能。\n\n* 先进的全文搜索功能。\n* XML，JSON和HTTP - 基于开放接口标准。\n* 高度可扩展和容错。\n* 同时支持模式和无模式配置。\n* 分页搜索和过滤。\n* 支持像英语，德语，中国，日本，法国和许多主要语言\n* 丰富的文档分析。\n\n# 安装solr\n要首先让从以下位置下载最新版本的Apache Solr：\nhttp://lucene.apache.org/solr/downloads.html\n在撰写本文时，可用的稳定版本是7.4.0。\n一旦Solr的zip文件下载将它解压缩到一个文件夹。提取的文件夹看起来像下面。\n![logo](lr教程/1.png)\nSolr的文件夹\n\n\nbin文件夹中包含用来启动和停止服务器的脚本。example 文件夹包含几个示例文件。我们将使用其中的一种，以说明Solr如何索引数据。server 文件夹包含logs 文件夹，所有的Solr的日志都写入该文件夹。这将有助于索引过程来检查任何错误日志。在sever文件夹下的Solr文件夹包含不同的集合或核心（core/collection）。对于各集合或核心的配置和数据都存储在相应的集合或核心文件夹。\nApache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。\n我们可以使用命令行脚本启动服务器。让我们去solr的bin目录，从命令提示符输入出以下命令\n````\nsolr start\n````\n这将启动下的默认端口8983 Solr的服务器。\n\n现在，我们可以在浏览器中打开以下网址和验证，我们的Solr的实例正在运行。solr的管理工具的细节超出了示例的范围。\n\nhttp://localhost:8983/Solr/\n![logo](lr教程/2.png)\n\n# 配置Apache Solr\n在本节中，我们将告诉你如何配置的核心/集合作为Solr实例，以及如何定义的字段。Apache Solr附带称为无模式模式的选项。这个选项允许用户构建有效的架构，而无需手动编辑模式文件。但是，在这个例子中，我们将使用架构配置理解Solr的内部。\n\n## 建立核心（core）\n当Solr的服务器在独立模式下启动的配置称为核心，当它在SolrCloud模式启动的配置称为集合。在这个例子中，我们将有关独立服务器和核心讨论。我们将在以后再讨论SolrCloud。首先，我们需要创建一个核心的索引数据。Solr的创建命令有以下选项：\n\n-c <name> -要创建的核心或集合的名称（必需）。\n-d <confdir> -配置目录，在SolrCloud模式非常有用。\n-n <configName> -配置名称。这将默认为核心或集合的名称。\n-p <port> -本地Solr的实例的端口发送create命令; 默认脚本试图通过寻找运行Solr的实例来检测端口。\n-s <shards> -Number of shards to split a collection into, default is 1.\n-rf <replicas> -集合中的每个文件的份数。默认值是1。\n在这个例子中，我们将使用的核心名称和配置目录-d参数-c参数。对于所有其它参数我们使用默认设置。\n\n现在在命令窗口浏览 solr-7.4.0\\bin文件夹，并发出以下命令。\n```\nsolr create -c jcg\n```\n我们可以看到在命令窗口中下面的输出。\n```\nCreating new core 'jcg' using command:\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=jcg&instanceDir=jcg\n {\n \"responseHeader\":{\n \"status\":0,\n \"QTime\":663},\n \"core\":\"jcg\"}\n ``` \n现在我们导航到以下网址，我们可以看到JCG核心被填充在核心选择器上。还可以看到核心的统计信息。\nhttp://localhost:8983/Solr\n![logo](lr教程/3.png)\n\n## 修改Schema.xml文件\n我们需要修改schema.xml中文件的文件夹下，server\\solr\\jcg\\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-7.4.0\\example\\exampledocs\n\n现在，我们定位到该文件夹  server\\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。\n现在编辑\\server\\solr\\jcg\\conf\\server\\solr\\jcg\\conf\\schema.xml文件，设置唯一元素后添加以下内容。\n我们已经设置了属性索引为true。这指定字段用于索引和记录可以使用索引进行检索。该值设置为false将只存储领域，但不能进行查询。\n另外请注意另一个属性stored并将其设置为true。这指定字段被存储，并且可以在输出被返回。将此字段设置为假将使字段唯一索引，并且不能在输出进行检索。\n我们已经分配给存在于此处的“books.csv”文件中的字段的类型。在CSV文件“ID”第一场由索引Schema.xml文件的唯一键自动元素的照顾。如果你注意，我们已经略过字段series_t，sequence_i和genre_s未做任何条目。但是，当我们执行索引时，所有这些字段都被索引且没有任何问题。如果你想知道这种情况需要在Schema.xml文件的dynamicField部分一探究竟。\n[schema.xml](schema.xml)\n\n既然我们已经修改了配置，我们必须停止和启动服务器。要做到这一点，我们需要通过命令行发出从bin目录下面的命令。\n```\nSolr  stop -all\n```\n服务器将停止现在。现在启动服务器问题从bin目录中通过命令行运行以下命令。\n```\nSolr start\n```\n# 导入数据\nApache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\\exampledocs可看到。\n现在，我们在命令行定位到example\\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。\n![logo](lr教程/4.png)\n正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-7.4.0\\example\\exampledocs在命令提示符并发出以下命令。\n![logo](lr教程/5.png)\n现在我们导航到以下网址并选择核心JCG。\nhttp://localhost:8983/solr\n![logo](lr教程/6.png)\nSolr的JCG核心数据\n就拿在统计部分仔细一看，该民文档参数将显示索引的行数。\n# 访问索引的文档\nApache Solr提供了一种基于REST API来访问的数据，并还提供了不同的参数，以检索数据。我们将向您展示一些基于场景的查询。\n## 按名称搜索\n我们将用它的名字检索书的细节。要做到这一点，我们将使用下面的语法。URL中的参数“Q”是查询事件。\n打开浏览器下列URL。\nhttp://localhost:8983/solr/jcg/select?q=name:\"A Clash of Kings\"\n输出将在下面，如图所示。\n![logo](lr教程/7.png)\n## 首字母搜索\n现在我们将告诉你如何搜索记录，如果我们只知道起始字母或单词，不记得完整的标题。我们可以用下面的查询检索结果。\nhttp://localhost:8983/solr/jcg/select?q=name:\"A\"\n输出将列出所有的书籍字母A盯着\n![logo](lr教程/8.png)\n\n## 搜索使用通配符\nSolr的支持通配符搜索。我们将下面的展示如何检索所有书名包含“of”的书。\nhttp://localhost:8983/solr/jcg/select?q=name:\"*of\"\n![logo](lr教程/9.png)\n\n## 搜索使用的条件\nSolr的支持条件的搜索。我们可以设置条件，我们的查询提供了“FQ”参数。在下面我们将告诉你如何查询价格低于￥6的书。\nhttp://localhost:8983/solr/jcg/select?q=*&fq=price:[0 TO 6]\n输出将只列出这是低于$ 6的书籍。\n![logo](lr教程/10.png)","source":"_posts/lr教程.md","raw":"title: solr教程\nauthor: wen\ntags:\n  - solr\ncategories:\n  - solr\ndate: 2018-10-13 13:50:00\n---\n# 1.为什么选择Apache Solr\nApache Solr是一个功能强大的搜索服务器，它支持REST风格API。Solr是基于Lucene的，Lucene 支持强大的匹配能力，如短语，通配符，连接，分组和更多不同的数据类型。它使用 Apache Zookeeper特别针对高流量进行优化。Apache Solr提供各式各样的功能，我们列出了部分最主要的功能。\n\n* 先进的全文搜索功能。\n* XML，JSON和HTTP - 基于开放接口标准。\n* 高度可扩展和容错。\n* 同时支持模式和无模式配置。\n* 分页搜索和过滤。\n* 支持像英语，德语，中国，日本，法国和许多主要语言\n* 丰富的文档分析。\n\n# 安装solr\n要首先让从以下位置下载最新版本的Apache Solr：\nhttp://lucene.apache.org/solr/downloads.html\n在撰写本文时，可用的稳定版本是7.4.0。\n一旦Solr的zip文件下载将它解压缩到一个文件夹。提取的文件夹看起来像下面。\n![logo](lr教程/1.png)\nSolr的文件夹\n\n\nbin文件夹中包含用来启动和停止服务器的脚本。example 文件夹包含几个示例文件。我们将使用其中的一种，以说明Solr如何索引数据。server 文件夹包含logs 文件夹，所有的Solr的日志都写入该文件夹。这将有助于索引过程来检查任何错误日志。在sever文件夹下的Solr文件夹包含不同的集合或核心（core/collection）。对于各集合或核心的配置和数据都存储在相应的集合或核心文件夹。\nApache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。\n我们可以使用命令行脚本启动服务器。让我们去solr的bin目录，从命令提示符输入出以下命令\n````\nsolr start\n````\n这将启动下的默认端口8983 Solr的服务器。\n\n现在，我们可以在浏览器中打开以下网址和验证，我们的Solr的实例正在运行。solr的管理工具的细节超出了示例的范围。\n\nhttp://localhost:8983/Solr/\n![logo](lr教程/2.png)\n\n# 配置Apache Solr\n在本节中，我们将告诉你如何配置的核心/集合作为Solr实例，以及如何定义的字段。Apache Solr附带称为无模式模式的选项。这个选项允许用户构建有效的架构，而无需手动编辑模式文件。但是，在这个例子中，我们将使用架构配置理解Solr的内部。\n\n## 建立核心（core）\n当Solr的服务器在独立模式下启动的配置称为核心，当它在SolrCloud模式启动的配置称为集合。在这个例子中，我们将有关独立服务器和核心讨论。我们将在以后再讨论SolrCloud。首先，我们需要创建一个核心的索引数据。Solr的创建命令有以下选项：\n\n-c <name> -要创建的核心或集合的名称（必需）。\n-d <confdir> -配置目录，在SolrCloud模式非常有用。\n-n <configName> -配置名称。这将默认为核心或集合的名称。\n-p <port> -本地Solr的实例的端口发送create命令; 默认脚本试图通过寻找运行Solr的实例来检测端口。\n-s <shards> -Number of shards to split a collection into, default is 1.\n-rf <replicas> -集合中的每个文件的份数。默认值是1。\n在这个例子中，我们将使用的核心名称和配置目录-d参数-c参数。对于所有其它参数我们使用默认设置。\n\n现在在命令窗口浏览 solr-7.4.0\\bin文件夹，并发出以下命令。\n```\nsolr create -c jcg\n```\n我们可以看到在命令窗口中下面的输出。\n```\nCreating new core 'jcg' using command:\nhttp://localhost:8983/solr/admin/cores?action=CREATE&name=jcg&instanceDir=jcg\n {\n \"responseHeader\":{\n \"status\":0,\n \"QTime\":663},\n \"core\":\"jcg\"}\n ``` \n现在我们导航到以下网址，我们可以看到JCG核心被填充在核心选择器上。还可以看到核心的统计信息。\nhttp://localhost:8983/Solr\n![logo](lr教程/3.png)\n\n## 修改Schema.xml文件\n我们需要修改schema.xml中文件的文件夹下，server\\solr\\jcg\\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-7.4.0\\example\\exampledocs\n\n现在，我们定位到该文件夹  server\\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。\n现在编辑\\server\\solr\\jcg\\conf\\server\\solr\\jcg\\conf\\schema.xml文件，设置唯一元素后添加以下内容。\n我们已经设置了属性索引为true。这指定字段用于索引和记录可以使用索引进行检索。该值设置为false将只存储领域，但不能进行查询。\n另外请注意另一个属性stored并将其设置为true。这指定字段被存储，并且可以在输出被返回。将此字段设置为假将使字段唯一索引，并且不能在输出进行检索。\n我们已经分配给存在于此处的“books.csv”文件中的字段的类型。在CSV文件“ID”第一场由索引Schema.xml文件的唯一键自动元素的照顾。如果你注意，我们已经略过字段series_t，sequence_i和genre_s未做任何条目。但是，当我们执行索引时，所有这些字段都被索引且没有任何问题。如果你想知道这种情况需要在Schema.xml文件的dynamicField部分一探究竟。\n[schema.xml](schema.xml)\n\n既然我们已经修改了配置，我们必须停止和启动服务器。要做到这一点，我们需要通过命令行发出从bin目录下面的命令。\n```\nSolr  stop -all\n```\n服务器将停止现在。现在启动服务器问题从bin目录中通过命令行运行以下命令。\n```\nSolr start\n```\n# 导入数据\nApache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\\exampledocs可看到。\n现在，我们在命令行定位到example\\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。\n![logo](lr教程/4.png)\n正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-7.4.0\\example\\exampledocs在命令提示符并发出以下命令。\n![logo](lr教程/5.png)\n现在我们导航到以下网址并选择核心JCG。\nhttp://localhost:8983/solr\n![logo](lr教程/6.png)\nSolr的JCG核心数据\n就拿在统计部分仔细一看，该民文档参数将显示索引的行数。\n# 访问索引的文档\nApache Solr提供了一种基于REST API来访问的数据，并还提供了不同的参数，以检索数据。我们将向您展示一些基于场景的查询。\n## 按名称搜索\n我们将用它的名字检索书的细节。要做到这一点，我们将使用下面的语法。URL中的参数“Q”是查询事件。\n打开浏览器下列URL。\nhttp://localhost:8983/solr/jcg/select?q=name:\"A Clash of Kings\"\n输出将在下面，如图所示。\n![logo](lr教程/7.png)\n## 首字母搜索\n现在我们将告诉你如何搜索记录，如果我们只知道起始字母或单词，不记得完整的标题。我们可以用下面的查询检索结果。\nhttp://localhost:8983/solr/jcg/select?q=name:\"A\"\n输出将列出所有的书籍字母A盯着\n![logo](lr教程/8.png)\n\n## 搜索使用通配符\nSolr的支持通配符搜索。我们将下面的展示如何检索所有书名包含“of”的书。\nhttp://localhost:8983/solr/jcg/select?q=name:\"*of\"\n![logo](lr教程/9.png)\n\n## 搜索使用的条件\nSolr的支持条件的搜索。我们可以设置条件，我们的查询提供了“FQ”参数。在下面我们将告诉你如何查询价格低于￥6的书。\nhttp://localhost:8983/solr/jcg/select?q=*&fq=price:[0 TO 6]\n输出将只列出这是低于$ 6的书籍。\n![logo](lr教程/10.png)","slug":"lr教程","published":1,"updated":"2018-10-14T07:09:11.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzik000jxwjli5x0bsoz","content":"<h1 id=\"1-为什么选择Apache-Solr\"><a href=\"#1-为什么选择Apache-Solr\" class=\"headerlink\" title=\"1.为什么选择Apache Solr\"></a>1.为什么选择Apache Solr</h1><p>Apache Solr是一个功能强大的搜索服务器，它支持REST风格API。Solr是基于Lucene的，Lucene 支持强大的匹配能力，如短语，通配符，连接，分组和更多不同的数据类型。它使用 Apache Zookeeper特别针对高流量进行优化。Apache Solr提供各式各样的功能，我们列出了部分最主要的功能。</p>\n<ul>\n<li>先进的全文搜索功能。</li>\n<li>XML，JSON和HTTP - 基于开放接口标准。</li>\n<li>高度可扩展和容错。</li>\n<li>同时支持模式和无模式配置。</li>\n<li>分页搜索和过滤。</li>\n<li>支持像英语，德语，中国，日本，法国和许多主要语言</li>\n<li>丰富的文档分析。</li>\n</ul>\n<h1 id=\"安装solr\"><a href=\"#安装solr\" class=\"headerlink\" title=\"安装solr\"></a>安装solr</h1><p>要首先让从以下位置下载最新版本的Apache Solr：<br><a href=\"http://lucene.apache.org/solr/downloads.html\" target=\"_blank\" rel=\"noopener\">http://lucene.apache.org/solr/downloads.html</a><br>在撰写本文时，可用的稳定版本是7.4.0。<br>一旦Solr的zip文件下载将它解压缩到一个文件夹。提取的文件夹看起来像下面。<br><img src=\"/2018/10/13/lr教程/1.png\" alt=\"logo\"><br>Solr的文件夹</p>\n<p>bin文件夹中包含用来启动和停止服务器的脚本。example 文件夹包含几个示例文件。我们将使用其中的一种，以说明Solr如何索引数据。server 文件夹包含logs 文件夹，所有的Solr的日志都写入该文件夹。这将有助于索引过程来检查任何错误日志。在sever文件夹下的Solr文件夹包含不同的集合或核心（core/collection）。对于各集合或核心的配置和数据都存储在相应的集合或核心文件夹。<br>Apache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。<br>我们可以使用命令行脚本启动服务器。让我们去solr的bin目录，从命令提示符输入出以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr start</span><br></pre></td></tr></table></figure></p>\n<p>这将启动下的默认端口8983 Solr的服务器。</p>\n<p>现在，我们可以在浏览器中打开以下网址和验证，我们的Solr的实例正在运行。solr的管理工具的细节超出了示例的范围。</p>\n<p><a href=\"http://localhost:8983/Solr/\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/Solr/</a><br><img src=\"/2018/10/13/lr教程/2.png\" alt=\"logo\"></p>\n<h1 id=\"配置Apache-Solr\"><a href=\"#配置Apache-Solr\" class=\"headerlink\" title=\"配置Apache Solr\"></a>配置Apache Solr</h1><p>在本节中，我们将告诉你如何配置的核心/集合作为Solr实例，以及如何定义的字段。Apache Solr附带称为无模式模式的选项。这个选项允许用户构建有效的架构，而无需手动编辑模式文件。但是，在这个例子中，我们将使用架构配置理解Solr的内部。</p>\n<h2 id=\"建立核心（core）\"><a href=\"#建立核心（core）\" class=\"headerlink\" title=\"建立核心（core）\"></a>建立核心（core）</h2><p>当Solr的服务器在独立模式下启动的配置称为核心，当它在SolrCloud模式启动的配置称为集合。在这个例子中，我们将有关独立服务器和核心讨论。我们将在以后再讨论SolrCloud。首先，我们需要创建一个核心的索引数据。Solr的创建命令有以下选项：</p>\n<p>-c <name> -要创建的核心或集合的名称（必需）。<br>-d <confdir> -配置目录，在SolrCloud模式非常有用。<br>-n <configname> -配置名称。这将默认为核心或集合的名称。<br>-p <port> -本地Solr的实例的端口发送create命令; 默认脚本试图通过寻找运行Solr的实例来检测端口。<br>-s <shards> -Number of shards to split a collection into, default is 1.<br>-rf <replicas> -集合中的每个文件的份数。默认值是1。<br>在这个例子中，我们将使用的核心名称和配置目录-d参数-c参数。对于所有其它参数我们使用默认设置。</replicas></shards></port></configname></confdir></name></p>\n<p>现在在命令窗口浏览 solr-7.4.0\\bin文件夹，并发出以下命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr create -c jcg</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到在命令窗口中下面的输出。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating new core &apos;jcg&apos; using command:</span><br><span class=\"line\">http://localhost:8983/solr/admin/cores?action=CREATE&amp;name=jcg&amp;instanceDir=jcg</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> &quot;responseHeader&quot;:&#123;</span><br><span class=\"line\"> &quot;status&quot;:0,</span><br><span class=\"line\"> &quot;QTime&quot;:663&#125;,</span><br><span class=\"line\"> &quot;core&quot;:&quot;jcg&quot;&#125;</span><br><span class=\"line\"> ``` </span><br><span class=\"line\">现在我们导航到以下网址，我们可以看到JCG核心被填充在核心选择器上。还可以看到核心的统计信息。</span><br><span class=\"line\">http://localhost:8983/Solr</span><br><span class=\"line\">![logo](lr教程/3.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 修改Schema.xml文件</span><br><span class=\"line\">我们需要修改schema.xml中文件的文件夹下，server\\solr\\jcg\\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-7.4.0\\example\\exampledocs</span><br><span class=\"line\"></span><br><span class=\"line\">现在，我们定位到该文件夹  server\\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。</span><br><span class=\"line\">现在编辑\\server\\solr\\jcg\\conf\\server\\solr\\jcg\\conf\\schema.xml文件，设置唯一元素后添加以下内容。</span><br><span class=\"line\">我们已经设置了属性索引为true。这指定字段用于索引和记录可以使用索引进行检索。该值设置为false将只存储领域，但不能进行查询。</span><br><span class=\"line\">另外请注意另一个属性stored并将其设置为true。这指定字段被存储，并且可以在输出被返回。将此字段设置为假将使字段唯一索引，并且不能在输出进行检索。</span><br><span class=\"line\">我们已经分配给存在于此处的“books.csv”文件中的字段的类型。在CSV文件“ID”第一场由索引Schema.xml文件的唯一键自动元素的照顾。如果你注意，我们已经略过字段series_t，sequence_i和genre_s未做任何条目。但是，当我们执行索引时，所有这些字段都被索引且没有任何问题。如果你想知道这种情况需要在Schema.xml文件的dynamicField部分一探究竟。</span><br><span class=\"line\">[schema.xml](schema.xml)</span><br><span class=\"line\"></span><br><span class=\"line\">既然我们已经修改了配置，我们必须停止和启动服务器。要做到这一点，我们需要通过命令行发出从bin目录下面的命令。</span><br></pre></td></tr></table></figure></p>\n<p>Solr  stop -all<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器将停止现在。现在启动服务器问题从bin目录中通过命令行运行以下命令。</span><br></pre></td></tr></table></figure></p>\n<p>Solr start<br>```</p>\n<h1 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h1><p>Apache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\\exampledocs可看到。<br>现在，我们在命令行定位到example\\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。<br><img src=\"/2018/10/13/lr教程/4.png\" alt=\"logo\"><br>正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-7.4.0\\example\\exampledocs在命令提示符并发出以下命令。<br><img src=\"/2018/10/13/lr教程/5.png\" alt=\"logo\"><br>现在我们导航到以下网址并选择核心JCG。<br><a href=\"http://localhost:8983/solr\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr</a><br><img src=\"/2018/10/13/lr教程/6.png\" alt=\"logo\"><br>Solr的JCG核心数据<br>就拿在统计部分仔细一看，该民文档参数将显示索引的行数。</p>\n<h1 id=\"访问索引的文档\"><a href=\"#访问索引的文档\" class=\"headerlink\" title=\"访问索引的文档\"></a>访问索引的文档</h1><p>Apache Solr提供了一种基于REST API来访问的数据，并还提供了不同的参数，以检索数据。我们将向您展示一些基于场景的查询。</p>\n<h2 id=\"按名称搜索\"><a href=\"#按名称搜索\" class=\"headerlink\" title=\"按名称搜索\"></a>按名称搜索</h2><p>我们将用它的名字检索书的细节。要做到这一点，我们将使用下面的语法。URL中的参数“Q”是查询事件。<br>打开浏览器下列URL。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;A\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;A</a> Clash of Kings”<br>输出将在下面，如图所示。<br><img src=\"/2018/10/13/lr教程/7.png\" alt=\"logo\"></p>\n<h2 id=\"首字母搜索\"><a href=\"#首字母搜索\" class=\"headerlink\" title=\"首字母搜索\"></a>首字母搜索</h2><p>现在我们将告诉你如何搜索记录，如果我们只知道起始字母或单词，不记得完整的标题。我们可以用下面的查询检索结果。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;A\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;A</a>“<br>输出将列出所有的书籍字母A盯着<br><img src=\"/2018/10/13/lr教程/8.png\" alt=\"logo\"></p>\n<h2 id=\"搜索使用通配符\"><a href=\"#搜索使用通配符\" class=\"headerlink\" title=\"搜索使用通配符\"></a>搜索使用通配符</h2><p>Solr的支持通配符搜索。我们将下面的展示如何检索所有书名包含“of”的书。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;*of\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;*of</a>“<br><img src=\"/2018/10/13/lr教程/9.png\" alt=\"logo\"></p>\n<h2 id=\"搜索使用的条件\"><a href=\"#搜索使用的条件\" class=\"headerlink\" title=\"搜索使用的条件\"></a>搜索使用的条件</h2><p>Solr的支持条件的搜索。我们可以设置条件，我们的查询提供了“FQ”参数。在下面我们将告诉你如何查询价格低于￥6的书。<br><a href=\"http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0</a> TO 6]<br>输出将只列出这是低于$ 6的书籍。<br><img src=\"/2018/10/13/lr教程/10.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-为什么选择Apache-Solr\"><a href=\"#1-为什么选择Apache-Solr\" class=\"headerlink\" title=\"1.为什么选择Apache Solr\"></a>1.为什么选择Apache Solr</h1><p>Apache Solr是一个功能强大的搜索服务器，它支持REST风格API。Solr是基于Lucene的，Lucene 支持强大的匹配能力，如短语，通配符，连接，分组和更多不同的数据类型。它使用 Apache Zookeeper特别针对高流量进行优化。Apache Solr提供各式各样的功能，我们列出了部分最主要的功能。</p>\n<ul>\n<li>先进的全文搜索功能。</li>\n<li>XML，JSON和HTTP - 基于开放接口标准。</li>\n<li>高度可扩展和容错。</li>\n<li>同时支持模式和无模式配置。</li>\n<li>分页搜索和过滤。</li>\n<li>支持像英语，德语，中国，日本，法国和许多主要语言</li>\n<li>丰富的文档分析。</li>\n</ul>\n<h1 id=\"安装solr\"><a href=\"#安装solr\" class=\"headerlink\" title=\"安装solr\"></a>安装solr</h1><p>要首先让从以下位置下载最新版本的Apache Solr：<br><a href=\"http://lucene.apache.org/solr/downloads.html\" target=\"_blank\" rel=\"noopener\">http://lucene.apache.org/solr/downloads.html</a><br>在撰写本文时，可用的稳定版本是7.4.0。<br>一旦Solr的zip文件下载将它解压缩到一个文件夹。提取的文件夹看起来像下面。<br><img src=\"/2018/10/13/lr教程/1.png\" alt=\"logo\"><br>Solr的文件夹</p>\n<p>bin文件夹中包含用来启动和停止服务器的脚本。example 文件夹包含几个示例文件。我们将使用其中的一种，以说明Solr如何索引数据。server 文件夹包含logs 文件夹，所有的Solr的日志都写入该文件夹。这将有助于索引过程来检查任何错误日志。在sever文件夹下的Solr文件夹包含不同的集合或核心（core/collection）。对于各集合或核心的配置和数据都存储在相应的集合或核心文件夹。<br>Apache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。<br>我们可以使用命令行脚本启动服务器。让我们去solr的bin目录，从命令提示符输入出以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr start</span><br></pre></td></tr></table></figure></p>\n<p>这将启动下的默认端口8983 Solr的服务器。</p>\n<p>现在，我们可以在浏览器中打开以下网址和验证，我们的Solr的实例正在运行。solr的管理工具的细节超出了示例的范围。</p>\n<p><a href=\"http://localhost:8983/Solr/\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/Solr/</a><br><img src=\"/2018/10/13/lr教程/2.png\" alt=\"logo\"></p>\n<h1 id=\"配置Apache-Solr\"><a href=\"#配置Apache-Solr\" class=\"headerlink\" title=\"配置Apache Solr\"></a>配置Apache Solr</h1><p>在本节中，我们将告诉你如何配置的核心/集合作为Solr实例，以及如何定义的字段。Apache Solr附带称为无模式模式的选项。这个选项允许用户构建有效的架构，而无需手动编辑模式文件。但是，在这个例子中，我们将使用架构配置理解Solr的内部。</p>\n<h2 id=\"建立核心（core）\"><a href=\"#建立核心（core）\" class=\"headerlink\" title=\"建立核心（core）\"></a>建立核心（core）</h2><p>当Solr的服务器在独立模式下启动的配置称为核心，当它在SolrCloud模式启动的配置称为集合。在这个例子中，我们将有关独立服务器和核心讨论。我们将在以后再讨论SolrCloud。首先，我们需要创建一个核心的索引数据。Solr的创建命令有以下选项：</p>\n<p>-c <name> -要创建的核心或集合的名称（必需）。<br>-d <confdir> -配置目录，在SolrCloud模式非常有用。<br>-n <configname> -配置名称。这将默认为核心或集合的名称。<br>-p <port> -本地Solr的实例的端口发送create命令; 默认脚本试图通过寻找运行Solr的实例来检测端口。<br>-s <shards> -Number of shards to split a collection into, default is 1.<br>-rf <replicas> -集合中的每个文件的份数。默认值是1。<br>在这个例子中，我们将使用的核心名称和配置目录-d参数-c参数。对于所有其它参数我们使用默认设置。</replicas></shards></port></configname></confdir></name></p>\n<p>现在在命令窗口浏览 solr-7.4.0\\bin文件夹，并发出以下命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr create -c jcg</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到在命令窗口中下面的输出。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating new core &apos;jcg&apos; using command:</span><br><span class=\"line\">http://localhost:8983/solr/admin/cores?action=CREATE&amp;name=jcg&amp;instanceDir=jcg</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> &quot;responseHeader&quot;:&#123;</span><br><span class=\"line\"> &quot;status&quot;:0,</span><br><span class=\"line\"> &quot;QTime&quot;:663&#125;,</span><br><span class=\"line\"> &quot;core&quot;:&quot;jcg&quot;&#125;</span><br><span class=\"line\"> ``` </span><br><span class=\"line\">现在我们导航到以下网址，我们可以看到JCG核心被填充在核心选择器上。还可以看到核心的统计信息。</span><br><span class=\"line\">http://localhost:8983/Solr</span><br><span class=\"line\">![logo](lr教程/3.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 修改Schema.xml文件</span><br><span class=\"line\">我们需要修改schema.xml中文件的文件夹下，server\\solr\\jcg\\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-7.4.0\\example\\exampledocs</span><br><span class=\"line\"></span><br><span class=\"line\">现在，我们定位到该文件夹  server\\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。</span><br><span class=\"line\">现在编辑\\server\\solr\\jcg\\conf\\server\\solr\\jcg\\conf\\schema.xml文件，设置唯一元素后添加以下内容。</span><br><span class=\"line\">我们已经设置了属性索引为true。这指定字段用于索引和记录可以使用索引进行检索。该值设置为false将只存储领域，但不能进行查询。</span><br><span class=\"line\">另外请注意另一个属性stored并将其设置为true。这指定字段被存储，并且可以在输出被返回。将此字段设置为假将使字段唯一索引，并且不能在输出进行检索。</span><br><span class=\"line\">我们已经分配给存在于此处的“books.csv”文件中的字段的类型。在CSV文件“ID”第一场由索引Schema.xml文件的唯一键自动元素的照顾。如果你注意，我们已经略过字段series_t，sequence_i和genre_s未做任何条目。但是，当我们执行索引时，所有这些字段都被索引且没有任何问题。如果你想知道这种情况需要在Schema.xml文件的dynamicField部分一探究竟。</span><br><span class=\"line\">[schema.xml](schema.xml)</span><br><span class=\"line\"></span><br><span class=\"line\">既然我们已经修改了配置，我们必须停止和启动服务器。要做到这一点，我们需要通过命令行发出从bin目录下面的命令。</span><br></pre></td></tr></table></figure></p>\n<p>Solr  stop -all<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器将停止现在。现在启动服务器问题从bin目录中通过命令行运行以下命令。</span><br></pre></td></tr></table></figure></p>\n<p>Solr start<br>```</p>\n<h1 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h1><p>Apache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\\exampledocs可看到。<br>现在，我们在命令行定位到example\\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。<br><img src=\"/2018/10/13/lr教程/4.png\" alt=\"logo\"><br>正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-7.4.0\\example\\exampledocs在命令提示符并发出以下命令。<br><img src=\"/2018/10/13/lr教程/5.png\" alt=\"logo\"><br>现在我们导航到以下网址并选择核心JCG。<br><a href=\"http://localhost:8983/solr\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr</a><br><img src=\"/2018/10/13/lr教程/6.png\" alt=\"logo\"><br>Solr的JCG核心数据<br>就拿在统计部分仔细一看，该民文档参数将显示索引的行数。</p>\n<h1 id=\"访问索引的文档\"><a href=\"#访问索引的文档\" class=\"headerlink\" title=\"访问索引的文档\"></a>访问索引的文档</h1><p>Apache Solr提供了一种基于REST API来访问的数据，并还提供了不同的参数，以检索数据。我们将向您展示一些基于场景的查询。</p>\n<h2 id=\"按名称搜索\"><a href=\"#按名称搜索\" class=\"headerlink\" title=\"按名称搜索\"></a>按名称搜索</h2><p>我们将用它的名字检索书的细节。要做到这一点，我们将使用下面的语法。URL中的参数“Q”是查询事件。<br>打开浏览器下列URL。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;A\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;A</a> Clash of Kings”<br>输出将在下面，如图所示。<br><img src=\"/2018/10/13/lr教程/7.png\" alt=\"logo\"></p>\n<h2 id=\"首字母搜索\"><a href=\"#首字母搜索\" class=\"headerlink\" title=\"首字母搜索\"></a>首字母搜索</h2><p>现在我们将告诉你如何搜索记录，如果我们只知道起始字母或单词，不记得完整的标题。我们可以用下面的查询检索结果。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;A\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;A</a>“<br>输出将列出所有的书籍字母A盯着<br><img src=\"/2018/10/13/lr教程/8.png\" alt=\"logo\"></p>\n<h2 id=\"搜索使用通配符\"><a href=\"#搜索使用通配符\" class=\"headerlink\" title=\"搜索使用通配符\"></a>搜索使用通配符</h2><p>Solr的支持通配符搜索。我们将下面的展示如何检索所有书名包含“of”的书。<br><a href=\"http://localhost:8983/solr/jcg/select?q=name:&quot;*of\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=name:&quot;*of</a>“<br><img src=\"/2018/10/13/lr教程/9.png\" alt=\"logo\"></p>\n<h2 id=\"搜索使用的条件\"><a href=\"#搜索使用的条件\" class=\"headerlink\" title=\"搜索使用的条件\"></a>搜索使用的条件</h2><p>Solr的支持条件的搜索。我们可以设置条件，我们的查询提供了“FQ”参数。在下面我们将告诉你如何查询价格低于￥6的书。<br><a href=\"http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0\" target=\"_blank\" rel=\"noopener\">http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0</a> TO 6]<br>输出将只列出这是低于$ 6的书籍。<br><img src=\"/2018/10/13/lr教程/10.png\" alt=\"logo\"></p>\n"},{"title":"十）jenkins 配置java和Maven环境","author":"wen","date":"2018-05-11T15:01:00.000Z","_content":"参考：\n[linux配置java和maven](/2018/05/11/九-linux配置java和maven/)\n[docker安装本地仓库](2018/05/08/（六）docker安装本地仓库（root用户）/)\n[安装jenkins](/2018/05/08/安装jenkins/)\n\n# 一配置maven\n/app/apache-maven-3.2.3/conf/settings.xml\n库位置\n![logo](enkinx-配置任务/1.png)\n以下是私有docker库 用户名密码）\n![logo](enkinx-配置任务/2.png)\n\n# 二 jenkins 配置java和Maven环境\n2.1点击系统管理\n![logo](enkinx-配置任务/11278290-aab55082195f5c56.png)\n2.2 点击 全局工具配置 \n![logo](enkinx-配置任务/3.png)\n2.3 如下图配置 java和maven.\n![logo](enkinx-配置任务/4.png)\n\n![logo](enkinx-配置任务/5.png)\n2.4 点击 保存 再次点击 系统设置\n![logo](enkinx-配置任务/6.png)\n2.5 再次配置java和maven目录\n![logo](enkinx-配置任务/7.png)","source":"_posts/enkinx-配置任务.md","raw":"title: 十）jenkins 配置java和Maven环境\nauthor: wen\ntags:\n  - docker\n  - jenkins\n  - java\n  - maven\ncategories:\n  - jenkins\ndate: 2018-05-11 23:01:00\n---\n参考：\n[linux配置java和maven](/2018/05/11/九-linux配置java和maven/)\n[docker安装本地仓库](2018/05/08/（六）docker安装本地仓库（root用户）/)\n[安装jenkins](/2018/05/08/安装jenkins/)\n\n# 一配置maven\n/app/apache-maven-3.2.3/conf/settings.xml\n库位置\n![logo](enkinx-配置任务/1.png)\n以下是私有docker库 用户名密码）\n![logo](enkinx-配置任务/2.png)\n\n# 二 jenkins 配置java和Maven环境\n2.1点击系统管理\n![logo](enkinx-配置任务/11278290-aab55082195f5c56.png)\n2.2 点击 全局工具配置 \n![logo](enkinx-配置任务/3.png)\n2.3 如下图配置 java和maven.\n![logo](enkinx-配置任务/4.png)\n\n![logo](enkinx-配置任务/5.png)\n2.4 点击 保存 再次点击 系统设置\n![logo](enkinx-配置任务/6.png)\n2.5 再次配置java和maven目录\n![logo](enkinx-配置任务/7.png)","slug":"enkinx-配置任务","published":1,"updated":"2018-05-11T15:27:28.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzip000kxwjlbwbhucb2","content":"<p>参考：<br><a href=\"/2018/05/11/九-linux配置java和maven/\">linux配置java和maven</a><br><a href=\"2018/05/08/（六）docker安装本地仓库（root用户）/\">docker安装本地仓库</a><br><a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a></p>\n<h1 id=\"一配置maven\"><a href=\"#一配置maven\" class=\"headerlink\" title=\"一配置maven\"></a>一配置maven</h1><p>/app/apache-maven-3.2.3/conf/settings.xml<br>库位置<br><img src=\"/2018/05/11/enkinx-配置任务/1.png\" alt=\"logo\"><br>以下是私有docker库 用户名密码）<br><img src=\"/2018/05/11/enkinx-配置任务/2.png\" alt=\"logo\"></p>\n<h1 id=\"二-jenkins-配置java和Maven环境\"><a href=\"#二-jenkins-配置java和Maven环境\" class=\"headerlink\" title=\"二 jenkins 配置java和Maven环境\"></a>二 jenkins 配置java和Maven环境</h1><p>2.1点击系统管理<br><img src=\"/2018/05/11/enkinx-配置任务/11278290-aab55082195f5c56.png\" alt=\"logo\"><br>2.2 点击 全局工具配置<br><img src=\"/2018/05/11/enkinx-配置任务/3.png\" alt=\"logo\"><br>2.3 如下图配置 java和maven.<br><img src=\"/2018/05/11/enkinx-配置任务/4.png\" alt=\"logo\"></p>\n<p><img src=\"/2018/05/11/enkinx-配置任务/5.png\" alt=\"logo\"><br>2.4 点击 保存 再次点击 系统设置<br><img src=\"/2018/05/11/enkinx-配置任务/6.png\" alt=\"logo\"><br>2.5 再次配置java和maven目录<br><img src=\"/2018/05/11/enkinx-配置任务/7.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<br><a href=\"/2018/05/11/九-linux配置java和maven/\">linux配置java和maven</a><br><a href=\"2018/05/08/（六）docker安装本地仓库（root用户）/\">docker安装本地仓库</a><br><a href=\"/2018/05/08/安装jenkins/\">安装jenkins</a></p>\n<h1 id=\"一配置maven\"><a href=\"#一配置maven\" class=\"headerlink\" title=\"一配置maven\"></a>一配置maven</h1><p>/app/apache-maven-3.2.3/conf/settings.xml<br>库位置<br><img src=\"/2018/05/11/enkinx-配置任务/1.png\" alt=\"logo\"><br>以下是私有docker库 用户名密码）<br><img src=\"/2018/05/11/enkinx-配置任务/2.png\" alt=\"logo\"></p>\n<h1 id=\"二-jenkins-配置java和Maven环境\"><a href=\"#二-jenkins-配置java和Maven环境\" class=\"headerlink\" title=\"二 jenkins 配置java和Maven环境\"></a>二 jenkins 配置java和Maven环境</h1><p>2.1点击系统管理<br><img src=\"/2018/05/11/enkinx-配置任务/11278290-aab55082195f5c56.png\" alt=\"logo\"><br>2.2 点击 全局工具配置<br><img src=\"/2018/05/11/enkinx-配置任务/3.png\" alt=\"logo\"><br>2.3 如下图配置 java和maven.<br><img src=\"/2018/05/11/enkinx-配置任务/4.png\" alt=\"logo\"></p>\n<p><img src=\"/2018/05/11/enkinx-配置任务/5.png\" alt=\"logo\"><br>2.4 点击 保存 再次点击 系统设置<br><img src=\"/2018/05/11/enkinx-配置任务/6.png\" alt=\"logo\"><br>2.5 再次配置java和maven目录<br><img src=\"/2018/05/11/enkinx-配置任务/7.png\" alt=\"logo\"></p>\n"},{"title":"thymeleaf学习的坑","author":"wen","date":"2018-05-08T06:30:00.000Z","_content":"# 引入css和js文件\n```\n<link th:href=\"@{/resources/admin/css/common.css}\" rel=\"stylesheet\" type=\"text/css\" />\n<script  type=\"text/javascript\" th:src=\"@{/resources/admin/js/jquery.js}\"></script>\n```\n\n# 网页标题(多语言)\n使用#{key}\n```\n  <title th:text=\"#{system.name}\"></title>\n# thymeleaf结合js\n<script  th:inline=\"javascript\">\n       //controller 使用Model设置属性\n         var error=[[${error}]];\n       //多语言\n       var usernameRequired=[[#{admin.login.usernameRequired}]]\n    </script>\n    ```\n# thymeleaf结合js 冲突\n```\n//使用<![CDATA[ ]]>\n<script th:inline=\"javascript\">\n//<![CDATA[\n  js code\n\t// ]]>\n</script>\n```\n# th:include\ncompontent/commonJs.html\n```\n<div th:fragment=\"commonJs\">\n<script th:inline=\"javascript\">\njs代码（国际化语言）\n</script>\n</div>\n```\n\n引用\n```\n <div th:include=\"compontent/commonJs::commonJs\"></div>\n ```\n# th:href\n```\n<a th:href=\"@{/admin/publicInfo/info(id=${publicInfo.id})}\" target=\"iframe\" th:text=\"#{admin.menu.publicManage.name}\"></a>\n```\n# th:each\n```\n<tr th:each=\"admin:${page.content}\">\n\t\t\t  <td th:text=\"${admin.username}\"></td>\n\t      </tr>```\n# 格式化日期\n```\n<td th:text=\"${#calendars.format(admin.createDate,'yyyy年MM月dd日')}\"></td>\n```\n# th:if\n•\t单个条件\n```\n<td th:if=\"${admin.username}=='admin'\"><input type=\"checkbox\" name=\"ids\" th:value=\"${admin.id}\" disabled=\"disabled\"/></td>\n```\n•\t并且条件\n```\n<td th:if=\"${session.username}!='admin' and ${admin.username}==${session.username}\">\n<a th:href=\"@{initEdit(id=${admin.id})}\" th:text=\"#{admin.menu.admin.edit}\">\n</a>\n</td>\n```\n\n","source":"_posts/hymeleaf学习的坑.md","raw":"title: thymeleaf学习的坑\nauthor: wen\ntags:\n  - thymeleaf\ncategories: []\ndate: 2018-05-08 14:30:00\n---\n# 引入css和js文件\n```\n<link th:href=\"@{/resources/admin/css/common.css}\" rel=\"stylesheet\" type=\"text/css\" />\n<script  type=\"text/javascript\" th:src=\"@{/resources/admin/js/jquery.js}\"></script>\n```\n\n# 网页标题(多语言)\n使用#{key}\n```\n  <title th:text=\"#{system.name}\"></title>\n# thymeleaf结合js\n<script  th:inline=\"javascript\">\n       //controller 使用Model设置属性\n         var error=[[${error}]];\n       //多语言\n       var usernameRequired=[[#{admin.login.usernameRequired}]]\n    </script>\n    ```\n# thymeleaf结合js 冲突\n```\n//使用<![CDATA[ ]]>\n<script th:inline=\"javascript\">\n//<![CDATA[\n  js code\n\t// ]]>\n</script>\n```\n# th:include\ncompontent/commonJs.html\n```\n<div th:fragment=\"commonJs\">\n<script th:inline=\"javascript\">\njs代码（国际化语言）\n</script>\n</div>\n```\n\n引用\n```\n <div th:include=\"compontent/commonJs::commonJs\"></div>\n ```\n# th:href\n```\n<a th:href=\"@{/admin/publicInfo/info(id=${publicInfo.id})}\" target=\"iframe\" th:text=\"#{admin.menu.publicManage.name}\"></a>\n```\n# th:each\n```\n<tr th:each=\"admin:${page.content}\">\n\t\t\t  <td th:text=\"${admin.username}\"></td>\n\t      </tr>```\n# 格式化日期\n```\n<td th:text=\"${#calendars.format(admin.createDate,'yyyy年MM月dd日')}\"></td>\n```\n# th:if\n•\t单个条件\n```\n<td th:if=\"${admin.username}=='admin'\"><input type=\"checkbox\" name=\"ids\" th:value=\"${admin.id}\" disabled=\"disabled\"/></td>\n```\n•\t并且条件\n```\n<td th:if=\"${session.username}!='admin' and ${admin.username}==${session.username}\">\n<a th:href=\"@{initEdit(id=${admin.id})}\" th:text=\"#{admin.menu.admin.edit}\">\n</a>\n</td>\n```\n\n","slug":"hymeleaf学习的坑","published":1,"updated":"2018-05-08T06:39:45.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprziy000oxwjlewri7hc0","content":"<h1 id=\"引入css和js文件\"><a href=\"#引入css和js文件\" class=\"headerlink\" title=\"引入css和js文件\"></a>引入css和js文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link th:href=&quot;@&#123;/resources/admin/css/common.css&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class=\"line\">&lt;script  type=&quot;text/javascript&quot; th:src=&quot;@&#123;/resources/admin/js/jquery.js&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"网页标题-多语言\"><a href=\"#网页标题-多语言\" class=\"headerlink\" title=\"网页标题(多语言)\"></a>网页标题(多语言)</h1><p>使用#{key}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;title th:text=&quot;#&#123;system.name&#125;&quot;&gt;&lt;/title&gt;</span><br><span class=\"line\"># thymeleaf结合js</span><br><span class=\"line\">&lt;script  th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">       //controller 使用Model设置属性</span><br><span class=\"line\">         var error=[[$&#123;error&#125;]];</span><br><span class=\"line\">       //多语言</span><br><span class=\"line\">       var usernameRequired=[[#&#123;admin.login.usernameRequired&#125;]]</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"thymeleaf结合js-冲突\"><a href=\"#thymeleaf结合js-冲突\" class=\"headerlink\" title=\"thymeleaf结合js 冲突\"></a>thymeleaf结合js 冲突</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用&lt;![CDATA[ ]]&gt;</span><br><span class=\"line\">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">//&lt;![CDATA[</span><br><span class=\"line\">  js code</span><br><span class=\"line\">\t// ]]&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-include\"><a href=\"#th-include\" class=\"headerlink\" title=\"th:include\"></a>th:include</h1><p>compontent/commonJs.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div th:fragment=&quot;commonJs&quot;&gt;</span><br><span class=\"line\">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">js代码（国际化语言）</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div th:include=&quot;compontent/commonJs::commonJs&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"th-href\"><a href=\"#th-href\" class=\"headerlink\" title=\"th:href\"></a>th:href</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a th:href=&quot;@&#123;/admin/publicInfo/info(id=$&#123;publicInfo.id&#125;)&#125;&quot; target=&quot;iframe&quot; th:text=&quot;#&#123;admin.menu.publicManage.name&#125;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-each\"><a href=\"#th-each\" class=\"headerlink\" title=\"th:each\"></a>th:each</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr th:each=&quot;admin:$&#123;page.content&#125;&quot;&gt;</span><br><span class=\"line\">\t\t\t  &lt;td th:text=&quot;$&#123;admin.username&#125;&quot;&gt;&lt;/td&gt;</span><br><span class=\"line\">\t      &lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"格式化日期\"><a href=\"#格式化日期\" class=\"headerlink\" title=\"格式化日期\"></a>格式化日期</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:text=&quot;$&#123;#calendars.format(admin.createDate,&apos;yyyy年MM月dd日&apos;)&#125;&quot;&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-if\"><a href=\"#th-if\" class=\"headerlink\" title=\"th:if\"></a>th:if</h1><p>•    单个条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:if=&quot;$&#123;admin.username&#125;==&apos;admin&apos;&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ids&quot; th:value=&quot;$&#123;admin.id&#125;&quot; disabled=&quot;disabled&quot;/&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>•    并且条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:if=&quot;$&#123;session.username&#125;!=&apos;admin&apos; and $&#123;admin.username&#125;==$&#123;session.username&#125;&quot;&gt;</span><br><span class=\"line\">&lt;a th:href=&quot;@&#123;initEdit(id=$&#123;admin.id&#125;)&#125;&quot; th:text=&quot;#&#123;admin.menu.admin.edit&#125;&quot;&gt;</span><br><span class=\"line\">&lt;/a&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"引入css和js文件\"><a href=\"#引入css和js文件\" class=\"headerlink\" title=\"引入css和js文件\"></a>引入css和js文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link th:href=&quot;@&#123;/resources/admin/css/common.css&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class=\"line\">&lt;script  type=&quot;text/javascript&quot; th:src=&quot;@&#123;/resources/admin/js/jquery.js&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"网页标题-多语言\"><a href=\"#网页标题-多语言\" class=\"headerlink\" title=\"网页标题(多语言)\"></a>网页标题(多语言)</h1><p>使用#{key}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;title th:text=&quot;#&#123;system.name&#125;&quot;&gt;&lt;/title&gt;</span><br><span class=\"line\"># thymeleaf结合js</span><br><span class=\"line\">&lt;script  th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">       //controller 使用Model设置属性</span><br><span class=\"line\">         var error=[[$&#123;error&#125;]];</span><br><span class=\"line\">       //多语言</span><br><span class=\"line\">       var usernameRequired=[[#&#123;admin.login.usernameRequired&#125;]]</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"thymeleaf结合js-冲突\"><a href=\"#thymeleaf结合js-冲突\" class=\"headerlink\" title=\"thymeleaf结合js 冲突\"></a>thymeleaf结合js 冲突</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用&lt;![CDATA[ ]]&gt;</span><br><span class=\"line\">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">//&lt;![CDATA[</span><br><span class=\"line\">  js code</span><br><span class=\"line\">\t// ]]&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-include\"><a href=\"#th-include\" class=\"headerlink\" title=\"th:include\"></a>th:include</h1><p>compontent/commonJs.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div th:fragment=&quot;commonJs&quot;&gt;</span><br><span class=\"line\">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class=\"line\">js代码（国际化语言）</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div th:include=&quot;compontent/commonJs::commonJs&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"th-href\"><a href=\"#th-href\" class=\"headerlink\" title=\"th:href\"></a>th:href</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a th:href=&quot;@&#123;/admin/publicInfo/info(id=$&#123;publicInfo.id&#125;)&#125;&quot; target=&quot;iframe&quot; th:text=&quot;#&#123;admin.menu.publicManage.name&#125;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-each\"><a href=\"#th-each\" class=\"headerlink\" title=\"th:each\"></a>th:each</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr th:each=&quot;admin:$&#123;page.content&#125;&quot;&gt;</span><br><span class=\"line\">\t\t\t  &lt;td th:text=&quot;$&#123;admin.username&#125;&quot;&gt;&lt;/td&gt;</span><br><span class=\"line\">\t      &lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"格式化日期\"><a href=\"#格式化日期\" class=\"headerlink\" title=\"格式化日期\"></a>格式化日期</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:text=&quot;$&#123;#calendars.format(admin.createDate,&apos;yyyy年MM月dd日&apos;)&#125;&quot;&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"th-if\"><a href=\"#th-if\" class=\"headerlink\" title=\"th:if\"></a>th:if</h1><p>•    单个条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:if=&quot;$&#123;admin.username&#125;==&apos;admin&apos;&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ids&quot; th:value=&quot;$&#123;admin.id&#125;&quot; disabled=&quot;disabled&quot;/&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>•    并且条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td th:if=&quot;$&#123;session.username&#125;!=&apos;admin&apos; and $&#123;admin.username&#125;==$&#123;session.username&#125;&quot;&gt;</span><br><span class=\"line\">&lt;a th:href=&quot;@&#123;initEdit(id=$&#123;admin.id&#125;)&#125;&quot; th:text=&quot;#&#123;admin.menu.admin.edit&#125;&quot;&gt;</span><br><span class=\"line\">&lt;/a&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker -mysql","author":"wen","date":"2018-05-08T09:28:00.000Z","_content":"\n参考：\n[安装docker](/2018/05/08/（四）安装docker（root用户）/)\n\n# 下载镜像\n```\ndocker pull mysql\n```\n# 运行镜像\n```\ndocker run --name mysql -p 3306:3306 -v /app/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n# 进入mysql进行设置\n```\ndocker ps -a  --获取mysql 容器的id\n\ndocker exec -it 容器id sh\n```\n\n# 进入Mysql后登录mysql\n```\nmysql -uroot -proot\n\n若报root@localhost,请试试mysql -uroot\n```\n# 创建数据库用户\n```\ncreate USER springcloud IDENTIFIED WITH mysql_native_password BY '123456';\n\ngrant all privileges on *.* to springcloud;\n\ncreate database springclouddb\n```\n\n# 报错信息\n若show databases 报错 \n若是 缺没有此mysql.infoschema用户\n则执行以下sql\n```\ncreate USER 'mysql.infoschema' IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER 'mysql.session' IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER 'mysql.sys'  IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER springcloud IDENTIFIED WITH mysql_native_password BY '123456';\n\ngrant all privileges on *.* to 'mysql.infoschema';\n\ngrant all privileges on *.* to 'mysql.session';\n\ngrant all privileges on *.* to 'mysql.sys';\n```","source":"_posts/ocker-mysql.md","raw":"title: docker -mysql\nauthor: wen\ntags:\n  - docker\n  - mysql\ncategories: []\ndate: 2018-05-08 17:28:00\n---\n\n参考：\n[安装docker](/2018/05/08/（四）安装docker（root用户）/)\n\n# 下载镜像\n```\ndocker pull mysql\n```\n# 运行镜像\n```\ndocker run --name mysql -p 3306:3306 -v /app/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n# 进入mysql进行设置\n```\ndocker ps -a  --获取mysql 容器的id\n\ndocker exec -it 容器id sh\n```\n\n# 进入Mysql后登录mysql\n```\nmysql -uroot -proot\n\n若报root@localhost,请试试mysql -uroot\n```\n# 创建数据库用户\n```\ncreate USER springcloud IDENTIFIED WITH mysql_native_password BY '123456';\n\ngrant all privileges on *.* to springcloud;\n\ncreate database springclouddb\n```\n\n# 报错信息\n若show databases 报错 \n若是 缺没有此mysql.infoschema用户\n则执行以下sql\n```\ncreate USER 'mysql.infoschema' IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER 'mysql.session' IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER 'mysql.sys'  IDENTIFIED WITH mysql_native_password BY '123456';\n\ncreate USER springcloud IDENTIFIED WITH mysql_native_password BY '123456';\n\ngrant all privileges on *.* to 'mysql.infoschema';\n\ngrant all privileges on *.* to 'mysql.session';\n\ngrant all privileges on *.* to 'mysql.sys';\n```","slug":"ocker-mysql","published":1,"updated":"2018-05-08T09:34:24.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzj2000pxwjltd90fijc","content":"<p>参考：<br><a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker</a></p>\n<h1 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql -p 3306:3306 -v /app/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入mysql进行设置\"><a href=\"#进入mysql进行设置\" class=\"headerlink\" title=\"进入mysql进行设置\"></a>进入mysql进行设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a  --获取mysql 容器的id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it 容器id sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入Mysql后登录mysql\"><a href=\"#进入Mysql后登录mysql\" class=\"headerlink\" title=\"进入Mysql后登录mysql\"></a>进入Mysql后登录mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -proot</span><br><span class=\"line\"></span><br><span class=\"line\">若报root@localhost,请试试mysql -uroot</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建数据库用户\"><a href=\"#创建数据库用户\" class=\"headerlink\" title=\"创建数据库用户\"></a>创建数据库用户</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create USER springcloud IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\">create database springclouddb</span><br></pre></td></tr></table></figure>\n<h1 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h1><p>若show databases 报错<br>若是 缺没有此mysql.infoschema用户<br>则执行以下sql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create USER &apos;mysql.infoschema&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER &apos;mysql.session&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER &apos;mysql.sys&apos;  IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER springcloud IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.infoschema&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.session&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.sys&apos;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<br><a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker</a></p>\n<h1 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql -p 3306:3306 -v /app/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入mysql进行设置\"><a href=\"#进入mysql进行设置\" class=\"headerlink\" title=\"进入mysql进行设置\"></a>进入mysql进行设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a  --获取mysql 容器的id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it 容器id sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入Mysql后登录mysql\"><a href=\"#进入Mysql后登录mysql\" class=\"headerlink\" title=\"进入Mysql后登录mysql\"></a>进入Mysql后登录mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -proot</span><br><span class=\"line\"></span><br><span class=\"line\">若报root@localhost,请试试mysql -uroot</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建数据库用户\"><a href=\"#创建数据库用户\" class=\"headerlink\" title=\"创建数据库用户\"></a>创建数据库用户</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create USER springcloud IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\">create database springclouddb</span><br></pre></td></tr></table></figure>\n<h1 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h1><p>若show databases 报错<br>若是 缺没有此mysql.infoschema用户<br>则执行以下sql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create USER &apos;mysql.infoschema&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER &apos;mysql.session&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER &apos;mysql.sys&apos;  IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">create USER springcloud IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.infoschema&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.session&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on *.* to &apos;mysql.sys&apos;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"spring cloud+docker+git+maven+jenkins+Kubernetes 目录","author":"wen","date":"2018-05-08T09:45:58.000Z","_content":"图：\n![logo](ring-cloud-docker-git-maven-jenkins-Kubernetes-目录/11278290-faac5fbb39c76314.png)","source":"_posts/ring-cloud-docker-git-maven-jenkins-Kubernetes-目录.md","raw":"title: spring cloud+docker+git+maven+jenkins+Kubernetes 目录\nauthor: wen\ndate: 2018-05-08 17:45:58\ntags:\n---\n图：\n![logo](ring-cloud-docker-git-maven-jenkins-Kubernetes-目录/11278290-faac5fbb39c76314.png)","slug":"ring-cloud-docker-git-maven-jenkins-Kubernetes-目录","published":1,"updated":"2018-05-08T09:57:40.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzj7000txwjlbqpp9l6v","content":"<p>图：<br><img src=\"/2018/05/08/ring-cloud-docker-git-maven-jenkins-Kubernetes-目录/11278290-faac5fbb39c76314.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>图：<br><img src=\"/2018/05/08/ring-cloud-docker-git-maven-jenkins-Kubernetes-目录/11278290-faac5fbb39c76314.png\" alt=\"logo\"></p>\n"},{"title":"九 linux配置java和maven","author":"wen","date":"2018-05-11T14:46:00.000Z","_content":"安装链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n# 安装java\n1 从http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 页面下载jdk-8u171-linux-x64.tar.gz\n2 上传文件至linux服务器 /app\n3 在/app目录 执行\n```\ntar -xvf jdk-8u171-linux-x64.tar.gz\n```\n\n# 安装maven:\n1 在linux里/app执行：wget https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz \n2 在/app目录 执行\n```\ntar -xvf  apache-maven-3.2.3-bin.tar.gz\n```\n3 在/app/apache-maven-3.2.3/bin 目录执行\n```\nchmod +x ./mvn\n```\n\n# 配置环境(root用户)\n```\nvi /etc/profile\n```\n配置maven 和java环境\n```\nexport MAVEN_HOME=/app/apache-maven-3.2.3\nexport MAVEN_HOME\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport JAVA_HOME=/app/jdk1.8.0_171\nexport JAVA_HOME\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n保存完成\n```\nsource /etc/profile\n```\n\n# 验证\n```\njava -version\n```\n\n```\nmvn -v\n```","source":"_posts/九-linux配置java和maven.md","raw":"title: 九 linux配置java和maven\nauthor: wen\ntags:\n  - java\n  - maven\ncategories:\n  - linux\ndate: 2018-05-11 22:46:00\n---\n安装链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n# 安装java\n1 从http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 页面下载jdk-8u171-linux-x64.tar.gz\n2 上传文件至linux服务器 /app\n3 在/app目录 执行\n```\ntar -xvf jdk-8u171-linux-x64.tar.gz\n```\n\n# 安装maven:\n1 在linux里/app执行：wget https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz \n2 在/app目录 执行\n```\ntar -xvf  apache-maven-3.2.3-bin.tar.gz\n```\n3 在/app/apache-maven-3.2.3/bin 目录执行\n```\nchmod +x ./mvn\n```\n\n# 配置环境(root用户)\n```\nvi /etc/profile\n```\n配置maven 和java环境\n```\nexport MAVEN_HOME=/app/apache-maven-3.2.3\nexport MAVEN_HOME\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport JAVA_HOME=/app/jdk1.8.0_171\nexport JAVA_HOME\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n保存完成\n```\nsource /etc/profile\n```\n\n# 验证\n```\njava -version\n```\n\n```\nmvn -v\n```","slug":"九-linux配置java和maven","published":1,"updated":"2018-05-11T14:59:51.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzjc000vxwjl1u7pl49p","content":"<p>安装链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<h1 id=\"安装java\"><a href=\"#安装java\" class=\"headerlink\" title=\"安装java\"></a>安装java</h1><p>1 从<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> 页面下载jdk-8u171-linux-x64.tar.gz<br>2 上传文件至linux服务器 /app<br>3 在/app目录 执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven:\"></a>安装maven:</h1><p>1 在linux里/app执行：wget <a href=\"https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz</a><br>2 在/app目录 执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf  apache-maven-3.2.3-bin.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>3 在/app/apache-maven-3.2.3/bin 目录执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./mvn</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置环境-root用户\"><a href=\"#配置环境-root用户\" class=\"headerlink\" title=\"配置环境(root用户)\"></a>配置环境(root用户)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>配置maven 和java环境<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/app/apache-maven-3.2.3</span><br><span class=\"line\">export MAVEN_HOME</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export JAVA_HOME=/app/jdk1.8.0_171</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>保存完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>安装链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<h1 id=\"安装java\"><a href=\"#安装java\" class=\"headerlink\" title=\"安装java\"></a>安装java</h1><p>1 从<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> 页面下载jdk-8u171-linux-x64.tar.gz<br>2 上传文件至linux服务器 /app<br>3 在/app目录 执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven:\"></a>安装maven:</h1><p>1 在linux里/app执行：wget <a href=\"https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">https://archive.apache.org/dist/maven/maven-3/3.2.3/binaries/apache-maven-3.2.3-bin.tar.gz</a><br>2 在/app目录 执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf  apache-maven-3.2.3-bin.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>3 在/app/apache-maven-3.2.3/bin 目录执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./mvn</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置环境-root用户\"><a href=\"#配置环境-root用户\" class=\"headerlink\" title=\"配置环境(root用户)\"></a>配置环境(root用户)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>配置maven 和java环境<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/app/apache-maven-3.2.3</span><br><span class=\"line\">export MAVEN_HOME</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export JAVA_HOME=/app/jdk1.8.0_171</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>保存完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>"},{"title":"Notepad++文本比较插件：Compare","author":"wen","date":"2017-03-06T07:26:00.000Z","_content":"<Excerpt in index | 首页摘要>\n对程序员来说，文本比较就是代码的比较，对比新老两个版本的代码的差异是经常需要做的事情，尤其是多人开发的代码尤甚，今天，一个转给了同事，然后同事请小长假，代码又回来了，首先就是要了解代码已经修改了哪些地方。<!-- more -->\n<The rest of contents | 余下全文>\n承认，现在的人越来越懒，要去下载一款专门的代码比较器太不情愿了，如果现有的工具有这个功能就好了。这还真有，我一直是用的文本编辑器Notepad++就有个插件“Compare”，可以实现对文本（代码）的比较，而且一点也不亚于专用软件。\n\nCompare插件的安装很简单，在Notepad++的“插件”菜单中选择“Plugin Manager”-》“show Plugin Manager”，然后再“Available”选项卡内找到“Compare”插件，打勾，按Install。理论上就自动下载安装完毕了。\n不过现实中经常会出现“Installation of **** failed”这样的错误，这是因为在国内访问外国网站的时候链接被重置的缘故，解决方法一：多试几次，通常像sourceforge这样的网站是间歇性不能访问，多试几下就可以了，或者在下方的详细那里复制出下载地址，然后自行通过其他方法下载该插件，然后解压到Notepad++的根目录下的plugins目录即可。\n\n\n比较的效果还是不错的。\n\n为方便大家，把该插件[链接](https://github.com/smallwenzi/software)共享给大家，下载该“ComparePlugin.dll”文件后，复制到Notepad++安装目录下的\\plugins目录即可","source":"_posts/tepad-compare.md","raw":"title: Notepad++文本比较插件：Compare\nauthor: wen\ntags:\n  - notepad\ncategories: []\ndate: 2017-03-06 15:26:00\n---\n<Excerpt in index | 首页摘要>\n对程序员来说，文本比较就是代码的比较，对比新老两个版本的代码的差异是经常需要做的事情，尤其是多人开发的代码尤甚，今天，一个转给了同事，然后同事请小长假，代码又回来了，首先就是要了解代码已经修改了哪些地方。<!-- more -->\n<The rest of contents | 余下全文>\n承认，现在的人越来越懒，要去下载一款专门的代码比较器太不情愿了，如果现有的工具有这个功能就好了。这还真有，我一直是用的文本编辑器Notepad++就有个插件“Compare”，可以实现对文本（代码）的比较，而且一点也不亚于专用软件。\n\nCompare插件的安装很简单，在Notepad++的“插件”菜单中选择“Plugin Manager”-》“show Plugin Manager”，然后再“Available”选项卡内找到“Compare”插件，打勾，按Install。理论上就自动下载安装完毕了。\n不过现实中经常会出现“Installation of **** failed”这样的错误，这是因为在国内访问外国网站的时候链接被重置的缘故，解决方法一：多试几次，通常像sourceforge这样的网站是间歇性不能访问，多试几下就可以了，或者在下方的详细那里复制出下载地址，然后自行通过其他方法下载该插件，然后解压到Notepad++的根目录下的plugins目录即可。\n\n\n比较的效果还是不错的。\n\n为方便大家，把该插件[链接](https://github.com/smallwenzi/software)共享给大家，下载该“ComparePlugin.dll”文件后，复制到Notepad++安装目录下的\\plugins目录即可","slug":"tepad-compare","published":1,"updated":"2018-05-08T06:13:18.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzjh000zxwjljfa95dia","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>对程序员来说，文本比较就是代码的比较，对比新老两个版本的代码的差异是经常需要做的事情，尤其是多人开发的代码尤甚，今天，一个转给了同事，然后同事请小长假，代码又回来了，首先就是要了解代码已经修改了哪些地方。<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"><br>承认，现在的人越来越懒，要去下载一款专门的代码比较器太不情愿了，如果现有的工具有这个功能就好了。这还真有，我一直是用的文本编辑器Notepad++就有个插件“Compare”，可以实现对文本（代码）的比较，而且一点也不亚于专用软件。</the></p>\n<p>Compare插件的安装很简单，在Notepad++的“插件”菜单中选择“Plugin Manager”-》“show Plugin Manager”，然后再“Available”选项卡内找到“Compare”插件，打勾，按Install。理论上就自动下载安装完毕了。<br>不过现实中经常会出现“Installation of <em>**</em> failed”这样的错误，这是因为在国内访问外国网站的时候链接被重置的缘故，解决方法一：多试几次，通常像sourceforge这样的网站是间歇性不能访问，多试几下就可以了，或者在下方的详细那里复制出下载地址，然后自行通过其他方法下载该插件，然后解压到Notepad++的根目录下的plugins目录即可。</p>\n<p>比较的效果还是不错的。</p>\n<p>为方便大家，把该插件<a href=\"https://github.com/smallwenzi/software\" target=\"_blank\" rel=\"noopener\">链接</a>共享给大家，下载该“ComparePlugin.dll”文件后，复制到Notepad++安装目录下的\\plugins目录即可</p>\n","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>对程序员来说，文本比较就是代码的比较，对比新老两个版本的代码的差异是经常需要做的事情，尤其是多人开发的代码尤甚，今天，一个转给了同事，然后同事请小长假，代码又回来了，首先就是要了解代码已经修改了哪些地方。</excerpt></p>","more":"<p></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"><br>承认，现在的人越来越懒，要去下载一款专门的代码比较器太不情愿了，如果现有的工具有这个功能就好了。这还真有，我一直是用的文本编辑器Notepad++就有个插件“Compare”，可以实现对文本（代码）的比较，而且一点也不亚于专用软件。</the></p>\n<p>Compare插件的安装很简单，在Notepad++的“插件”菜单中选择“Plugin Manager”-》“show Plugin Manager”，然后再“Available”选项卡内找到“Compare”插件，打勾，按Install。理论上就自动下载安装完毕了。<br>不过现实中经常会出现“Installation of <em>**</em> failed”这样的错误，这是因为在国内访问外国网站的时候链接被重置的缘故，解决方法一：多试几次，通常像sourceforge这样的网站是间歇性不能访问，多试几下就可以了，或者在下方的详细那里复制出下载地址，然后自行通过其他方法下载该插件，然后解压到Notepad++的根目录下的plugins目录即可。</p>\n<p>比较的效果还是不错的。</p>\n<p>为方便大家，把该插件<a href=\"https://github.com/smallwenzi/software\" target=\"_blank\" rel=\"noopener\">链接</a>共享给大家，下载该“ComparePlugin.dll”文件后，复制到Notepad++安装目录下的\\plugins目录即可</p>"},{"title":"在windows下atom上搭建PlantUML书写环境","author":"wen","date":"2018-10-14T07:36:00.000Z","_content":"PlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。\n# 工具准备\n* atom\n* graphviz\n[Graphviz](http://www.graphviz.org/)是一款开源图形可视化软件。Atom的PlantUML插件使用graphviz将PlantUML语言绘制成相应的图形。\n# 插件安装\ngithub上已经有开发者为atom开发了PlantUML相关的插件。这里推荐以下两个插件\n* language-plantuml\n* plantuml-viewer\n其中language-plantuml提供了PlantUML语法高亮支持，plantuml-viewer负责把PlantUML语句转化为对应的UML图。\n```\n有很多博客使用plantuml-preview。本人试用了这两款插件，发现都能很好的支持PlantUML。\n但是plantuml-viewer更有优势：plantuml-viewer能够实时显示PlantUML语言描述的图形，\n并且可以通过鼠标滚轮流畅的调节图形大小。此外，plantuml-preview需要显式的配置java和plantuml.jar，\n而plantuml-viewer不需要，因此我推荐plantuml-viewer\n```\n安装方法很简单：atom下 File -> Settings -> Install \n![logo](windows下atom上搭建PlantUML书写环境/plantuml_plugin.png)\n\n# 配置插件\nplantuml-viewer按如下配置 \n![logo](windows下atom上搭建PlantUML书写环境/plantuml_viewer_setting.png)\n* Charset配置成utf-8在生成图形的时候中文不会乱码\n* graphviz从官网下载后安装到自定义位置，在plant-viewer中指定dot.exe路径\n\n# 验证\n用PlantUML生成工厂模式UML\n```\n@startuml\nskinparam classAttributeIconSize 0\nclass Product\nclass ConcreteProduct\nclass Creator {\n  + {abstract} FactoryMethod()\n}\nclass ConcreteCreator {\n  + FactoryMethod()\n}\nProduct <|-- ConcreteProduct\nCreator <|-- ConcreteCreator\nConcreteProduct <.l. ConcreteCreator\nnote left of Product: 定义工厂方法所创建的对象的接口\nnote right of Creator: 声明工厂方法，该方法返回一个Product类型的对象\nnote left of ConcreteProduct: 具体产品，实现了Product的接口\nnote right of ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例\n@enduml\n```\n效果图\n![logo](windows下atom上搭建PlantUML书写环境/3.png)\n\n[plantuml语法](http://plantuml.com/)\n","source":"_posts/windows下atom上搭建PlantUML书写环境.md","raw":"title: 在windows下atom上搭建PlantUML书写环境\nauthor: wen\ntags:\n  - plantuml\n  - atom\ncategories:\n  - atom\ndate: 2018-10-14 15:36:00\n---\nPlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。\n# 工具准备\n* atom\n* graphviz\n[Graphviz](http://www.graphviz.org/)是一款开源图形可视化软件。Atom的PlantUML插件使用graphviz将PlantUML语言绘制成相应的图形。\n# 插件安装\ngithub上已经有开发者为atom开发了PlantUML相关的插件。这里推荐以下两个插件\n* language-plantuml\n* plantuml-viewer\n其中language-plantuml提供了PlantUML语法高亮支持，plantuml-viewer负责把PlantUML语句转化为对应的UML图。\n```\n有很多博客使用plantuml-preview。本人试用了这两款插件，发现都能很好的支持PlantUML。\n但是plantuml-viewer更有优势：plantuml-viewer能够实时显示PlantUML语言描述的图形，\n并且可以通过鼠标滚轮流畅的调节图形大小。此外，plantuml-preview需要显式的配置java和plantuml.jar，\n而plantuml-viewer不需要，因此我推荐plantuml-viewer\n```\n安装方法很简单：atom下 File -> Settings -> Install \n![logo](windows下atom上搭建PlantUML书写环境/plantuml_plugin.png)\n\n# 配置插件\nplantuml-viewer按如下配置 \n![logo](windows下atom上搭建PlantUML书写环境/plantuml_viewer_setting.png)\n* Charset配置成utf-8在生成图形的时候中文不会乱码\n* graphviz从官网下载后安装到自定义位置，在plant-viewer中指定dot.exe路径\n\n# 验证\n用PlantUML生成工厂模式UML\n```\n@startuml\nskinparam classAttributeIconSize 0\nclass Product\nclass ConcreteProduct\nclass Creator {\n  + {abstract} FactoryMethod()\n}\nclass ConcreteCreator {\n  + FactoryMethod()\n}\nProduct <|-- ConcreteProduct\nCreator <|-- ConcreteCreator\nConcreteProduct <.l. ConcreteCreator\nnote left of Product: 定义工厂方法所创建的对象的接口\nnote right of Creator: 声明工厂方法，该方法返回一个Product类型的对象\nnote left of ConcreteProduct: 具体产品，实现了Product的接口\nnote right of ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例\n@enduml\n```\n效果图\n![logo](windows下atom上搭建PlantUML书写环境/3.png)\n\n[plantuml语法](http://plantuml.com/)\n","slug":"windows下atom上搭建PlantUML书写环境","published":1,"updated":"2018-10-14T07:52:24.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzjl0011xwjll36tvtcf","content":"<p>PlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。</p>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><ul>\n<li>atom</li>\n<li>graphviz<br><a href=\"http://www.graphviz.org/\" target=\"_blank\" rel=\"noopener\">Graphviz</a>是一款开源图形可视化软件。Atom的PlantUML插件使用graphviz将PlantUML语言绘制成相应的图形。<h1 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h1>github上已经有开发者为atom开发了PlantUML相关的插件。这里推荐以下两个插件</li>\n<li>language-plantuml</li>\n<li>plantuml-viewer<br>其中language-plantuml提供了PlantUML语法高亮支持，plantuml-viewer负责把PlantUML语句转化为对应的UML图。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有很多博客使用plantuml-preview。本人试用了这两款插件，发现都能很好的支持PlantUML。</span><br><span class=\"line\">但是plantuml-viewer更有优势：plantuml-viewer能够实时显示PlantUML语言描述的图形，</span><br><span class=\"line\">并且可以通过鼠标滚轮流畅的调节图形大小。此外，plantuml-preview需要显式的配置java和plantuml.jar，</span><br><span class=\"line\">而plantuml-viewer不需要，因此我推荐plantuml-viewer</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装方法很简单：atom下 File -&gt; Settings -&gt; Install<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_plugin.png\" alt=\"logo\"></p>\n<h1 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h1><p>plantuml-viewer按如下配置<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_viewer_setting.png\" alt=\"logo\"></p>\n<ul>\n<li>Charset配置成utf-8在生成图形的时候中文不会乱码</li>\n<li>graphviz从官网下载后安装到自定义位置，在plant-viewer中指定dot.exe路径</li>\n</ul>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>用PlantUML生成工厂模式UML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">skinparam classAttributeIconSize 0</span><br><span class=\"line\">class Product</span><br><span class=\"line\">class ConcreteProduct</span><br><span class=\"line\">class Creator &#123;</span><br><span class=\"line\">  + &#123;abstract&#125; FactoryMethod()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ConcreteCreator &#123;</span><br><span class=\"line\">  + FactoryMethod()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Product &lt;|-- ConcreteProduct</span><br><span class=\"line\">Creator &lt;|-- ConcreteCreator</span><br><span class=\"line\">ConcreteProduct &lt;.l. ConcreteCreator</span><br><span class=\"line\">note left of Product: 定义工厂方法所创建的对象的接口</span><br><span class=\"line\">note right of Creator: 声明工厂方法，该方法返回一个Product类型的对象</span><br><span class=\"line\">note left of ConcreteProduct: 具体产品，实现了Product的接口</span><br><span class=\"line\">note right of ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/3.png\" alt=\"logo\"></p>\n<p><a href=\"http://plantuml.com/\" target=\"_blank\" rel=\"noopener\">plantuml语法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>PlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。</p>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><ul>\n<li>atom</li>\n<li>graphviz<br><a href=\"http://www.graphviz.org/\" target=\"_blank\" rel=\"noopener\">Graphviz</a>是一款开源图形可视化软件。Atom的PlantUML插件使用graphviz将PlantUML语言绘制成相应的图形。<h1 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h1>github上已经有开发者为atom开发了PlantUML相关的插件。这里推荐以下两个插件</li>\n<li>language-plantuml</li>\n<li>plantuml-viewer<br>其中language-plantuml提供了PlantUML语法高亮支持，plantuml-viewer负责把PlantUML语句转化为对应的UML图。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有很多博客使用plantuml-preview。本人试用了这两款插件，发现都能很好的支持PlantUML。</span><br><span class=\"line\">但是plantuml-viewer更有优势：plantuml-viewer能够实时显示PlantUML语言描述的图形，</span><br><span class=\"line\">并且可以通过鼠标滚轮流畅的调节图形大小。此外，plantuml-preview需要显式的配置java和plantuml.jar，</span><br><span class=\"line\">而plantuml-viewer不需要，因此我推荐plantuml-viewer</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装方法很简单：atom下 File -&gt; Settings -&gt; Install<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_plugin.png\" alt=\"logo\"></p>\n<h1 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h1><p>plantuml-viewer按如下配置<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_viewer_setting.png\" alt=\"logo\"></p>\n<ul>\n<li>Charset配置成utf-8在生成图形的时候中文不会乱码</li>\n<li>graphviz从官网下载后安装到自定义位置，在plant-viewer中指定dot.exe路径</li>\n</ul>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>用PlantUML生成工厂模式UML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">skinparam classAttributeIconSize 0</span><br><span class=\"line\">class Product</span><br><span class=\"line\">class ConcreteProduct</span><br><span class=\"line\">class Creator &#123;</span><br><span class=\"line\">  + &#123;abstract&#125; FactoryMethod()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ConcreteCreator &#123;</span><br><span class=\"line\">  + FactoryMethod()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Product &lt;|-- ConcreteProduct</span><br><span class=\"line\">Creator &lt;|-- ConcreteCreator</span><br><span class=\"line\">ConcreteProduct &lt;.l. ConcreteCreator</span><br><span class=\"line\">note left of Product: 定义工厂方法所创建的对象的接口</span><br><span class=\"line\">note right of Creator: 声明工厂方法，该方法返回一个Product类型的对象</span><br><span class=\"line\">note left of ConcreteProduct: 具体产品，实现了Product的接口</span><br><span class=\"line\">note right of ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/2018/10/14/windows下atom上搭建PlantUML书写环境/3.png\" alt=\"logo\"></p>\n<p><a href=\"http://plantuml.com/\" target=\"_blank\" rel=\"noopener\">plantuml语法</a></p>\n"},{"title":"（三）linux 安装 GIT（root用户）","author":"wen","date":"2018-05-08T07:52:00.000Z","_content":"链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n [升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n# 安装GIT（root用户）\nyum install git\n\n# 1 创建用户\n```\n>useradd test\n```\n\n# 2 设置密码\n```\n>passwd test\n```\n\n# 3 创建目录\n```\n>mkdir -p /repo\n```\n# 4 初始化git 库\n```\n>git init --shared /repo/code\n```\n# 5 进入目录：\n```\n>cd /repo/code\n```\n# 6 git 忽略设置\n```\n>git config receive.denyCurrentBranch\"ignore\"\n```\n# 7 设置 邮件\n```\n>git config --global user.email  123@126.com\n```\n# 8 设置 用户名\n```\n>git config --global user.name \"test\"\n```\n# 9 添加README.md\n```\n>touch ./Readme.md\n```\n\n# 10 git add文件\n```\n>git add ./Readme.md\n```\n\n# 11 提交代码\n```\n>git commit -m \"init\"./Readme.md\n```\n\n# 12 设置权限\n```\n> chmod -R og+w /repoE\n```\n\n# 13 下载代码\n```\ngit clone ssh://test@192.168.137.8/repo/code\n```\n# 14 添加文件\n```\ngit add\n```\n\n# 15 提交文件\n```\ngit commit \n```\n# 16 推送代码\n```\ngit push origin master\n```","source":"_posts/三）linux-安装-GIT（root用户）.md","raw":"title: （三）linux 安装 GIT（root用户）\nauthor: wen\ntags: []\ncategories:\n  - git\ndate: 2018-05-08 15:52:00\n---\n链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n [升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n# 安装GIT（root用户）\nyum install git\n\n# 1 创建用户\n```\n>useradd test\n```\n\n# 2 设置密码\n```\n>passwd test\n```\n\n# 3 创建目录\n```\n>mkdir -p /repo\n```\n# 4 初始化git 库\n```\n>git init --shared /repo/code\n```\n# 5 进入目录：\n```\n>cd /repo/code\n```\n# 6 git 忽略设置\n```\n>git config receive.denyCurrentBranch\"ignore\"\n```\n# 7 设置 邮件\n```\n>git config --global user.email  123@126.com\n```\n# 8 设置 用户名\n```\n>git config --global user.name \"test\"\n```\n# 9 添加README.md\n```\n>touch ./Readme.md\n```\n\n# 10 git add文件\n```\n>git add ./Readme.md\n```\n\n# 11 提交代码\n```\n>git commit -m \"init\"./Readme.md\n```\n\n# 12 设置权限\n```\n> chmod -R og+w /repoE\n```\n\n# 13 下载代码\n```\ngit clone ssh://test@192.168.137.8/repo/code\n```\n# 14 添加文件\n```\ngit add\n```\n\n# 15 提交文件\n```\ngit commit \n```\n# 16 推送代码\n```\ngit push origin master\n```","slug":"三）linux-安装-GIT（root用户）","published":1,"updated":"2018-06-08T13:30:48.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzju0015xwjl2lrr7wsa","content":"<p>链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p> <a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"安装GIT（root用户）\"><a href=\"#安装GIT（root用户）\" class=\"headerlink\" title=\"安装GIT（root用户）\"></a>安装GIT（root用户）</h1><p>yum install git</p>\n<h1 id=\"1-创建用户\"><a href=\"#1-创建用户\" class=\"headerlink\" title=\"1 创建用户\"></a>1 创建用户</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;useradd test</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-设置密码\"><a href=\"#2-设置密码\" class=\"headerlink\" title=\"2 设置密码\"></a>2 设置密码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;passwd test</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-创建目录\"><a href=\"#3-创建目录\" class=\"headerlink\" title=\"3 创建目录\"></a>3 创建目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;mkdir -p /repo</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-初始化git-库\"><a href=\"#4-初始化git-库\" class=\"headerlink\" title=\"4 初始化git 库\"></a>4 初始化git 库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git init --shared /repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-进入目录：\"><a href=\"#5-进入目录：\" class=\"headerlink\" title=\"5 进入目录：\"></a>5 进入目录：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cd /repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-git-忽略设置\"><a href=\"#6-git-忽略设置\" class=\"headerlink\" title=\"6 git 忽略设置\"></a>6 git 忽略设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config receive.denyCurrentBranch&quot;ignore&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-设置-邮件\"><a href=\"#7-设置-邮件\" class=\"headerlink\" title=\"7 设置 邮件\"></a>7 设置 邮件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config --global user.email  123@126.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-设置-用户名\"><a href=\"#8-设置-用户名\" class=\"headerlink\" title=\"8 设置 用户名\"></a>8 设置 用户名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config --global user.name &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-添加README-md\"><a href=\"#9-添加README-md\" class=\"headerlink\" title=\"9 添加README.md\"></a>9 添加README.md</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;touch ./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-git-add文件\"><a href=\"#10-git-add文件\" class=\"headerlink\" title=\"10 git add文件\"></a>10 git add文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git add ./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-提交代码\"><a href=\"#11-提交代码\" class=\"headerlink\" title=\"11 提交代码\"></a>11 提交代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git commit -m &quot;init&quot;./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-设置权限\"><a href=\"#12-设置权限\" class=\"headerlink\" title=\"12 设置权限\"></a>12 设置权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; chmod -R og+w /repoE</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-下载代码\"><a href=\"#13-下载代码\" class=\"headerlink\" title=\"13 下载代码\"></a>13 下载代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://test@192.168.137.8/repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-添加文件\"><a href=\"#14-添加文件\" class=\"headerlink\" title=\"14 添加文件\"></a>14 添加文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-提交文件\"><a href=\"#15-提交文件\" class=\"headerlink\" title=\"15 提交文件\"></a>15 提交文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-推送代码\"><a href=\"#16-推送代码\" class=\"headerlink\" title=\"16 推送代码\"></a>16 推送代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p> <a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"安装GIT（root用户）\"><a href=\"#安装GIT（root用户）\" class=\"headerlink\" title=\"安装GIT（root用户）\"></a>安装GIT（root用户）</h1><p>yum install git</p>\n<h1 id=\"1-创建用户\"><a href=\"#1-创建用户\" class=\"headerlink\" title=\"1 创建用户\"></a>1 创建用户</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;useradd test</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-设置密码\"><a href=\"#2-设置密码\" class=\"headerlink\" title=\"2 设置密码\"></a>2 设置密码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;passwd test</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-创建目录\"><a href=\"#3-创建目录\" class=\"headerlink\" title=\"3 创建目录\"></a>3 创建目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;mkdir -p /repo</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-初始化git-库\"><a href=\"#4-初始化git-库\" class=\"headerlink\" title=\"4 初始化git 库\"></a>4 初始化git 库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git init --shared /repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-进入目录：\"><a href=\"#5-进入目录：\" class=\"headerlink\" title=\"5 进入目录：\"></a>5 进入目录：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cd /repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-git-忽略设置\"><a href=\"#6-git-忽略设置\" class=\"headerlink\" title=\"6 git 忽略设置\"></a>6 git 忽略设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config receive.denyCurrentBranch&quot;ignore&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-设置-邮件\"><a href=\"#7-设置-邮件\" class=\"headerlink\" title=\"7 设置 邮件\"></a>7 设置 邮件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config --global user.email  123@126.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-设置-用户名\"><a href=\"#8-设置-用户名\" class=\"headerlink\" title=\"8 设置 用户名\"></a>8 设置 用户名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git config --global user.name &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-添加README-md\"><a href=\"#9-添加README-md\" class=\"headerlink\" title=\"9 添加README.md\"></a>9 添加README.md</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;touch ./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-git-add文件\"><a href=\"#10-git-add文件\" class=\"headerlink\" title=\"10 git add文件\"></a>10 git add文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git add ./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-提交代码\"><a href=\"#11-提交代码\" class=\"headerlink\" title=\"11 提交代码\"></a>11 提交代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git commit -m &quot;init&quot;./Readme.md</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-设置权限\"><a href=\"#12-设置权限\" class=\"headerlink\" title=\"12 设置权限\"></a>12 设置权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; chmod -R og+w /repoE</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-下载代码\"><a href=\"#13-下载代码\" class=\"headerlink\" title=\"13 下载代码\"></a>13 下载代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://test@192.168.137.8/repo/code</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-添加文件\"><a href=\"#14-添加文件\" class=\"headerlink\" title=\"14 添加文件\"></a>14 添加文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-提交文件\"><a href=\"#15-提交文件\" class=\"headerlink\" title=\"15 提交文件\"></a>15 提交文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-推送代码\"><a href=\"#16-推送代码\" class=\"headerlink\" title=\"16 推送代码\"></a>16 推送代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>"},{"title":"那些提升开发人员工作效率的在线工具","author":"wen","date":"2018-05-08T06:20:00.000Z","_content":"作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。\n\nHollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。\n\n# Java源代码搜索 #\nhttp://grepcode.com/\n\nGrepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n\n# 开源代码及文档搜索 #\nhttps://searchcode.com/\n\nSearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。\n\n# 电子书搜索 #\nhttps://www.jiumodiary.com/\n\n鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。\n\n# 网盘资源搜索  #\nhttp://pansou.com/\n\n这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。\n\n# 无版权图片搜索\nhttps://unsplash.com\n\n不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。\n\nunsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。\n\n# 在线UML制图\nhttps://www.processon.com/\n\nProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等。\n\n# Json在线验证及格式化\nhttps://www.json.cn/\n\n我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。\n\nDiff Check\nhttps://www.diffchecker.com/\n\n使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。\n\n# MarkDown编辑器\nMaHua ：http://mahua.jser.me/\n\n马克飞象 ：https://maxiang.io/\n\nCmd ：https://www.zybuluo.com/mdeditor\n\n以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown\n\n# Maven依赖查询\nhttp://mvnrepository.com/\n\nmvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。\n\n# 在线代码运行\nhttps://tool.lu/coderunner/\n\ncoderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。\n\n# 在线翻译\nGoogle翻译 ：https://translate.google.cn/\n\n百度翻译 ：http://fanyi.baidu.com/\n\n有道翻译 ：http://fanyi.youdao.com/\n\n说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。\n\n不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。\n\n# SQL自动生成Java代码\nhttp://www.autojcode.com/code/sql2class.jsp\n\nAutoJCode可以从sql的建表语句中生成一个DO类。\n\n# json生成java类\nhttp://www.bejson.com/json2javapojo\n\njson是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n\n# SQL美化/格式化/压缩\nhttps://tool.lu/sql/\n\nsql在线美化，格式化，压缩：\n\n# 编码转换\nhttp://tool.chinaz.com/tools/unicode.aspx\n\n站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。\n\n# Corn表达式生成\nhttp://www.pdtools.net/tools/becron.jsp\n\nCron 一般用于配置定时任务的执行。\n\n# 正则验证\nhttp://tool.chinaz.com/regex\n\nJava开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n\n# 正则代码生成\nhttp://tool.chinaz.com/tools/regexgenerate\n\n站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n\n# 时间戳转换\nhttp://tool.chinaz.com/Tools/unixtime.aspx\n\n时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\n\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n\n# 世界时间转换\nhttp://www.timebie.com/cn/easternbeijing.php\n\n世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。\n\n# 加密解密\nhttp://tool.chinaz.com/tools/textencrypt.aspx\n\n加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n\n# 查看网页源代码\nhttp://s.tool.chinaz.com/tools/pagecode.aspx\n\n这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。\n\n# 单位换算\nhttps://www.convertworld.com/zh-hans/\n\nconvertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。\n\n# 在线调色板\nhttp://tool.chinaz.com/Tools/OnlineColor.aspx\n\n这个对前端开发比较有用，可以在线调色。\n\n# ASCII ART生成\nhttp://patorjk.com/software/taag/\n\n常用对照表\n\nASCII对照表 ： http://tool.oschina.net/commons?type=4\n\nHTTP状态码 ： http://tool.oschina.net/commons?type=5\n\nHTTP Content-type ： http://tool.oschina.net/commons\n\nTCP/UDP常见端口参考 ：http://tool.oschina.net/commons?type=7\n\nHTML转义字符 ： http://tool.oschina.net/commons?type=2\n\nRGB颜色参考 ： http://tool.oschina.net/commons?type=3\n\n网页字体参考 ： http://tool.oschina.net/commons?type=8","source":"_posts/那些提升开发人员工作效率的在线工具.md","raw":"title: 那些提升开发人员工作效率的在线工具\nauthor: wen\ntags:\n  - 工作\n  - work\n  - 工具\n  - tools\ncategories:\n  - work\ndate: 2018-05-08 14:20:00\n---\n作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。\n\nHollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。\n\n# Java源代码搜索 #\nhttp://grepcode.com/\n\nGrepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n\n# 开源代码及文档搜索 #\nhttps://searchcode.com/\n\nSearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。\n\n# 电子书搜索 #\nhttps://www.jiumodiary.com/\n\n鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。\n\n# 网盘资源搜索  #\nhttp://pansou.com/\n\n这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。\n\n# 无版权图片搜索\nhttps://unsplash.com\n\n不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。\n\nunsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。\n\n# 在线UML制图\nhttps://www.processon.com/\n\nProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等。\n\n# Json在线验证及格式化\nhttps://www.json.cn/\n\n我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。\n\nDiff Check\nhttps://www.diffchecker.com/\n\n使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。\n\n# MarkDown编辑器\nMaHua ：http://mahua.jser.me/\n\n马克飞象 ：https://maxiang.io/\n\nCmd ：https://www.zybuluo.com/mdeditor\n\n以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown\n\n# Maven依赖查询\nhttp://mvnrepository.com/\n\nmvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。\n\n# 在线代码运行\nhttps://tool.lu/coderunner/\n\ncoderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。\n\n# 在线翻译\nGoogle翻译 ：https://translate.google.cn/\n\n百度翻译 ：http://fanyi.baidu.com/\n\n有道翻译 ：http://fanyi.youdao.com/\n\n说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。\n\n不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。\n\n# SQL自动生成Java代码\nhttp://www.autojcode.com/code/sql2class.jsp\n\nAutoJCode可以从sql的建表语句中生成一个DO类。\n\n# json生成java类\nhttp://www.bejson.com/json2javapojo\n\njson是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n\n# SQL美化/格式化/压缩\nhttps://tool.lu/sql/\n\nsql在线美化，格式化，压缩：\n\n# 编码转换\nhttp://tool.chinaz.com/tools/unicode.aspx\n\n站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。\n\n# Corn表达式生成\nhttp://www.pdtools.net/tools/becron.jsp\n\nCron 一般用于配置定时任务的执行。\n\n# 正则验证\nhttp://tool.chinaz.com/regex\n\nJava开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n\n# 正则代码生成\nhttp://tool.chinaz.com/tools/regexgenerate\n\n站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n\n# 时间戳转换\nhttp://tool.chinaz.com/Tools/unixtime.aspx\n\n时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\n\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n\n# 世界时间转换\nhttp://www.timebie.com/cn/easternbeijing.php\n\n世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。\n\n# 加密解密\nhttp://tool.chinaz.com/tools/textencrypt.aspx\n\n加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n\n# 查看网页源代码\nhttp://s.tool.chinaz.com/tools/pagecode.aspx\n\n这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。\n\n# 单位换算\nhttps://www.convertworld.com/zh-hans/\n\nconvertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。\n\n# 在线调色板\nhttp://tool.chinaz.com/Tools/OnlineColor.aspx\n\n这个对前端开发比较有用，可以在线调色。\n\n# ASCII ART生成\nhttp://patorjk.com/software/taag/\n\n常用对照表\n\nASCII对照表 ： http://tool.oschina.net/commons?type=4\n\nHTTP状态码 ： http://tool.oschina.net/commons?type=5\n\nHTTP Content-type ： http://tool.oschina.net/commons\n\nTCP/UDP常见端口参考 ：http://tool.oschina.net/commons?type=7\n\nHTML转义字符 ： http://tool.oschina.net/commons?type=2\n\nRGB颜色参考 ： http://tool.oschina.net/commons?type=3\n\n网页字体参考 ： http://tool.oschina.net/commons?type=8","slug":"那些提升开发人员工作效率的在线工具","published":1,"updated":"2018-05-08T06:29:13.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzjy0019xwjlsziv9tu8","content":"<p>作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。</p>\n<p>Hollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。</p>\n<h1 id=\"Java源代码搜索\"><a href=\"#Java源代码搜索\" class=\"headerlink\" title=\"Java源代码搜索\"></a>Java源代码搜索</h1><p><a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"noopener\">http://grepcode.com/</a></p>\n<p>Grepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。</p>\n<h1 id=\"开源代码及文档搜索\"><a href=\"#开源代码及文档搜索\" class=\"headerlink\" title=\"开源代码及文档搜索\"></a>开源代码及文档搜索</h1><p><a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">https://searchcode.com/</a></p>\n<p>SearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。</p>\n<h1 id=\"电子书搜索\"><a href=\"#电子书搜索\" class=\"headerlink\" title=\"电子书搜索\"></a>电子书搜索</h1><p><a href=\"https://www.jiumodiary.com/\" target=\"_blank\" rel=\"noopener\">https://www.jiumodiary.com/</a></p>\n<p>鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。</p>\n<h1 id=\"网盘资源搜索\"><a href=\"#网盘资源搜索\" class=\"headerlink\" title=\"网盘资源搜索\"></a>网盘资源搜索</h1><p><a href=\"http://pansou.com/\" target=\"_blank\" rel=\"noopener\">http://pansou.com/</a></p>\n<p>这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。</p>\n<h1 id=\"无版权图片搜索\"><a href=\"#无版权图片搜索\" class=\"headerlink\" title=\"无版权图片搜索\"></a>无版权图片搜索</h1><p><a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">https://unsplash.com</a></p>\n<p>不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。</p>\n<p>unsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。</p>\n<h1 id=\"在线UML制图\"><a href=\"#在线UML制图\" class=\"headerlink\" title=\"在线UML制图\"></a>在线UML制图</h1><p><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"noopener\">https://www.processon.com/</a></p>\n<p>ProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等。</p>\n<h1 id=\"Json在线验证及格式化\"><a href=\"#Json在线验证及格式化\" class=\"headerlink\" title=\"Json在线验证及格式化\"></a>Json在线验证及格式化</h1><p><a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">https://www.json.cn/</a></p>\n<p>我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。</p>\n<p>Diff Check<br><a href=\"https://www.diffchecker.com/\" target=\"_blank\" rel=\"noopener\">https://www.diffchecker.com/</a></p>\n<p>使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。</p>\n<h1 id=\"MarkDown编辑器\"><a href=\"#MarkDown编辑器\" class=\"headerlink\" title=\"MarkDown编辑器\"></a>MarkDown编辑器</h1><p>MaHua ：<a href=\"http://mahua.jser.me/\" target=\"_blank\" rel=\"noopener\">http://mahua.jser.me/</a></p>\n<p>马克飞象 ：<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"noopener\">https://maxiang.io/</a></p>\n<p>Cmd ：<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/mdeditor</a></p>\n<p>以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown</p>\n<h1 id=\"Maven依赖查询\"><a href=\"#Maven依赖查询\" class=\"headerlink\" title=\"Maven依赖查询\"></a>Maven依赖查询</h1><p><a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/</a></p>\n<p>mvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。</p>\n<h1 id=\"在线代码运行\"><a href=\"#在线代码运行\" class=\"headerlink\" title=\"在线代码运行\"></a>在线代码运行</h1><p><a href=\"https://tool.lu/coderunner/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/coderunner/</a></p>\n<p>coderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。</p>\n<h1 id=\"在线翻译\"><a href=\"#在线翻译\" class=\"headerlink\" title=\"在线翻译\"></a>在线翻译</h1><p>Google翻译 ：<a href=\"https://translate.google.cn/\" target=\"_blank\" rel=\"noopener\">https://translate.google.cn/</a></p>\n<p>百度翻译 ：<a href=\"http://fanyi.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://fanyi.baidu.com/</a></p>\n<p>有道翻译 ：<a href=\"http://fanyi.youdao.com/\" target=\"_blank\" rel=\"noopener\">http://fanyi.youdao.com/</a></p>\n<p>说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。</p>\n<p>不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。</p>\n<h1 id=\"SQL自动生成Java代码\"><a href=\"#SQL自动生成Java代码\" class=\"headerlink\" title=\"SQL自动生成Java代码\"></a>SQL自动生成Java代码</h1><p><a href=\"http://www.autojcode.com/code/sql2class.jsp\" target=\"_blank\" rel=\"noopener\">http://www.autojcode.com/code/sql2class.jsp</a></p>\n<p>AutoJCode可以从sql的建表语句中生成一个DO类。</p>\n<h1 id=\"json生成java类\"><a href=\"#json生成java类\" class=\"headerlink\" title=\"json生成java类\"></a>json生成java类</h1><p><a href=\"http://www.bejson.com/json2javapojo\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com/json2javapojo</a></p>\n<p>json是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。</p>\n<h1 id=\"SQL美化-格式化-压缩\"><a href=\"#SQL美化-格式化-压缩\" class=\"headerlink\" title=\"SQL美化/格式化/压缩\"></a>SQL美化/格式化/压缩</h1><p><a href=\"https://tool.lu/sql/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/sql/</a></p>\n<p>sql在线美化，格式化，压缩：</p>\n<h1 id=\"编码转换\"><a href=\"#编码转换\" class=\"headerlink\" title=\"编码转换\"></a>编码转换</h1><p><a href=\"http://tool.chinaz.com/tools/unicode.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/unicode.aspx</a></p>\n<p>站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。</p>\n<h1 id=\"Corn表达式生成\"><a href=\"#Corn表达式生成\" class=\"headerlink\" title=\"Corn表达式生成\"></a>Corn表达式生成</h1><p><a href=\"http://www.pdtools.net/tools/becron.jsp\" target=\"_blank\" rel=\"noopener\">http://www.pdtools.net/tools/becron.jsp</a></p>\n<p>Cron 一般用于配置定时任务的执行。</p>\n<h1 id=\"正则验证\"><a href=\"#正则验证\" class=\"headerlink\" title=\"正则验证\"></a>正则验证</h1><p><a href=\"http://tool.chinaz.com/regex\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/regex</a></p>\n<p>Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。</p>\n<h1 id=\"正则代码生成\"><a href=\"#正则代码生成\" class=\"headerlink\" title=\"正则代码生成\"></a>正则代码生成</h1><p><a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/regexgenerate</a></p>\n<p>站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。</p>\n<h1 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h1><p><a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/Tools/unixtime.aspx</a></p>\n<p>时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。</p>\n<p>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。</p>\n<h1 id=\"世界时间转换\"><a href=\"#世界时间转换\" class=\"headerlink\" title=\"世界时间转换\"></a>世界时间转换</h1><p><a href=\"http://www.timebie.com/cn/easternbeijing.php\" target=\"_blank\" rel=\"noopener\">http://www.timebie.com/cn/easternbeijing.php</a></p>\n<p>世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。</p>\n<h1 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h1><p><a href=\"http://tool.chinaz.com/tools/textencrypt.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/textencrypt.aspx</a></p>\n<p>加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。</p>\n<h1 id=\"查看网页源代码\"><a href=\"#查看网页源代码\" class=\"headerlink\" title=\"查看网页源代码\"></a>查看网页源代码</h1><p><a href=\"http://s.tool.chinaz.com/tools/pagecode.aspx\" target=\"_blank\" rel=\"noopener\">http://s.tool.chinaz.com/tools/pagecode.aspx</a></p>\n<p>这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。</p>\n<h1 id=\"单位换算\"><a href=\"#单位换算\" class=\"headerlink\" title=\"单位换算\"></a>单位换算</h1><p><a href=\"https://www.convertworld.com/zh-hans/\" target=\"_blank\" rel=\"noopener\">https://www.convertworld.com/zh-hans/</a></p>\n<p>convertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。</p>\n<h1 id=\"在线调色板\"><a href=\"#在线调色板\" class=\"headerlink\" title=\"在线调色板\"></a>在线调色板</h1><p><a href=\"http://tool.chinaz.com/Tools/OnlineColor.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/Tools/OnlineColor.aspx</a></p>\n<p>这个对前端开发比较有用，可以在线调色。</p>\n<h1 id=\"ASCII-ART生成\"><a href=\"#ASCII-ART生成\" class=\"headerlink\" title=\"ASCII ART生成\"></a>ASCII ART生成</h1><p><a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">http://patorjk.com/software/taag/</a></p>\n<p>常用对照表</p>\n<p>ASCII对照表 ： <a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=4</a></p>\n<p>HTTP状态码 ： <a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=5</a></p>\n<p>HTTP Content-type ： <a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>TCP/UDP常见端口参考 ：<a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=7</a></p>\n<p>HTML转义字符 ： <a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>RGB颜色参考 ： <a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=3</a></p>\n<p>网页字体参考 ： <a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为一个Java开发人员，经常要和各种各样的工具打交道，除了我们常用的IDE工具以外，其实还有很多工具是我们在日常开发及学习过程中要经常使用到的。</p>\n<p>Hollis偏爱使用在线工具，因为个人觉得这样比较方便。本文就总结了一下我常用的在线工具。欢迎纠正及补充。</p>\n<h1 id=\"Java源代码搜索\"><a href=\"#Java源代码搜索\" class=\"headerlink\" title=\"Java源代码搜索\"></a>Java源代码搜索</h1><p><a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"noopener\">http://grepcode.com/</a></p>\n<p>Grepcode是一个面向于Java开发人员的网站，在这里你可以通过Java的projects、classes等各种关键字在线查看它对应的源码，知道对应的project、classes等信息。 更方便的是，能提供非常多不同版本的源码在线查看、jar包、源码jar包、doc的下载。 同样，你也可以之间使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。</p>\n<h1 id=\"开源代码及文档搜索\"><a href=\"#开源代码及文档搜索\" class=\"headerlink\" title=\"开源代码及文档搜索\"></a>开源代码及文档搜索</h1><p><a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">https://searchcode.com/</a></p>\n<p>SearchCode 是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。</p>\n<h1 id=\"电子书搜索\"><a href=\"#电子书搜索\" class=\"headerlink\" title=\"电子书搜索\"></a>电子书搜索</h1><p><a href=\"https://www.jiumodiary.com/\" target=\"_blank\" rel=\"noopener\">https://www.jiumodiary.com/</a></p>\n<p>鸠摩搜书是一个比较不错的电子书搜索网站。内容也比较全。</p>\n<h1 id=\"网盘资源搜索\"><a href=\"#网盘资源搜索\" class=\"headerlink\" title=\"网盘资源搜索\"></a>网盘资源搜索</h1><p><a href=\"http://pansou.com/\" target=\"_blank\" rel=\"noopener\">http://pansou.com/</a></p>\n<p>这个大家都懂的，可以通过这个网站搜索百度网盘上面的各种资源。</p>\n<h1 id=\"无版权图片搜索\"><a href=\"#无版权图片搜索\" class=\"headerlink\" title=\"无版权图片搜索\"></a>无版权图片搜索</h1><p><a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">https://unsplash.com</a></p>\n<p>不知道有没有人和我一样，经常需要一些无版权的图片，比如公众号配图。</p>\n<p>unsplash是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜。</p>\n<h1 id=\"在线UML制图\"><a href=\"#在线UML制图\" class=\"headerlink\" title=\"在线UML制图\"></a>在线UML制图</h1><p><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"noopener\">https://www.processon.com/</a></p>\n<p>ProcessOn是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等。</p>\n<h1 id=\"Json在线验证及格式化\"><a href=\"#Json在线验证及格式化\" class=\"headerlink\" title=\"Json在线验证及格式化\"></a>Json在线验证及格式化</h1><p><a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">https://www.json.cn/</a></p>\n<p>我用过很多json在线格式化的工具，经过实践，json.cn是比较不错的，不仅支持json格式的验证及格式化，还可以将json格式压缩成普通文本等好用功能。</p>\n<p>Diff Check<br><a href=\"https://www.diffchecker.com/\" target=\"_blank\" rel=\"noopener\">https://www.diffchecker.com/</a></p>\n<p>使用过svn或者git的人对diffcheck肯定不陌生，但有时候我们修改的文本内容并没有被版本控制，那么就可以使用在线的网站查看文件的修改情况。diffchecker很不错。</p>\n<h1 id=\"MarkDown编辑器\"><a href=\"#MarkDown编辑器\" class=\"headerlink\" title=\"MarkDown编辑器\"></a>MarkDown编辑器</h1><p>MaHua ：<a href=\"http://mahua.jser.me/\" target=\"_blank\" rel=\"noopener\">http://mahua.jser.me/</a></p>\n<p>马克飞象 ：<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"noopener\">https://maxiang.io/</a></p>\n<p>Cmd ：<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/mdeditor</a></p>\n<p>以上这几个我都用过，都还好吧，因为我一般都喜欢把自己写过的东西保存下来，所以就用了客户端的，我是用的是MacDown</p>\n<h1 id=\"Maven依赖查询\"><a href=\"#Maven依赖查询\" class=\"headerlink\" title=\"Maven依赖查询\"></a>Maven依赖查询</h1><p><a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/</a></p>\n<p>mvnrepository这个不用详细解释了，就是查询maven的gav信息一类的。因为我们公司有内部的Nexus仓库，所以很少用这个。</p>\n<h1 id=\"在线代码运行\"><a href=\"#在线代码运行\" class=\"headerlink\" title=\"在线代码运行\"></a>在线代码运行</h1><p><a href=\"https://tool.lu/coderunner/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/coderunner/</a></p>\n<p>coderunner可以在线运行php,c,c++,go,python,java,groovy等代码。当我们在外面，没有IDE又想执行个小程序的时候是个不错的选择。</p>\n<h1 id=\"在线翻译\"><a href=\"#在线翻译\" class=\"headerlink\" title=\"在线翻译\"></a>在线翻译</h1><p>Google翻译 ：<a href=\"https://translate.google.cn/\" target=\"_blank\" rel=\"noopener\">https://translate.google.cn/</a></p>\n<p>百度翻译 ：<a href=\"http://fanyi.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://fanyi.baidu.com/</a></p>\n<p>有道翻译 ：<a href=\"http://fanyi.youdao.com/\" target=\"_blank\" rel=\"noopener\">http://fanyi.youdao.com/</a></p>\n<p>说不出具体哪个好，其实都不太准确，还是需要自己根据语境进行翻译。</p>\n<p>不过忍不住吐槽一句国内的这几个翻译网站，既然是做翻译的，域名竟然用拼音，我也是醉了。</p>\n<h1 id=\"SQL自动生成Java代码\"><a href=\"#SQL自动生成Java代码\" class=\"headerlink\" title=\"SQL自动生成Java代码\"></a>SQL自动生成Java代码</h1><p><a href=\"http://www.autojcode.com/code/sql2class.jsp\" target=\"_blank\" rel=\"noopener\">http://www.autojcode.com/code/sql2class.jsp</a></p>\n<p>AutoJCode可以从sql的建表语句中生成一个DO类。</p>\n<h1 id=\"json生成java类\"><a href=\"#json生成java类\" class=\"headerlink\" title=\"json生成java类\"></a>json生成java类</h1><p><a href=\"http://www.bejson.com/json2javapojo\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com/json2javapojo</a></p>\n<p>json是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。</p>\n<h1 id=\"SQL美化-格式化-压缩\"><a href=\"#SQL美化-格式化-压缩\" class=\"headerlink\" title=\"SQL美化/格式化/压缩\"></a>SQL美化/格式化/压缩</h1><p><a href=\"https://tool.lu/sql/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/sql/</a></p>\n<p>sql在线美化，格式化，压缩：</p>\n<h1 id=\"编码转换\"><a href=\"#编码转换\" class=\"headerlink\" title=\"编码转换\"></a>编码转换</h1><p><a href=\"http://tool.chinaz.com/tools/unicode.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/unicode.aspx</a></p>\n<p>站长工具的编码转换比较全面，提供了Unicode编码、UFT8编码、URL编码/解码等功能。</p>\n<h1 id=\"Corn表达式生成\"><a href=\"#Corn表达式生成\" class=\"headerlink\" title=\"Corn表达式生成\"></a>Corn表达式生成</h1><p><a href=\"http://www.pdtools.net/tools/becron.jsp\" target=\"_blank\" rel=\"noopener\">http://www.pdtools.net/tools/becron.jsp</a></p>\n<p>Cron 一般用于配置定时任务的执行。</p>\n<h1 id=\"正则验证\"><a href=\"#正则验证\" class=\"headerlink\" title=\"正则验证\"></a>正则验证</h1><p><a href=\"http://tool.chinaz.com/regex\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/regex</a></p>\n<p>Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。</p>\n<h1 id=\"正则代码生成\"><a href=\"#正则代码生成\" class=\"headerlink\" title=\"正则代码生成\"></a>正则代码生成</h1><p><a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/regexgenerate</a></p>\n<p>站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。</p>\n<h1 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h1><p><a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/Tools/unixtime.aspx</a></p>\n<p>时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。</p>\n<p>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。</p>\n<h1 id=\"世界时间转换\"><a href=\"#世界时间转换\" class=\"headerlink\" title=\"世界时间转换\"></a>世界时间转换</h1><p><a href=\"http://www.timebie.com/cn/easternbeijing.php\" target=\"_blank\" rel=\"noopener\">http://www.timebie.com/cn/easternbeijing.php</a></p>\n<p>世界各地时间转换，我之前做国际业务的时候，比较常用的是北京时间转纽约时间，北京时间转洛杉矶时间。 timebie提供了世界时间相互转换的功能。</p>\n<h1 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h1><p><a href=\"http://tool.chinaz.com/tools/textencrypt.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/tools/textencrypt.aspx</a></p>\n<p>加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。</p>\n<h1 id=\"查看网页源代码\"><a href=\"#查看网页源代码\" class=\"headerlink\" title=\"查看网页源代码\"></a>查看网页源代码</h1><p><a href=\"http://s.tool.chinaz.com/tools/pagecode.aspx\" target=\"_blank\" rel=\"noopener\">http://s.tool.chinaz.com/tools/pagecode.aspx</a></p>\n<p>这个工具，可以输入一个网站，直接查看网站的源码。具体有什么用，大家可以发挥各种想象。</p>\n<h1 id=\"单位换算\"><a href=\"#单位换算\" class=\"headerlink\" title=\"单位换算\"></a>单位换算</h1><p><a href=\"https://www.convertworld.com/zh-hans/\" target=\"_blank\" rel=\"noopener\">https://www.convertworld.com/zh-hans/</a></p>\n<p>convertworld是一个比较全的单位换算的网站。我经常用它进行时间单位和货币单位的换算。</p>\n<h1 id=\"在线调色板\"><a href=\"#在线调色板\" class=\"headerlink\" title=\"在线调色板\"></a>在线调色板</h1><p><a href=\"http://tool.chinaz.com/Tools/OnlineColor.aspx\" target=\"_blank\" rel=\"noopener\">http://tool.chinaz.com/Tools/OnlineColor.aspx</a></p>\n<p>这个对前端开发比较有用，可以在线调色。</p>\n<h1 id=\"ASCII-ART生成\"><a href=\"#ASCII-ART生成\" class=\"headerlink\" title=\"ASCII ART生成\"></a>ASCII ART生成</h1><p><a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">http://patorjk.com/software/taag/</a></p>\n<p>常用对照表</p>\n<p>ASCII对照表 ： <a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=4</a></p>\n<p>HTTP状态码 ： <a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=5</a></p>\n<p>HTTP Content-type ： <a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>TCP/UDP常见端口参考 ：<a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=7</a></p>\n<p>HTML转义字符 ： <a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>RGB颜色参考 ： <a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=3</a></p>\n<p>网页字体参考 ： <a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=8</a></p>\n"},{"title":"提升工作效率","author":"wen","date":"2018-05-08T06:16:00.000Z","_content":"1 时间常有，时间在于优先。\n\n2 时间总会有的：每天只计划 4～5 小时真正的工作。\n\n3 当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。\n\n4 重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。\n\n5 不要多任务，这只会消耗注意力；保持专注，一心一用。\n\n6、养成工作习惯，并持之以恒，你的身体会适应的。\n\n7.在有限的时间内，我们总是非常专注并且有效率。\n\n8.进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。\n\n9、迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” Facebook 办公室墙壁上贴的箴言。动手做，胜过任何完美的想象。\n\n10、工作时间越长，并不等于效率越高\n\n11、按重要性工作，提高效率。\n\n12 有会议就尽早安排，用于准备会议\n\n的时间往往都浪费掉了。\n\n13、把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。\n\n14、一整天保持相同的工作环境。在项目/客户之间切换，会效率低。\n\n15 工作—放松—工作=高效(番茄工作法)\n\n16、把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。\n\n17 从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。\n\n18 必须清楚白天必须完成的那件事，是什么。“Only ever work on the thing that will have the biggest impact” 只去做那件有着最大影响的事情。\n\n19 把任务按时间分段，就能感觉它快被搞定了。\n\n20 授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！\n\n21 把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。\n\n22 给所有事情都设定一个期限。不要让工作无期限地进行下去。\n\n23 针对时间紧或有压力的任务，设置结束时间，万事皆可终结\n\n24 多记，多做笔记\n\n25 进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。\n\n26 休息，休息一下～","source":"_posts/升工作效率.md","raw":"title: 提升工作效率\nauthor: wen\ntags:\n  - 工作效率\n  - work\ncategories:\n  - work\ndate: 2018-05-08 14:16:00\n---\n1 时间常有，时间在于优先。\n\n2 时间总会有的：每天只计划 4～5 小时真正的工作。\n\n3 当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。\n\n4 重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。\n\n5 不要多任务，这只会消耗注意力；保持专注，一心一用。\n\n6、养成工作习惯，并持之以恒，你的身体会适应的。\n\n7.在有限的时间内，我们总是非常专注并且有效率。\n\n8.进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。\n\n9、迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” Facebook 办公室墙壁上贴的箴言。动手做，胜过任何完美的想象。\n\n10、工作时间越长，并不等于效率越高\n\n11、按重要性工作，提高效率。\n\n12 有会议就尽早安排，用于准备会议\n\n的时间往往都浪费掉了。\n\n13、把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。\n\n14、一整天保持相同的工作环境。在项目/客户之间切换，会效率低。\n\n15 工作—放松—工作=高效(番茄工作法)\n\n16、把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。\n\n17 从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。\n\n18 必须清楚白天必须完成的那件事，是什么。“Only ever work on the thing that will have the biggest impact” 只去做那件有着最大影响的事情。\n\n19 把任务按时间分段，就能感觉它快被搞定了。\n\n20 授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！\n\n21 把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。\n\n22 给所有事情都设定一个期限。不要让工作无期限地进行下去。\n\n23 针对时间紧或有压力的任务，设置结束时间，万事皆可终结\n\n24 多记，多做笔记\n\n25 进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。\n\n26 休息，休息一下～","slug":"升工作效率","published":1,"updated":"2018-05-08T06:28:50.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzk6001cxwjl4swo4oqq","content":"<p>1 时间常有，时间在于优先。</p>\n<p>2 时间总会有的：每天只计划 4～5 小时真正的工作。</p>\n<p>3 当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。</p>\n<p>4 重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。</p>\n<p>5 不要多任务，这只会消耗注意力；保持专注，一心一用。</p>\n<p>6、养成工作习惯，并持之以恒，你的身体会适应的。</p>\n<p>7.在有限的时间内，我们总是非常专注并且有效率。</p>\n<p>8.进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。</p>\n<p>9、迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” Facebook 办公室墙壁上贴的箴言。动手做，胜过任何完美的想象。</p>\n<p>10、工作时间越长，并不等于效率越高</p>\n<p>11、按重要性工作，提高效率。</p>\n<p>12 有会议就尽早安排，用于准备会议</p>\n<p>的时间往往都浪费掉了。</p>\n<p>13、把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。</p>\n<p>14、一整天保持相同的工作环境。在项目/客户之间切换，会效率低。</p>\n<p>15 工作—放松—工作=高效(番茄工作法)</p>\n<p>16、把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。</p>\n<p>17 从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。</p>\n<p>18 必须清楚白天必须完成的那件事，是什么。“Only ever work on the thing that will have the biggest impact” 只去做那件有着最大影响的事情。</p>\n<p>19 把任务按时间分段，就能感觉它快被搞定了。</p>\n<p>20 授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！</p>\n<p>21 把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。</p>\n<p>22 给所有事情都设定一个期限。不要让工作无期限地进行下去。</p>\n<p>23 针对时间紧或有压力的任务，设置结束时间，万事皆可终结</p>\n<p>24 多记，多做笔记</p>\n<p>25 进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。</p>\n<p>26 休息，休息一下～</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1 时间常有，时间在于优先。</p>\n<p>2 时间总会有的：每天只计划 4～5 小时真正的工作。</p>\n<p>3 当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。</p>\n<p>4 重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。</p>\n<p>5 不要多任务，这只会消耗注意力；保持专注，一心一用。</p>\n<p>6、养成工作习惯，并持之以恒，你的身体会适应的。</p>\n<p>7.在有限的时间内，我们总是非常专注并且有效率。</p>\n<p>8.进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。</p>\n<p>9、迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” Facebook 办公室墙壁上贴的箴言。动手做，胜过任何完美的想象。</p>\n<p>10、工作时间越长，并不等于效率越高</p>\n<p>11、按重要性工作，提高效率。</p>\n<p>12 有会议就尽早安排，用于准备会议</p>\n<p>的时间往往都浪费掉了。</p>\n<p>13、把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。</p>\n<p>14、一整天保持相同的工作环境。在项目/客户之间切换，会效率低。</p>\n<p>15 工作—放松—工作=高效(番茄工作法)</p>\n<p>16、把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。</p>\n<p>17 从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。</p>\n<p>18 必须清楚白天必须完成的那件事，是什么。“Only ever work on the thing that will have the biggest impact” 只去做那件有着最大影响的事情。</p>\n<p>19 把任务按时间分段，就能感觉它快被搞定了。</p>\n<p>20 授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！</p>\n<p>21 把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。</p>\n<p>22 给所有事情都设定一个期限。不要让工作无期限地进行下去。</p>\n<p>23 针对时间紧或有压力的任务，设置结束时间，万事皆可终结</p>\n<p>24 多记，多做笔记</p>\n<p>25 进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。</p>\n<p>26 休息，休息一下～</p>\n"},{"title":"七）maven build docker and push Image","author":"wen","date":"2018-05-08T09:36:00.000Z","_content":"链接：[docker安装本地仓库](/2018/05/08/（六）docker安装本地仓库（root用户）/)\n使用maven 打包jar成docker镜像 并发布到镜像库\n# 1 maven settings.xml配置server 节点添加\n（这是私有库 用户名密码）\n```\n\t<server>\n\t\t\t<id>docker-hub</id>\n\t\t\t<username>testuser</username>\n\t\t\t<password>testpassword</password>\n       </server>\n```\n# 2 项目 pom.xml\nproperties 节点\n\n```\n      <docker.image.prefix>reg.itmuch.com</docker.image.prefix>\n     <docker.registry>https://reg.itmuch.com/v1</docker.registry>\n        <tag.version>1.0.0</tag.version>\n         <docker.servcerId>docker-hub</docker.servcerId>\n```\nmaven 配置组件\n```\n         <!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>1.0.0</version>\n                <dependencies>\n                <dependency>\n\t\t\t\t\t    <groupId>commons-logging</groupId>\n\t\t\t\t\t    <artifactId>commons-logging</artifactId>\n\t\t\t\t\t    <version>1.1.1</version>\n\t\t\t\t\t</dependency>\n                </dependencies>\n                <configuration>\n                   \t<!-- 镜像名:tag  -->\n                   <imageName>${docker.image.prefix}/${project.artifactId}:${tag.version}</imageName>\n\t\t\t\t    <!-- 指定Dockerfile所在的路径  -->\n                    <dockerDirectory>${project.basedir}/docker</dockerDirectory>\n                    <!-- 以下两行是为了docker push到DockerHub使用的。 -->\n                    <serverId>${docker.servcerId}</serverId>\n                    <registryUrl>${docker.registry}</registryUrl>\n        \t\t\t   <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <directory>${project.build.directory}</directory>\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n```\n\n参考https://github.com/spotify/docker-maven-plugin\n\n# 3 dockerFile文件放在项目根目录下docker目录\n```\nFROM openjre\nMAINTAINER killko <ydhana@isoftstone.com>\nENV EUREKA_INSTANCE_NAME=eureka\nENV EUREKA_SERVICEURL=http://eureka:6080/eureka\nEXPOSE 6080\n#统一时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime\n\nCOPY eureka*.jar /Eureka.jar\n\nENTRYPOINT [\"java\",\"-jar\",\"-Djava.net.preferIPv4Stack=true\",\"/Eureka.jar\"]\n\n```\n# 4 maven build docker and push Image：\nmvn clean package docker:build -DpushImage\n\n（需要注意：运行环境必须有docker）","source":"_posts/七）maven-build-docker-and-push-Image.md","raw":"title: 七）maven build docker and push Image\nauthor: wen\ntags:\n  - docker\n  - maven\ncategories:\n  - docker\ndate: 2018-05-08 17:36:00\n---\n链接：[docker安装本地仓库](/2018/05/08/（六）docker安装本地仓库（root用户）/)\n使用maven 打包jar成docker镜像 并发布到镜像库\n# 1 maven settings.xml配置server 节点添加\n（这是私有库 用户名密码）\n```\n\t<server>\n\t\t\t<id>docker-hub</id>\n\t\t\t<username>testuser</username>\n\t\t\t<password>testpassword</password>\n       </server>\n```\n# 2 项目 pom.xml\nproperties 节点\n\n```\n      <docker.image.prefix>reg.itmuch.com</docker.image.prefix>\n     <docker.registry>https://reg.itmuch.com/v1</docker.registry>\n        <tag.version>1.0.0</tag.version>\n         <docker.servcerId>docker-hub</docker.servcerId>\n```\nmaven 配置组件\n```\n         <!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>1.0.0</version>\n                <dependencies>\n                <dependency>\n\t\t\t\t\t    <groupId>commons-logging</groupId>\n\t\t\t\t\t    <artifactId>commons-logging</artifactId>\n\t\t\t\t\t    <version>1.1.1</version>\n\t\t\t\t\t</dependency>\n                </dependencies>\n                <configuration>\n                   \t<!-- 镜像名:tag  -->\n                   <imageName>${docker.image.prefix}/${project.artifactId}:${tag.version}</imageName>\n\t\t\t\t    <!-- 指定Dockerfile所在的路径  -->\n                    <dockerDirectory>${project.basedir}/docker</dockerDirectory>\n                    <!-- 以下两行是为了docker push到DockerHub使用的。 -->\n                    <serverId>${docker.servcerId}</serverId>\n                    <registryUrl>${docker.registry}</registryUrl>\n        \t\t\t   <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <directory>${project.build.directory}</directory>\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n```\n\n参考https://github.com/spotify/docker-maven-plugin\n\n# 3 dockerFile文件放在项目根目录下docker目录\n```\nFROM openjre\nMAINTAINER killko <ydhana@isoftstone.com>\nENV EUREKA_INSTANCE_NAME=eureka\nENV EUREKA_SERVICEURL=http://eureka:6080/eureka\nEXPOSE 6080\n#统一时区\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime\n\nCOPY eureka*.jar /Eureka.jar\n\nENTRYPOINT [\"java\",\"-jar\",\"-Djava.net.preferIPv4Stack=true\",\"/Eureka.jar\"]\n\n```\n# 4 maven build docker and push Image：\nmvn clean package docker:build -DpushImage\n\n（需要注意：运行环境必须有docker）","slug":"七）maven-build-docker-and-push-Image","published":1,"updated":"2018-05-08T09:42:04.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzkg001gxwjlde3n94n9","content":"<p>链接：<a href=\"/2018/05/08/（六）docker安装本地仓库（root用户）/\">docker安装本地仓库</a><br>使用maven 打包jar成docker镜像 并发布到镜像库</p>\n<h1 id=\"1-maven-settings-xml配置server-节点添加\"><a href=\"#1-maven-settings-xml配置server-节点添加\" class=\"headerlink\" title=\"1 maven settings.xml配置server 节点添加\"></a>1 maven settings.xml配置server 节点添加</h1><p>（这是私有库 用户名密码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">\t\t&lt;id&gt;docker-hub&lt;/id&gt;</span><br><span class=\"line\">\t\t&lt;username&gt;testuser&lt;/username&gt;</span><br><span class=\"line\">\t\t&lt;password&gt;testpassword&lt;/password&gt;</span><br><span class=\"line\">      &lt;/server&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-项目-pom-xml\"><a href=\"#2-项目-pom-xml\" class=\"headerlink\" title=\"2 项目 pom.xml\"></a>2 项目 pom.xml</h1><p>properties 节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;docker.image.prefix&gt;reg.itmuch.com&lt;/docker.image.prefix&gt;</span><br><span class=\"line\">&lt;docker.registry&gt;https://reg.itmuch.com/v1&lt;/docker.registry&gt;</span><br><span class=\"line\">   &lt;tag.version&gt;1.0.0&lt;/tag.version&gt;</span><br><span class=\"line\">    &lt;docker.servcerId&gt;docker-hub&lt;/docker.servcerId&gt;</span><br></pre></td></tr></table></figure>\n<p>maven 配置组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span><br><span class=\"line\">       &lt;plugin&gt;</span><br><span class=\"line\">           &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">           &lt;dependencies&gt;</span><br><span class=\"line\">           &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">           &lt;/dependencies&gt;</span><br><span class=\"line\">           &lt;configuration&gt;</span><br><span class=\"line\">              \t&lt;!-- 镜像名:tag  --&gt;</span><br><span class=\"line\">              &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;tag.version&#125;&lt;/imageName&gt;</span><br><span class=\"line\">   &lt;!-- 指定Dockerfile所在的路径  --&gt;</span><br><span class=\"line\">               &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">               &lt;!-- 以下两行是为了docker push到DockerHub使用的。 --&gt;</span><br><span class=\"line\">               &lt;serverId&gt;$&#123;docker.servcerId&#125;&lt;/serverId&gt;</span><br><span class=\"line\">               &lt;registryUrl&gt;$&#123;docker.registry&#125;&lt;/registryUrl&gt;</span><br><span class=\"line\">   \t\t\t   &lt;resources&gt;</span><br><span class=\"line\">                   &lt;resource&gt;</span><br><span class=\"line\">                       &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                       &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                       &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">                   &lt;/resource&gt;</span><br><span class=\"line\">               &lt;/resources&gt;</span><br><span class=\"line\">           &lt;/configuration&gt;</span><br><span class=\"line\">       &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参考<a href=\"https://github.com/spotify/docker-maven-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/spotify/docker-maven-plugin</a></p>\n<h1 id=\"3-dockerFile文件放在项目根目录下docker目录\"><a href=\"#3-dockerFile文件放在项目根目录下docker目录\" class=\"headerlink\" title=\"3 dockerFile文件放在项目根目录下docker目录\"></a>3 dockerFile文件放在项目根目录下docker目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM openjre</span><br><span class=\"line\">MAINTAINER killko &lt;ydhana@isoftstone.com&gt;</span><br><span class=\"line\">ENV EUREKA_INSTANCE_NAME=eureka</span><br><span class=\"line\">ENV EUREKA_SERVICEURL=http://eureka:6080/eureka</span><br><span class=\"line\">EXPOSE 6080</span><br><span class=\"line\">#统一时区</span><br><span class=\"line\">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">COPY eureka*.jar /Eureka.jar</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;-Djava.net.preferIPv4Stack=true&quot;,&quot;/Eureka.jar&quot;]</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-maven-build-docker-and-push-Image：\"><a href=\"#4-maven-build-docker-and-push-Image：\" class=\"headerlink\" title=\"4 maven build docker and push Image：\"></a>4 maven build docker and push Image：</h1><p>mvn clean package docker:build -DpushImage</p>\n<p>（需要注意：运行环境必须有docker）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>链接：<a href=\"/2018/05/08/（六）docker安装本地仓库（root用户）/\">docker安装本地仓库</a><br>使用maven 打包jar成docker镜像 并发布到镜像库</p>\n<h1 id=\"1-maven-settings-xml配置server-节点添加\"><a href=\"#1-maven-settings-xml配置server-节点添加\" class=\"headerlink\" title=\"1 maven settings.xml配置server 节点添加\"></a>1 maven settings.xml配置server 节点添加</h1><p>（这是私有库 用户名密码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">\t\t&lt;id&gt;docker-hub&lt;/id&gt;</span><br><span class=\"line\">\t\t&lt;username&gt;testuser&lt;/username&gt;</span><br><span class=\"line\">\t\t&lt;password&gt;testpassword&lt;/password&gt;</span><br><span class=\"line\">      &lt;/server&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-项目-pom-xml\"><a href=\"#2-项目-pom-xml\" class=\"headerlink\" title=\"2 项目 pom.xml\"></a>2 项目 pom.xml</h1><p>properties 节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;docker.image.prefix&gt;reg.itmuch.com&lt;/docker.image.prefix&gt;</span><br><span class=\"line\">&lt;docker.registry&gt;https://reg.itmuch.com/v1&lt;/docker.registry&gt;</span><br><span class=\"line\">   &lt;tag.version&gt;1.0.0&lt;/tag.version&gt;</span><br><span class=\"line\">    &lt;docker.servcerId&gt;docker-hub&lt;/docker.servcerId&gt;</span><br></pre></td></tr></table></figure>\n<p>maven 配置组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span><br><span class=\"line\">       &lt;plugin&gt;</span><br><span class=\"line\">           &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">           &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">           &lt;dependencies&gt;</span><br><span class=\"line\">           &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">           &lt;/dependencies&gt;</span><br><span class=\"line\">           &lt;configuration&gt;</span><br><span class=\"line\">              \t&lt;!-- 镜像名:tag  --&gt;</span><br><span class=\"line\">              &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;tag.version&#125;&lt;/imageName&gt;</span><br><span class=\"line\">   &lt;!-- 指定Dockerfile所在的路径  --&gt;</span><br><span class=\"line\">               &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">               &lt;!-- 以下两行是为了docker push到DockerHub使用的。 --&gt;</span><br><span class=\"line\">               &lt;serverId&gt;$&#123;docker.servcerId&#125;&lt;/serverId&gt;</span><br><span class=\"line\">               &lt;registryUrl&gt;$&#123;docker.registry&#125;&lt;/registryUrl&gt;</span><br><span class=\"line\">   \t\t\t   &lt;resources&gt;</span><br><span class=\"line\">                   &lt;resource&gt;</span><br><span class=\"line\">                       &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                       &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                       &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">                   &lt;/resource&gt;</span><br><span class=\"line\">               &lt;/resources&gt;</span><br><span class=\"line\">           &lt;/configuration&gt;</span><br><span class=\"line\">       &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参考<a href=\"https://github.com/spotify/docker-maven-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/spotify/docker-maven-plugin</a></p>\n<h1 id=\"3-dockerFile文件放在项目根目录下docker目录\"><a href=\"#3-dockerFile文件放在项目根目录下docker目录\" class=\"headerlink\" title=\"3 dockerFile文件放在项目根目录下docker目录\"></a>3 dockerFile文件放在项目根目录下docker目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM openjre</span><br><span class=\"line\">MAINTAINER killko &lt;ydhana@isoftstone.com&gt;</span><br><span class=\"line\">ENV EUREKA_INSTANCE_NAME=eureka</span><br><span class=\"line\">ENV EUREKA_SERVICEURL=http://eureka:6080/eureka</span><br><span class=\"line\">EXPOSE 6080</span><br><span class=\"line\">#统一时区</span><br><span class=\"line\">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\">COPY eureka*.jar /Eureka.jar</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;-Djava.net.preferIPv4Stack=true&quot;,&quot;/Eureka.jar&quot;]</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-maven-build-docker-and-push-Image：\"><a href=\"#4-maven-build-docker-and-push-Image：\" class=\"headerlink\" title=\"4 maven build docker and push Image：\"></a>4 maven build docker and push Image：</h1><p>mvn clean package docker:build -DpushImage</p>\n<p>（需要注意：运行环境必须有docker）</p>\n"},{"title":"八）安装jenkins","author":"wen","date":"2018-05-08T10:03:00.000Z","_content":"参考：\n\n1[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n2[升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n\n# 1 安装java环境\n```\nyum install -y java\n```\n\n# 2 安装wget\n```\nyum install -y wget\n```\n\n# 3 获取jenkins的配置\n```\n wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo\n```\n# 4 导入jenkinskey\n```\n rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key\n ``\n\n# 5 安装jenkins\n```\nyum install jenkins\n```\n# 6 jenkins的配置文件： \n```\n/etc/sysconfig/jenkins\n```\n# 7 运行 jenkins\n```\nservice jenkins start\n```\n# 8 查看日志：\n```\ntail-f  /var/log/jenkins/jenkins.log\n```\n![logo](安装jenkins/11278290-b7f1229f3c16a906.png)\n211是jenkins key\n\n如果不能访问请关闭防火墙\niptables -F\n\n# 9 浏览器访问：192.168.137.8：8080\n![logo](安装jenkins/11278290-e2f6e1054f7f923a.png)\n输入21120240a2cb4e8e83065dc7c71a5b88  \n点击确定\n\n# 10 安装推荐的插件\n![logo](安装jenkins/11278290-9e1548cc032d002c.png)\n# 11  等等安装完成\n![logo](安装jenkins/11278290-a2000d90816960d4.png)\n12 创建用户:  输入完信息 点击 确定：  \n![logo](安装jenkins/11278290-364c455c39845e06.png)\n13 点击save and finish\n\n![logo](安装jenkins/11278290-6cce522c3a59044b.png)\n14 安装成功\n![logo](安装jenkins/11278290-aab55082195f5c56.png)\n","source":"_posts/安装jenkins.md","raw":"title: 八）安装jenkins\nauthor: wen\ntags:\n  - jenkins\ncategories: []\ndate: 2018-05-08 18:03:00\n---\n参考：\n\n1[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n2[升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n\n# 1 安装java环境\n```\nyum install -y java\n```\n\n# 2 安装wget\n```\nyum install -y wget\n```\n\n# 3 获取jenkins的配置\n```\n wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo\n```\n# 4 导入jenkinskey\n```\n rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key\n ``\n\n# 5 安装jenkins\n```\nyum install jenkins\n```\n# 6 jenkins的配置文件： \n```\n/etc/sysconfig/jenkins\n```\n# 7 运行 jenkins\n```\nservice jenkins start\n```\n# 8 查看日志：\n```\ntail-f  /var/log/jenkins/jenkins.log\n```\n![logo](安装jenkins/11278290-b7f1229f3c16a906.png)\n211是jenkins key\n\n如果不能访问请关闭防火墙\niptables -F\n\n# 9 浏览器访问：192.168.137.8：8080\n![logo](安装jenkins/11278290-e2f6e1054f7f923a.png)\n输入21120240a2cb4e8e83065dc7c71a5b88  \n点击确定\n\n# 10 安装推荐的插件\n![logo](安装jenkins/11278290-9e1548cc032d002c.png)\n# 11  等等安装完成\n![logo](安装jenkins/11278290-a2000d90816960d4.png)\n12 创建用户:  输入完信息 点击 确定：  \n![logo](安装jenkins/11278290-364c455c39845e06.png)\n13 点击save and finish\n\n![logo](安装jenkins/11278290-6cce522c3a59044b.png)\n14 安装成功\n![logo](安装jenkins/11278290-aab55082195f5c56.png)\n","slug":"安装jenkins","published":1,"updated":"2018-05-08T10:14:48.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzkl001ixwjl8l4a9dmz","content":"<p>参考：</p>\n<p>1<a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p>2<a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"1-安装java环境\"><a href=\"#1-安装java环境\" class=\"headerlink\" title=\"1 安装java环境\"></a>1 安装java环境</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装wget\"><a href=\"#2-安装wget\" class=\"headerlink\" title=\"2 安装wget\"></a>2 安装wget</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-获取jenkins的配置\"><a href=\"#3-获取jenkins的配置\" class=\"headerlink\" title=\"3 获取jenkins的配置\"></a>3 获取jenkins的配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-导入jenkinskey\"><a href=\"#4-导入jenkinskey\" class=\"headerlink\" title=\"4 导入jenkinskey\"></a>4 导入jenkinskey</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"># 5 安装jenkins</span><br></pre></td></tr></table></figure>\n<p>yum install jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 6 jenkins的配置文件：</span><br></pre></td></tr></table></figure></p>\n<p>/etc/sysconfig/jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 7 运行 jenkins</span><br></pre></td></tr></table></figure></p>\n<p>service jenkins start<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 8 查看日志：</span><br></pre></td></tr></table></figure></p>\n<p>tail-f  /var/log/jenkins/jenkins.log<br>```<br><img src=\"/2018/05/08/安装jenkins/11278290-b7f1229f3c16a906.png\" alt=\"logo\"><br>211是jenkins key</p>\n<p>如果不能访问请关闭防火墙<br>iptables -F</p>\n<h1 id=\"9-浏览器访问：192-168-137-8：8080\"><a href=\"#9-浏览器访问：192-168-137-8：8080\" class=\"headerlink\" title=\"9 浏览器访问：192.168.137.8：8080\"></a>9 浏览器访问：192.168.137.8：8080</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-e2f6e1054f7f923a.png\" alt=\"logo\"><br>输入21120240a2cb4e8e83065dc7c71a5b88<br>点击确定</p>\n<h1 id=\"10-安装推荐的插件\"><a href=\"#10-安装推荐的插件\" class=\"headerlink\" title=\"10 安装推荐的插件\"></a>10 安装推荐的插件</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-9e1548cc032d002c.png\" alt=\"logo\"></p>\n<h1 id=\"11-等等安装完成\"><a href=\"#11-等等安装完成\" class=\"headerlink\" title=\"11  等等安装完成\"></a>11  等等安装完成</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-a2000d90816960d4.png\" alt=\"logo\"><br>12 创建用户:  输入完信息 点击 确定：<br><img src=\"/2018/05/08/安装jenkins/11278290-364c455c39845e06.png\" alt=\"logo\"><br>13 点击save and finish</p>\n<p><img src=\"/2018/05/08/安装jenkins/11278290-6cce522c3a59044b.png\" alt=\"logo\"><br>14 安装成功<br><img src=\"/2018/05/08/安装jenkins/11278290-aab55082195f5c56.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：</p>\n<p>1<a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p>2<a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"1-安装java环境\"><a href=\"#1-安装java环境\" class=\"headerlink\" title=\"1 安装java环境\"></a>1 安装java环境</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装wget\"><a href=\"#2-安装wget\" class=\"headerlink\" title=\"2 安装wget\"></a>2 安装wget</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-获取jenkins的配置\"><a href=\"#3-获取jenkins的配置\" class=\"headerlink\" title=\"3 获取jenkins的配置\"></a>3 获取jenkins的配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-导入jenkinskey\"><a href=\"#4-导入jenkinskey\" class=\"headerlink\" title=\"4 导入jenkinskey\"></a>4 导入jenkinskey</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key</span><br><span class=\"line\"> ``</span><br><span class=\"line\"></span><br><span class=\"line\"># 5 安装jenkins</span><br></pre></td></tr></table></figure>\n<p>yum install jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 6 jenkins的配置文件：</span><br></pre></td></tr></table></figure></p>\n<p>/etc/sysconfig/jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 7 运行 jenkins</span><br></pre></td></tr></table></figure></p>\n<p>service jenkins start<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 8 查看日志：</span><br></pre></td></tr></table></figure></p>\n<p>tail-f  /var/log/jenkins/jenkins.log<br>```<br><img src=\"/2018/05/08/安装jenkins/11278290-b7f1229f3c16a906.png\" alt=\"logo\"><br>211是jenkins key</p>\n<p>如果不能访问请关闭防火墙<br>iptables -F</p>\n<h1 id=\"9-浏览器访问：192-168-137-8：8080\"><a href=\"#9-浏览器访问：192-168-137-8：8080\" class=\"headerlink\" title=\"9 浏览器访问：192.168.137.8：8080\"></a>9 浏览器访问：192.168.137.8：8080</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-e2f6e1054f7f923a.png\" alt=\"logo\"><br>输入21120240a2cb4e8e83065dc7c71a5b88<br>点击确定</p>\n<h1 id=\"10-安装推荐的插件\"><a href=\"#10-安装推荐的插件\" class=\"headerlink\" title=\"10 安装推荐的插件\"></a>10 安装推荐的插件</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-9e1548cc032d002c.png\" alt=\"logo\"></p>\n<h1 id=\"11-等等安装完成\"><a href=\"#11-等等安装完成\" class=\"headerlink\" title=\"11  等等安装完成\"></a>11  等等安装完成</h1><p><img src=\"/2018/05/08/安装jenkins/11278290-a2000d90816960d4.png\" alt=\"logo\"><br>12 创建用户:  输入完信息 点击 确定：<br><img src=\"/2018/05/08/安装jenkins/11278290-364c455c39845e06.png\" alt=\"logo\"><br>13 点击save and finish</p>\n<p><img src=\"/2018/05/08/安装jenkins/11278290-6cce522c3a59044b.png\" alt=\"logo\"><br>14 安装成功<br><img src=\"/2018/05/08/安装jenkins/11278290-aab55082195f5c56.png\" alt=\"logo\"></p>\n"},{"title":"（一）oracle VM安装red hat liunx","author":"wen","date":"2018-05-08T07:01:00.000Z","_content":"软件：Oracle VM VirtualBox\n\n网络桥接物流网卡：\n\n# 1打开Oracle VMVirtualBox 点击新建按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-8cae3ccf049eb036.png)\n# 2 点击 下一步 按钮\n名称 输入：jenkins\n\n类型：Linux\n\n操作系统：Red Rat(64 bit)\n![logo](）oracle-VM安装red-hat-liunx/11278290-d23c40773d84371f.png)\n\n# 3 内存 默认1G，点击 下一步\n![logo](）oracle-VM安装red-hat-liunx/11278290-22f082cba471a8bb.png)\n\n# 4 选择 现在创建虚拟硬盘 ，点击 创建 按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-6a1302edff3ebf2e.png)\n\n# 5 默认选项，点击 下一步\n![logo](）oracle-VM安装red-hat-liunx/11278290-8baeb9eb905c71a2.png)\n\n# 6 选择 动态分配 ，点击 下一步 按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-7adf8cc44c0ee846.png)\n\n# 7  设置硬盘大小:40G ，后点击创建按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-4e335970ba06000f.png)\n\n# 8 点击设置按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-f9a8280cb4192f6b.png)\n\n# 9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项\n![logo](）oracle-VM安装red-hat-liunx/11278290-24e0f2beb6f3331e.png)\n\n# 10 进行选择ISO镜像，点击图中 红色部分\n![logo](）oracle-VM安装red-hat-liunx/11278290-0322ebd8568ed1e0.png)\n\n# 11 点击选择 磁盘\n![logo](）oracle-VM安装red-hat-liunx/11278290-82234f6e704f75f6.png)\n\n# 12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从https://www.linuxprobe.com/tools下载\n![logo](）oracle-VM安装red-hat-liunx/11278290-e8c8a52d140c5609.png)\n\n# 13 点击OK 按钮后\n![logo](）oracle-VM安装red-hat-liunx/11278290-e22e0734301c33b6.png)\n\n# 14 虚拟机设置完成，点击启动\n![logo](）oracle-VM安装red-hat-liunx/11278290-23e3a150c783f9fb.png)\n\n# 15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1-->enter\n![logo](）oracle-VM安装red-hat-liunx/11278290-b20d2391b41df6dc.png)\n\n\n# 16 选择语言 界面 ，点击continue\n![logo](）oracle-VM安装red-hat-liunx/11278290-fe5bdba62c19c919.png)\n\n# 17 点击network& host name\n![logo](）oracle-VM安装red-hat-liunx/11278290-77b646357a8b5e8a.png)\n\n# 18 OFF 改为ON后，点击DONE\n![logo](）oracle-VM安装red-hat-liunx/11278290-5bc80879edb2e0d6.png)\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-cd397c4737115c39.png)\n\n# 19 选择INSTALLATIONDESTINATION\n![logo](）oracle-VM安装red-hat-liunx/11278290-dc140d95517fb4de.png)\n\n# 20 点击Done,默认设置\n![logo](）oracle-VM安装red-hat-liunx/11278290-44f8decd9c26bb76.png)\n# 21 点击DATE&TIME\n![logo](）oracle-VM安装red-hat-liunx/11278290-62b4d6ecfa01455b.png)\n\n# 22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-5b08e271ee6f5d60.png)\n![logo](）oracle-VM安装red-hat-liunx/11278290-f36a34e0fbdd4dbf.png)\n# 23 点击BeginInstallation\n![logo](）oracle-VM安装red-hat-liunx/11278290-a75186d85c19ec0b.png)\n# 24 点击ROOT PASSWORD 进行设置ROOT 密码\n![logo](）oracle-VM安装red-hat-liunx/11278290-26a6a241112a9517.png)\n# 25 输入ROOT 密码点击Done\n![logo](）oracle-VM安装red-hat-liunx/11278290-7a2a749fed3fa8f9.png)\n# 26 耐心等候安装完成 如下图，点击REBOOT\n![logo](）oracle-VM安装red-hat-liunx/11278290-1df5c789751f5083.png)\n# 27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录\n![logo](）oracle-VM安装red-hat-liunx/11278290-1edb28581c216a0d.png)\n# 28 输入ip addr 查看当前虚拟机的ip\n正常：\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-92aec236bf64d15a.png)\n\n\n不正常：\n![logo](）oracle-VM安装red-hat-liunx/11278290-105894cde675332f.png)\n\n解决办法：\n\n cd/etc/sysconfig/network-scripts/\n\n打开网卡文件进行设置静态IP vi ifcfg-enp0s3\n\n首先把BOOTPROTO=\"dhcp\"改成BOOTPROTO=\"static\"表示静态获取，\n\n然后在最后追加比如下面的配置：\n\nIPADDR=192.168.1.33\n\nNETMASK=255.255.255.0\n\nGATEWAY=192.168.1.1\n\nDNS1=202.96.134.33\n\n保存后，\n\n运行systemctl restart network\n\n再次查看ip addr\n![logo](）oracle-VM安装red-hat-liunx/11278290-cc3760aa781c68ef.png)\n\n#  29 使用SecureCRT 进行连接虚拟机\n![logo](）oracle-VM安装red-hat-liunx/11278290-01decabbbeebf0d4.png)","source":"_posts/）oracle-VM安装red-hat-liunx.md","raw":"title: （一）oracle VM安装red hat liunx\nauthor: wen\ntags:\n  - red hat Linux\ncategories: []\ndate: 2018-05-08 15:01:00\n---\n软件：Oracle VM VirtualBox\n\n网络桥接物流网卡：\n\n# 1打开Oracle VMVirtualBox 点击新建按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-8cae3ccf049eb036.png)\n# 2 点击 下一步 按钮\n名称 输入：jenkins\n\n类型：Linux\n\n操作系统：Red Rat(64 bit)\n![logo](）oracle-VM安装red-hat-liunx/11278290-d23c40773d84371f.png)\n\n# 3 内存 默认1G，点击 下一步\n![logo](）oracle-VM安装red-hat-liunx/11278290-22f082cba471a8bb.png)\n\n# 4 选择 现在创建虚拟硬盘 ，点击 创建 按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-6a1302edff3ebf2e.png)\n\n# 5 默认选项，点击 下一步\n![logo](）oracle-VM安装red-hat-liunx/11278290-8baeb9eb905c71a2.png)\n\n# 6 选择 动态分配 ，点击 下一步 按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-7adf8cc44c0ee846.png)\n\n# 7  设置硬盘大小:40G ，后点击创建按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-4e335970ba06000f.png)\n\n# 8 点击设置按钮\n![logo](）oracle-VM安装red-hat-liunx/11278290-f9a8280cb4192f6b.png)\n\n# 9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项\n![logo](）oracle-VM安装red-hat-liunx/11278290-24e0f2beb6f3331e.png)\n\n# 10 进行选择ISO镜像，点击图中 红色部分\n![logo](）oracle-VM安装red-hat-liunx/11278290-0322ebd8568ed1e0.png)\n\n# 11 点击选择 磁盘\n![logo](）oracle-VM安装red-hat-liunx/11278290-82234f6e704f75f6.png)\n\n# 12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从https://www.linuxprobe.com/tools下载\n![logo](）oracle-VM安装red-hat-liunx/11278290-e8c8a52d140c5609.png)\n\n# 13 点击OK 按钮后\n![logo](）oracle-VM安装red-hat-liunx/11278290-e22e0734301c33b6.png)\n\n# 14 虚拟机设置完成，点击启动\n![logo](）oracle-VM安装red-hat-liunx/11278290-23e3a150c783f9fb.png)\n\n# 15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1-->enter\n![logo](）oracle-VM安装red-hat-liunx/11278290-b20d2391b41df6dc.png)\n\n\n# 16 选择语言 界面 ，点击continue\n![logo](）oracle-VM安装red-hat-liunx/11278290-fe5bdba62c19c919.png)\n\n# 17 点击network& host name\n![logo](）oracle-VM安装red-hat-liunx/11278290-77b646357a8b5e8a.png)\n\n# 18 OFF 改为ON后，点击DONE\n![logo](）oracle-VM安装red-hat-liunx/11278290-5bc80879edb2e0d6.png)\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-cd397c4737115c39.png)\n\n# 19 选择INSTALLATIONDESTINATION\n![logo](）oracle-VM安装red-hat-liunx/11278290-dc140d95517fb4de.png)\n\n# 20 点击Done,默认设置\n![logo](）oracle-VM安装red-hat-liunx/11278290-44f8decd9c26bb76.png)\n# 21 点击DATE&TIME\n![logo](）oracle-VM安装red-hat-liunx/11278290-62b4d6ecfa01455b.png)\n\n# 22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-5b08e271ee6f5d60.png)\n![logo](）oracle-VM安装red-hat-liunx/11278290-f36a34e0fbdd4dbf.png)\n# 23 点击BeginInstallation\n![logo](）oracle-VM安装red-hat-liunx/11278290-a75186d85c19ec0b.png)\n# 24 点击ROOT PASSWORD 进行设置ROOT 密码\n![logo](）oracle-VM安装red-hat-liunx/11278290-26a6a241112a9517.png)\n# 25 输入ROOT 密码点击Done\n![logo](）oracle-VM安装red-hat-liunx/11278290-7a2a749fed3fa8f9.png)\n# 26 耐心等候安装完成 如下图，点击REBOOT\n![logo](）oracle-VM安装red-hat-liunx/11278290-1df5c789751f5083.png)\n# 27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录\n![logo](）oracle-VM安装red-hat-liunx/11278290-1edb28581c216a0d.png)\n# 28 输入ip addr 查看当前虚拟机的ip\n正常：\n\n![logo](）oracle-VM安装red-hat-liunx/11278290-92aec236bf64d15a.png)\n\n\n不正常：\n![logo](）oracle-VM安装red-hat-liunx/11278290-105894cde675332f.png)\n\n解决办法：\n\n cd/etc/sysconfig/network-scripts/\n\n打开网卡文件进行设置静态IP vi ifcfg-enp0s3\n\n首先把BOOTPROTO=\"dhcp\"改成BOOTPROTO=\"static\"表示静态获取，\n\n然后在最后追加比如下面的配置：\n\nIPADDR=192.168.1.33\n\nNETMASK=255.255.255.0\n\nGATEWAY=192.168.1.1\n\nDNS1=202.96.134.33\n\n保存后，\n\n运行systemctl restart network\n\n再次查看ip addr\n![logo](）oracle-VM安装red-hat-liunx/11278290-cc3760aa781c68ef.png)\n\n#  29 使用SecureCRT 进行连接虚拟机\n![logo](）oracle-VM安装red-hat-liunx/11278290-01decabbbeebf0d4.png)","slug":"）oracle-VM安装red-hat-liunx","published":1,"updated":"2018-05-08T07:28:17.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzkw001mxwjl37d2qmtj","content":"<p>软件：Oracle VM VirtualBox</p>\n<p>网络桥接物流网卡：</p>\n<h1 id=\"1打开Oracle-VMVirtualBox-点击新建按钮\"><a href=\"#1打开Oracle-VMVirtualBox-点击新建按钮\" class=\"headerlink\" title=\"1打开Oracle VMVirtualBox 点击新建按钮\"></a>1打开Oracle VMVirtualBox 点击新建按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-8cae3ccf049eb036.png\" alt=\"logo\"></p>\n<h1 id=\"2-点击-下一步-按钮\"><a href=\"#2-点击-下一步-按钮\" class=\"headerlink\" title=\"2 点击 下一步 按钮\"></a>2 点击 下一步 按钮</h1><p>名称 输入：jenkins</p>\n<p>类型：Linux</p>\n<p>操作系统：Red Rat(64 bit)<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-d23c40773d84371f.png\" alt=\"logo\"></p>\n<h1 id=\"3-内存-默认1G，点击-下一步\"><a href=\"#3-内存-默认1G，点击-下一步\" class=\"headerlink\" title=\"3 内存 默认1G，点击 下一步\"></a>3 内存 默认1G，点击 下一步</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-22f082cba471a8bb.png\" alt=\"logo\"></p>\n<h1 id=\"4-选择-现在创建虚拟硬盘-，点击-创建-按钮\"><a href=\"#4-选择-现在创建虚拟硬盘-，点击-创建-按钮\" class=\"headerlink\" title=\"4 选择 现在创建虚拟硬盘 ，点击 创建 按钮\"></a>4 选择 现在创建虚拟硬盘 ，点击 创建 按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-6a1302edff3ebf2e.png\" alt=\"logo\"></p>\n<h1 id=\"5-默认选项，点击-下一步\"><a href=\"#5-默认选项，点击-下一步\" class=\"headerlink\" title=\"5 默认选项，点击 下一步\"></a>5 默认选项，点击 下一步</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-8baeb9eb905c71a2.png\" alt=\"logo\"></p>\n<h1 id=\"6-选择-动态分配-，点击-下一步-按钮\"><a href=\"#6-选择-动态分配-，点击-下一步-按钮\" class=\"headerlink\" title=\"6 选择 动态分配 ，点击 下一步 按钮\"></a>6 选择 动态分配 ，点击 下一步 按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-7adf8cc44c0ee846.png\" alt=\"logo\"></p>\n<h1 id=\"7-设置硬盘大小-40G-，后点击创建按钮\"><a href=\"#7-设置硬盘大小-40G-，后点击创建按钮\" class=\"headerlink\" title=\"7  设置硬盘大小:40G ，后点击创建按钮\"></a>7  设置硬盘大小:40G ，后点击创建按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-4e335970ba06000f.png\" alt=\"logo\"></p>\n<h1 id=\"8-点击设置按钮\"><a href=\"#8-点击设置按钮\" class=\"headerlink\" title=\"8 点击设置按钮\"></a>8 点击设置按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-f9a8280cb4192f6b.png\" alt=\"logo\"></p>\n<h1 id=\"9-选择-网卡-选项，选择-桥接网卡-方式，选择存储选项\"><a href=\"#9-选择-网卡-选项，选择-桥接网卡-方式，选择存储选项\" class=\"headerlink\" title=\"9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项\"></a>9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-24e0f2beb6f3331e.png\" alt=\"logo\"></p>\n<h1 id=\"10-进行选择ISO镜像，点击图中-红色部分\"><a href=\"#10-进行选择ISO镜像，点击图中-红色部分\" class=\"headerlink\" title=\"10 进行选择ISO镜像，点击图中 红色部分\"></a>10 进行选择ISO镜像，点击图中 红色部分</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-0322ebd8568ed1e0.png\" alt=\"logo\"></p>\n<h1 id=\"11-点击选择-磁盘\"><a href=\"#11-点击选择-磁盘\" class=\"headerlink\" title=\"11 点击选择 磁盘\"></a>11 点击选择 磁盘</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-82234f6e704f75f6.png\" alt=\"logo\"></p>\n<h1 id=\"12-在弹出窗口-选择-系统镜像，选择完成-，点击打开按钮镜像可以从https-www-linuxprobe-com-tools下载\"><a href=\"#12-在弹出窗口-选择-系统镜像，选择完成-，点击打开按钮镜像可以从https-www-linuxprobe-com-tools下载\" class=\"headerlink\" title=\"12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从https://www.linuxprobe.com/tools下载\"></a>12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从<a href=\"https://www.linuxprobe.com/tools下载\" target=\"_blank\" rel=\"noopener\">https://www.linuxprobe.com/tools下载</a></h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-e8c8a52d140c5609.png\" alt=\"logo\"></p>\n<h1 id=\"13-点击OK-按钮后\"><a href=\"#13-点击OK-按钮后\" class=\"headerlink\" title=\"13 点击OK 按钮后\"></a>13 点击OK 按钮后</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-e22e0734301c33b6.png\" alt=\"logo\"></p>\n<h1 id=\"14-虚拟机设置完成，点击启动\"><a href=\"#14-虚拟机设置完成，点击启动\" class=\"headerlink\" title=\"14 虚拟机设置完成，点击启动\"></a>14 虚拟机设置完成，点击启动</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-23e3a150c783f9fb.png\" alt=\"logo\"></p>\n<h1 id=\"15-点击-启动按钮-选择InstallRed-Hat-Enterprise-Linux-7-1–-gt-enter\"><a href=\"#15-点击-启动按钮-选择InstallRed-Hat-Enterprise-Linux-7-1–-gt-enter\" class=\"headerlink\" title=\"15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1–&gt;enter\"></a>15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1–&gt;enter</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-b20d2391b41df6dc.png\" alt=\"logo\"></p>\n<h1 id=\"16-选择语言-界面-，点击continue\"><a href=\"#16-选择语言-界面-，点击continue\" class=\"headerlink\" title=\"16 选择语言 界面 ，点击continue\"></a>16 选择语言 界面 ，点击continue</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-fe5bdba62c19c919.png\" alt=\"logo\"></p>\n<h1 id=\"17-点击network-amp-host-name\"><a href=\"#17-点击network-amp-host-name\" class=\"headerlink\" title=\"17 点击network&amp; host name\"></a>17 点击network&amp; host name</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-77b646357a8b5e8a.png\" alt=\"logo\"></p>\n<h1 id=\"18-OFF-改为ON后，点击DONE\"><a href=\"#18-OFF-改为ON后，点击DONE\" class=\"headerlink\" title=\"18 OFF 改为ON后，点击DONE\"></a>18 OFF 改为ON后，点击DONE</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-5bc80879edb2e0d6.png\" alt=\"logo\"></p>\n<p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-cd397c4737115c39.png\" alt=\"logo\"></p>\n<h1 id=\"19-选择INSTALLATIONDESTINATION\"><a href=\"#19-选择INSTALLATIONDESTINATION\" class=\"headerlink\" title=\"19 选择INSTALLATIONDESTINATION\"></a>19 选择INSTALLATIONDESTINATION</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-dc140d95517fb4de.png\" alt=\"logo\"></p>\n<h1 id=\"20-点击Done-默认设置\"><a href=\"#20-点击Done-默认设置\" class=\"headerlink\" title=\"20 点击Done,默认设置\"></a>20 点击Done,默认设置</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-44f8decd9c26bb76.png\" alt=\"logo\"></p>\n<h1 id=\"21-点击DATE-amp-TIME\"><a href=\"#21-点击DATE-amp-TIME\" class=\"headerlink\" title=\"21 点击DATE&amp;TIME\"></a>21 点击DATE&amp;TIME</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-62b4d6ecfa01455b.png\" alt=\"logo\"></p>\n<h1 id=\"22-Region-改为Asia-City-上海，networkTime-ON，后点击Done\"><a href=\"#22-Region-改为Asia-City-上海，networkTime-ON，后点击Done\" class=\"headerlink\" title=\"22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done\"></a>22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-5b08e271ee6f5d60.png\" alt=\"logo\"><br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-f36a34e0fbdd4dbf.png\" alt=\"logo\"></p>\n<h1 id=\"23-点击BeginInstallation\"><a href=\"#23-点击BeginInstallation\" class=\"headerlink\" title=\"23 点击BeginInstallation\"></a>23 点击BeginInstallation</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-a75186d85c19ec0b.png\" alt=\"logo\"></p>\n<h1 id=\"24-点击ROOT-PASSWORD-进行设置ROOT-密码\"><a href=\"#24-点击ROOT-PASSWORD-进行设置ROOT-密码\" class=\"headerlink\" title=\"24 点击ROOT PASSWORD 进行设置ROOT 密码\"></a>24 点击ROOT PASSWORD 进行设置ROOT 密码</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-26a6a241112a9517.png\" alt=\"logo\"></p>\n<h1 id=\"25-输入ROOT-密码点击Done\"><a href=\"#25-输入ROOT-密码点击Done\" class=\"headerlink\" title=\"25 输入ROOT 密码点击Done\"></a>25 输入ROOT 密码点击Done</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-7a2a749fed3fa8f9.png\" alt=\"logo\"></p>\n<h1 id=\"26-耐心等候安装完成-如下图，点击REBOOT\"><a href=\"#26-耐心等候安装完成-如下图，点击REBOOT\" class=\"headerlink\" title=\"26 耐心等候安装完成 如下图，点击REBOOT\"></a>26 耐心等候安装完成 如下图，点击REBOOT</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-1df5c789751f5083.png\" alt=\"logo\"></p>\n<h1 id=\"27-重启完成，如下图，表示安装成功，使用ROOT用户进行登录\"><a href=\"#27-重启完成，如下图，表示安装成功，使用ROOT用户进行登录\" class=\"headerlink\" title=\"27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录\"></a>27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-1edb28581c216a0d.png\" alt=\"logo\"></p>\n<h1 id=\"28-输入ip-addr-查看当前虚拟机的ip\"><a href=\"#28-输入ip-addr-查看当前虚拟机的ip\" class=\"headerlink\" title=\"28 输入ip addr 查看当前虚拟机的ip\"></a>28 输入ip addr 查看当前虚拟机的ip</h1><p>正常：</p>\n<p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-92aec236bf64d15a.png\" alt=\"logo\"></p>\n<p>不正常：<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-105894cde675332f.png\" alt=\"logo\"></p>\n<p>解决办法：</p>\n<p> cd/etc/sysconfig/network-scripts/</p>\n<p>打开网卡文件进行设置静态IP vi ifcfg-enp0s3</p>\n<p>首先把BOOTPROTO=”dhcp”改成BOOTPROTO=”static”表示静态获取，</p>\n<p>然后在最后追加比如下面的配置：</p>\n<p>IPADDR=192.168.1.33</p>\n<p>NETMASK=255.255.255.0</p>\n<p>GATEWAY=192.168.1.1</p>\n<p>DNS1=202.96.134.33</p>\n<p>保存后，</p>\n<p>运行systemctl restart network</p>\n<p>再次查看ip addr<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-cc3760aa781c68ef.png\" alt=\"logo\"></p>\n<h1 id=\"29-使用SecureCRT-进行连接虚拟机\"><a href=\"#29-使用SecureCRT-进行连接虚拟机\" class=\"headerlink\" title=\"29 使用SecureCRT 进行连接虚拟机\"></a>29 使用SecureCRT 进行连接虚拟机</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-01decabbbeebf0d4.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>软件：Oracle VM VirtualBox</p>\n<p>网络桥接物流网卡：</p>\n<h1 id=\"1打开Oracle-VMVirtualBox-点击新建按钮\"><a href=\"#1打开Oracle-VMVirtualBox-点击新建按钮\" class=\"headerlink\" title=\"1打开Oracle VMVirtualBox 点击新建按钮\"></a>1打开Oracle VMVirtualBox 点击新建按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-8cae3ccf049eb036.png\" alt=\"logo\"></p>\n<h1 id=\"2-点击-下一步-按钮\"><a href=\"#2-点击-下一步-按钮\" class=\"headerlink\" title=\"2 点击 下一步 按钮\"></a>2 点击 下一步 按钮</h1><p>名称 输入：jenkins</p>\n<p>类型：Linux</p>\n<p>操作系统：Red Rat(64 bit)<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-d23c40773d84371f.png\" alt=\"logo\"></p>\n<h1 id=\"3-内存-默认1G，点击-下一步\"><a href=\"#3-内存-默认1G，点击-下一步\" class=\"headerlink\" title=\"3 内存 默认1G，点击 下一步\"></a>3 内存 默认1G，点击 下一步</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-22f082cba471a8bb.png\" alt=\"logo\"></p>\n<h1 id=\"4-选择-现在创建虚拟硬盘-，点击-创建-按钮\"><a href=\"#4-选择-现在创建虚拟硬盘-，点击-创建-按钮\" class=\"headerlink\" title=\"4 选择 现在创建虚拟硬盘 ，点击 创建 按钮\"></a>4 选择 现在创建虚拟硬盘 ，点击 创建 按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-6a1302edff3ebf2e.png\" alt=\"logo\"></p>\n<h1 id=\"5-默认选项，点击-下一步\"><a href=\"#5-默认选项，点击-下一步\" class=\"headerlink\" title=\"5 默认选项，点击 下一步\"></a>5 默认选项，点击 下一步</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-8baeb9eb905c71a2.png\" alt=\"logo\"></p>\n<h1 id=\"6-选择-动态分配-，点击-下一步-按钮\"><a href=\"#6-选择-动态分配-，点击-下一步-按钮\" class=\"headerlink\" title=\"6 选择 动态分配 ，点击 下一步 按钮\"></a>6 选择 动态分配 ，点击 下一步 按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-7adf8cc44c0ee846.png\" alt=\"logo\"></p>\n<h1 id=\"7-设置硬盘大小-40G-，后点击创建按钮\"><a href=\"#7-设置硬盘大小-40G-，后点击创建按钮\" class=\"headerlink\" title=\"7  设置硬盘大小:40G ，后点击创建按钮\"></a>7  设置硬盘大小:40G ，后点击创建按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-4e335970ba06000f.png\" alt=\"logo\"></p>\n<h1 id=\"8-点击设置按钮\"><a href=\"#8-点击设置按钮\" class=\"headerlink\" title=\"8 点击设置按钮\"></a>8 点击设置按钮</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-f9a8280cb4192f6b.png\" alt=\"logo\"></p>\n<h1 id=\"9-选择-网卡-选项，选择-桥接网卡-方式，选择存储选项\"><a href=\"#9-选择-网卡-选项，选择-桥接网卡-方式，选择存储选项\" class=\"headerlink\" title=\"9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项\"></a>9 选择 网卡 选项，选择 桥接网卡 方式，选择存储选项</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-24e0f2beb6f3331e.png\" alt=\"logo\"></p>\n<h1 id=\"10-进行选择ISO镜像，点击图中-红色部分\"><a href=\"#10-进行选择ISO镜像，点击图中-红色部分\" class=\"headerlink\" title=\"10 进行选择ISO镜像，点击图中 红色部分\"></a>10 进行选择ISO镜像，点击图中 红色部分</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-0322ebd8568ed1e0.png\" alt=\"logo\"></p>\n<h1 id=\"11-点击选择-磁盘\"><a href=\"#11-点击选择-磁盘\" class=\"headerlink\" title=\"11 点击选择 磁盘\"></a>11 点击选择 磁盘</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-82234f6e704f75f6.png\" alt=\"logo\"></p>\n<h1 id=\"12-在弹出窗口-选择-系统镜像，选择完成-，点击打开按钮镜像可以从https-www-linuxprobe-com-tools下载\"><a href=\"#12-在弹出窗口-选择-系统镜像，选择完成-，点击打开按钮镜像可以从https-www-linuxprobe-com-tools下载\" class=\"headerlink\" title=\"12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从https://www.linuxprobe.com/tools下载\"></a>12 在弹出窗口 选择 系统镜像，选择完成 ，点击打开按钮镜像可以从<a href=\"https://www.linuxprobe.com/tools下载\" target=\"_blank\" rel=\"noopener\">https://www.linuxprobe.com/tools下载</a></h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-e8c8a52d140c5609.png\" alt=\"logo\"></p>\n<h1 id=\"13-点击OK-按钮后\"><a href=\"#13-点击OK-按钮后\" class=\"headerlink\" title=\"13 点击OK 按钮后\"></a>13 点击OK 按钮后</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-e22e0734301c33b6.png\" alt=\"logo\"></p>\n<h1 id=\"14-虚拟机设置完成，点击启动\"><a href=\"#14-虚拟机设置完成，点击启动\" class=\"headerlink\" title=\"14 虚拟机设置完成，点击启动\"></a>14 虚拟机设置完成，点击启动</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-23e3a150c783f9fb.png\" alt=\"logo\"></p>\n<h1 id=\"15-点击-启动按钮-选择InstallRed-Hat-Enterprise-Linux-7-1–-gt-enter\"><a href=\"#15-点击-启动按钮-选择InstallRed-Hat-Enterprise-Linux-7-1–-gt-enter\" class=\"headerlink\" title=\"15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1–&gt;enter\"></a>15 点击 启动按钮,选择InstallRed Hat Enterprise Linux 7.1–&gt;enter</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-b20d2391b41df6dc.png\" alt=\"logo\"></p>\n<h1 id=\"16-选择语言-界面-，点击continue\"><a href=\"#16-选择语言-界面-，点击continue\" class=\"headerlink\" title=\"16 选择语言 界面 ，点击continue\"></a>16 选择语言 界面 ，点击continue</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-fe5bdba62c19c919.png\" alt=\"logo\"></p>\n<h1 id=\"17-点击network-amp-host-name\"><a href=\"#17-点击network-amp-host-name\" class=\"headerlink\" title=\"17 点击network&amp; host name\"></a>17 点击network&amp; host name</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-77b646357a8b5e8a.png\" alt=\"logo\"></p>\n<h1 id=\"18-OFF-改为ON后，点击DONE\"><a href=\"#18-OFF-改为ON后，点击DONE\" class=\"headerlink\" title=\"18 OFF 改为ON后，点击DONE\"></a>18 OFF 改为ON后，点击DONE</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-5bc80879edb2e0d6.png\" alt=\"logo\"></p>\n<p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-cd397c4737115c39.png\" alt=\"logo\"></p>\n<h1 id=\"19-选择INSTALLATIONDESTINATION\"><a href=\"#19-选择INSTALLATIONDESTINATION\" class=\"headerlink\" title=\"19 选择INSTALLATIONDESTINATION\"></a>19 选择INSTALLATIONDESTINATION</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-dc140d95517fb4de.png\" alt=\"logo\"></p>\n<h1 id=\"20-点击Done-默认设置\"><a href=\"#20-点击Done-默认设置\" class=\"headerlink\" title=\"20 点击Done,默认设置\"></a>20 点击Done,默认设置</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-44f8decd9c26bb76.png\" alt=\"logo\"></p>\n<h1 id=\"21-点击DATE-amp-TIME\"><a href=\"#21-点击DATE-amp-TIME\" class=\"headerlink\" title=\"21 点击DATE&amp;TIME\"></a>21 点击DATE&amp;TIME</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-62b4d6ecfa01455b.png\" alt=\"logo\"></p>\n<h1 id=\"22-Region-改为Asia-City-上海，networkTime-ON，后点击Done\"><a href=\"#22-Region-改为Asia-City-上海，networkTime-ON，后点击Done\" class=\"headerlink\" title=\"22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done\"></a>22 Region 改为Asia ,City:上海，networkTime=ON，后点击Done</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-5b08e271ee6f5d60.png\" alt=\"logo\"><br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-f36a34e0fbdd4dbf.png\" alt=\"logo\"></p>\n<h1 id=\"23-点击BeginInstallation\"><a href=\"#23-点击BeginInstallation\" class=\"headerlink\" title=\"23 点击BeginInstallation\"></a>23 点击BeginInstallation</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-a75186d85c19ec0b.png\" alt=\"logo\"></p>\n<h1 id=\"24-点击ROOT-PASSWORD-进行设置ROOT-密码\"><a href=\"#24-点击ROOT-PASSWORD-进行设置ROOT-密码\" class=\"headerlink\" title=\"24 点击ROOT PASSWORD 进行设置ROOT 密码\"></a>24 点击ROOT PASSWORD 进行设置ROOT 密码</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-26a6a241112a9517.png\" alt=\"logo\"></p>\n<h1 id=\"25-输入ROOT-密码点击Done\"><a href=\"#25-输入ROOT-密码点击Done\" class=\"headerlink\" title=\"25 输入ROOT 密码点击Done\"></a>25 输入ROOT 密码点击Done</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-7a2a749fed3fa8f9.png\" alt=\"logo\"></p>\n<h1 id=\"26-耐心等候安装完成-如下图，点击REBOOT\"><a href=\"#26-耐心等候安装完成-如下图，点击REBOOT\" class=\"headerlink\" title=\"26 耐心等候安装完成 如下图，点击REBOOT\"></a>26 耐心等候安装完成 如下图，点击REBOOT</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-1df5c789751f5083.png\" alt=\"logo\"></p>\n<h1 id=\"27-重启完成，如下图，表示安装成功，使用ROOT用户进行登录\"><a href=\"#27-重启完成，如下图，表示安装成功，使用ROOT用户进行登录\" class=\"headerlink\" title=\"27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录\"></a>27 重启完成，如下图，表示安装成功，使用ROOT用户进行登录</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-1edb28581c216a0d.png\" alt=\"logo\"></p>\n<h1 id=\"28-输入ip-addr-查看当前虚拟机的ip\"><a href=\"#28-输入ip-addr-查看当前虚拟机的ip\" class=\"headerlink\" title=\"28 输入ip addr 查看当前虚拟机的ip\"></a>28 输入ip addr 查看当前虚拟机的ip</h1><p>正常：</p>\n<p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-92aec236bf64d15a.png\" alt=\"logo\"></p>\n<p>不正常：<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-105894cde675332f.png\" alt=\"logo\"></p>\n<p>解决办法：</p>\n<p> cd/etc/sysconfig/network-scripts/</p>\n<p>打开网卡文件进行设置静态IP vi ifcfg-enp0s3</p>\n<p>首先把BOOTPROTO=”dhcp”改成BOOTPROTO=”static”表示静态获取，</p>\n<p>然后在最后追加比如下面的配置：</p>\n<p>IPADDR=192.168.1.33</p>\n<p>NETMASK=255.255.255.0</p>\n<p>GATEWAY=192.168.1.1</p>\n<p>DNS1=202.96.134.33</p>\n<p>保存后，</p>\n<p>运行systemctl restart network</p>\n<p>再次查看ip addr<br><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-cc3760aa781c68ef.png\" alt=\"logo\"></p>\n<h1 id=\"29-使用SecureCRT-进行连接虚拟机\"><a href=\"#29-使用SecureCRT-进行连接虚拟机\" class=\"headerlink\" title=\"29 使用SecureCRT 进行连接虚拟机\"></a>29 使用SecureCRT 进行连接虚拟机</h1><p><img src=\"/2018/05/08/）oracle-VM安装red-hat-liunx/11278290-01decabbbeebf0d4.png\" alt=\"logo\"></p>\n"},{"title":"（六）docker安装本地仓库（root用户）","author":"wen","date":"2018-05-08T09:09:00.000Z","_content":"参考：\n[安装docker](/2018/05/08/（四）安装docker（root用户）/)\n\n创建使用仓库，并设置https 及安全访问\n\n# 1下载镜像 \n```\n > docker pull registry \n```\n# 2 创建目录\n```\n> mkdir -p ~/certs \n```\n\n# 3 进入目录\n```\n> cd ~/certs  \n```\n\n# 4 创建域名证书\n```\n> openssl genrsa -out rep.itmuch.com.key 2048 \n```\n\n# 5 创建证书\n```\n> openssl req -newkey rsa:4096 -nodes -sha256 -keyout \\ rep.itmuch.com.key -x509 -days 365 -out \\ rep.itmuch.com.crt  \n\nCountry Name (2 letter code) [XX]:       # 你的国家名称\n\nCN State or Province Name (full name) []:GD    # 省份\n\nLocality Name (eg, city) [Default City]:GZ      # 所在城市\n\nOrganization Name (eg, company) [DefaultCompany Ltd]:test     # 组织名称\n\nOrganizational Unit Name (eg, section)[]:test      # 组织单元名称\n\nCommon Name (eg, your name or your server'shostname) []:rep.itmuch.com    # 域名\n\nEmail Address []:     # 邮箱 \n```\n# 3 复制证书至docker\n## 3.1创建目录\n```\n> mkdir -p /etc/docker/certs.d/rep.itmuch.com\n```\n## 3.2 复制证书至docker目录\n```\n> cp ~/certs/rep.itmuch.com.crt /etc/docker/certs.d/rep.itmuch.com/ \n```\n## 3.3 重启docker\n```\n> systemctl restart docker  \n```\n\n# 4 设置用户名和密码\n## 4.1 安装 httpd-tools\n```\n> yum install httpd-tools \n```\n## 4.2 当前登录用户\n```\n> cd~  \n```\n## 4.3 创建目录\n```\n>mkdir auth \n```\n## 4.4创建用户名和密码 \n```\nhtpasswd -Bbn testuser testpassword > auth/htpasswd  \n```\n## 5 运行\n```\ndocker run -d -p 443:5000   \\-v /root/certs:/certs \\ -v/root/auth:/auth \\-v /opt/docker-image:/var/lib/registry \\-e STORAGE_PATH=/opt/docker-image \\-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/rep.itmuch.com.crt\\-e REGISTRY_HTTP_TLS_KEY=/certs/rep.itmuch.com.key\\ -e\"REGISTRY_AUTH=htpasswd\" \\  -e\"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\  -eREGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\registry\n```\n# host主机名\n```\n echo '192.168.137.8 rep.itmuch.com'>> /etc/hosts \n```\n\n\n# 登录私有库\n```\ndocker login rep.itmuch.com\n```\npush或pull需要登录否则不能报错\n\n# push到私有库\n```\ndocker tag alpine rep.itmuch.com/alpine\n\ndocker push rep.itmuch.com/alpine\n```\n\n# 查看镜像目录\n```\nhttps://rep.itmuch.com/v2/_catalog\n```\n\n# 查看镜像 版本列表\n```\nhttps://rep.itmuch.com/v2/alpine/tags/list\n```","source":"_posts/（六）docker安装本地仓库（root用户）.md","raw":"title: （六）docker安装本地仓库（root用户）\nauthor: wen\ntags:\n  - docker\ncategories: []\ndate: 2018-05-08 17:09:00\n---\n参考：\n[安装docker](/2018/05/08/（四）安装docker（root用户）/)\n\n创建使用仓库，并设置https 及安全访问\n\n# 1下载镜像 \n```\n > docker pull registry \n```\n# 2 创建目录\n```\n> mkdir -p ~/certs \n```\n\n# 3 进入目录\n```\n> cd ~/certs  \n```\n\n# 4 创建域名证书\n```\n> openssl genrsa -out rep.itmuch.com.key 2048 \n```\n\n# 5 创建证书\n```\n> openssl req -newkey rsa:4096 -nodes -sha256 -keyout \\ rep.itmuch.com.key -x509 -days 365 -out \\ rep.itmuch.com.crt  \n\nCountry Name (2 letter code) [XX]:       # 你的国家名称\n\nCN State or Province Name (full name) []:GD    # 省份\n\nLocality Name (eg, city) [Default City]:GZ      # 所在城市\n\nOrganization Name (eg, company) [DefaultCompany Ltd]:test     # 组织名称\n\nOrganizational Unit Name (eg, section)[]:test      # 组织单元名称\n\nCommon Name (eg, your name or your server'shostname) []:rep.itmuch.com    # 域名\n\nEmail Address []:     # 邮箱 \n```\n# 3 复制证书至docker\n## 3.1创建目录\n```\n> mkdir -p /etc/docker/certs.d/rep.itmuch.com\n```\n## 3.2 复制证书至docker目录\n```\n> cp ~/certs/rep.itmuch.com.crt /etc/docker/certs.d/rep.itmuch.com/ \n```\n## 3.3 重启docker\n```\n> systemctl restart docker  \n```\n\n# 4 设置用户名和密码\n## 4.1 安装 httpd-tools\n```\n> yum install httpd-tools \n```\n## 4.2 当前登录用户\n```\n> cd~  \n```\n## 4.3 创建目录\n```\n>mkdir auth \n```\n## 4.4创建用户名和密码 \n```\nhtpasswd -Bbn testuser testpassword > auth/htpasswd  \n```\n## 5 运行\n```\ndocker run -d -p 443:5000   \\-v /root/certs:/certs \\ -v/root/auth:/auth \\-v /opt/docker-image:/var/lib/registry \\-e STORAGE_PATH=/opt/docker-image \\-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/rep.itmuch.com.crt\\-e REGISTRY_HTTP_TLS_KEY=/certs/rep.itmuch.com.key\\ -e\"REGISTRY_AUTH=htpasswd\" \\  -e\"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\  -eREGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\registry\n```\n# host主机名\n```\n echo '192.168.137.8 rep.itmuch.com'>> /etc/hosts \n```\n\n\n# 登录私有库\n```\ndocker login rep.itmuch.com\n```\npush或pull需要登录否则不能报错\n\n# push到私有库\n```\ndocker tag alpine rep.itmuch.com/alpine\n\ndocker push rep.itmuch.com/alpine\n```\n\n# 查看镜像目录\n```\nhttps://rep.itmuch.com/v2/_catalog\n```\n\n# 查看镜像 版本列表\n```\nhttps://rep.itmuch.com/v2/alpine/tags/list\n```","slug":"（六）docker安装本地仓库（root用户）","published":1,"updated":"2019-05-06T07:50:59.709Z","_id":"cjvbprzl1001oxwjl37gvwcvx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：<br><a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker</a></p>\n<p>创建使用仓库，并设置https 及安全访问</p>\n<h1 id=\"1下载镜像\"><a href=\"#1下载镜像\" class=\"headerlink\" title=\"1下载镜像\"></a>1下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker pull registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-创建目录\"><a href=\"#2-创建目录\" class=\"headerlink\" title=\"2 创建目录\"></a>2 创建目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir -p ~/certs</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-进入目录\"><a href=\"#3-进入目录\" class=\"headerlink\" title=\"3 进入目录\"></a>3 进入目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd ~/certs</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-创建域名证书\"><a href=\"#4-创建域名证书\" class=\"headerlink\" title=\"4 创建域名证书\"></a>4 创建域名证书</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; openssl genrsa -out rep.itmuch.com.key 2048</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-创建证书\"><a href=\"#5-创建证书\" class=\"headerlink\" title=\"5 创建证书\"></a>5 创建证书</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; openssl req -newkey rsa:4096 -nodes -sha256 -keyout \\ rep.itmuch.com.key -x509 -days 365 -out \\ rep.itmuch.com.crt  </span><br><span class=\"line\"></span><br><span class=\"line\">Country Name (2 letter code) [XX]:       # 你的国家名称</span><br><span class=\"line\"></span><br><span class=\"line\">CN State or Province Name (full name) []:GD    # 省份</span><br><span class=\"line\"></span><br><span class=\"line\">Locality Name (eg, city) [Default City]:GZ      # 所在城市</span><br><span class=\"line\"></span><br><span class=\"line\">Organization Name (eg, company) [DefaultCompany Ltd]:test     # 组织名称</span><br><span class=\"line\"></span><br><span class=\"line\">Organizational Unit Name (eg, section)[]:test      # 组织单元名称</span><br><span class=\"line\"></span><br><span class=\"line\">Common Name (eg, your name or your server&apos;shostname) []:rep.itmuch.com    # 域名</span><br><span class=\"line\"></span><br><span class=\"line\">Email Address []:     # 邮箱</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-复制证书至docker\"><a href=\"#3-复制证书至docker\" class=\"headerlink\" title=\"3 复制证书至docker\"></a>3 复制证书至docker</h1><h2 id=\"3-1创建目录\"><a href=\"#3-1创建目录\" class=\"headerlink\" title=\"3.1创建目录\"></a>3.1创建目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir -p /etc/docker/certs.d/rep.itmuch.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-复制证书至docker目录\"><a href=\"#3-2-复制证书至docker目录\" class=\"headerlink\" title=\"3.2 复制证书至docker目录\"></a>3.2 复制证书至docker目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cp ~/certs/rep.itmuch.com.crt /etc/docker/certs.d/rep.itmuch.com/</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-重启docker\"><a href=\"#3-3-重启docker\" class=\"headerlink\" title=\"3.3 重启docker\"></a>3.3 重启docker</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-设置用户名和密码\"><a href=\"#4-设置用户名和密码\" class=\"headerlink\" title=\"4 设置用户名和密码\"></a>4 设置用户名和密码</h1><h2 id=\"4-1-安装-httpd-tools\"><a href=\"#4-1-安装-httpd-tools\" class=\"headerlink\" title=\"4.1 安装 httpd-tools\"></a>4.1 安装 httpd-tools</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install httpd-tools</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-当前登录用户\"><a href=\"#4-2-当前登录用户\" class=\"headerlink\" title=\"4.2 当前登录用户\"></a>4.2 当前登录用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd~</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-创建目录\"><a href=\"#4-3-创建目录\" class=\"headerlink\" title=\"4.3 创建目录\"></a>4.3 创建目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;mkdir auth</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4创建用户名和密码\"><a href=\"#4-4创建用户名和密码\" class=\"headerlink\" title=\"4.4创建用户名和密码\"></a>4.4创建用户名和密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -Bbn testuser testpassword &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-运行\"><a href=\"#5-运行\" class=\"headerlink\" title=\"5 运行\"></a>5 运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 443:5000   \\-v /root/certs:/certs \\ -v/root/auth:/auth \\-v /opt/docker-image:/var/lib/registry \\-e STORAGE_PATH=/opt/docker-image \\-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/rep.itmuch.com.crt\\-e REGISTRY_HTTP_TLS_KEY=/certs/rep.itmuch.com.key\\ -e&quot;REGISTRY_AUTH=htpasswd&quot; \\  -e&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\  -eREGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"host主机名\"><a href=\"#host主机名\" class=\"headerlink\" title=\"host主机名\"></a>host主机名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;192.168.137.8 rep.itmuch.com&apos;&gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<h1 id=\"登录私有库\"><a href=\"#登录私有库\" class=\"headerlink\" title=\"登录私有库\"></a>登录私有库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login rep.itmuch.com</span><br></pre></td></tr></table></figure>\n<p>push或pull需要登录否则不能报错</p>\n<h1 id=\"push到私有库\"><a href=\"#push到私有库\" class=\"headerlink\" title=\"push到私有库\"></a>push到私有库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag alpine rep.itmuch.com/alpine</span><br><span class=\"line\"></span><br><span class=\"line\">docker push rep.itmuch.com/alpine</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像目录\"><a href=\"#查看镜像目录\" class=\"headerlink\" title=\"查看镜像目录\"></a>查看镜像目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://rep.itmuch.com/v2/_catalog</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像-版本列表\"><a href=\"#查看镜像-版本列表\" class=\"headerlink\" title=\"查看镜像 版本列表\"></a>查看镜像 版本列表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://rep.itmuch.com/v2/alpine/tags/list</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>参考：<br><a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker</a></p>\n<p>创建使用仓库，并设置https 及安全访问</p>\n<h1 id=\"1下载镜像\"><a href=\"#1下载镜像\" class=\"headerlink\" title=\"1下载镜像\"></a>1下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker pull registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-创建目录\"><a href=\"#2-创建目录\" class=\"headerlink\" title=\"2 创建目录\"></a>2 创建目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir -p ~/certs</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-进入目录\"><a href=\"#3-进入目录\" class=\"headerlink\" title=\"3 进入目录\"></a>3 进入目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd ~/certs</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-创建域名证书\"><a href=\"#4-创建域名证书\" class=\"headerlink\" title=\"4 创建域名证书\"></a>4 创建域名证书</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; openssl genrsa -out rep.itmuch.com.key 2048</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-创建证书\"><a href=\"#5-创建证书\" class=\"headerlink\" title=\"5 创建证书\"></a>5 创建证书</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; openssl req -newkey rsa:4096 -nodes -sha256 -keyout \\ rep.itmuch.com.key -x509 -days 365 -out \\ rep.itmuch.com.crt  </span><br><span class=\"line\"></span><br><span class=\"line\">Country Name (2 letter code) [XX]:       # 你的国家名称</span><br><span class=\"line\"></span><br><span class=\"line\">CN State or Province Name (full name) []:GD    # 省份</span><br><span class=\"line\"></span><br><span class=\"line\">Locality Name (eg, city) [Default City]:GZ      # 所在城市</span><br><span class=\"line\"></span><br><span class=\"line\">Organization Name (eg, company) [DefaultCompany Ltd]:test     # 组织名称</span><br><span class=\"line\"></span><br><span class=\"line\">Organizational Unit Name (eg, section)[]:test      # 组织单元名称</span><br><span class=\"line\"></span><br><span class=\"line\">Common Name (eg, your name or your server&apos;shostname) []:rep.itmuch.com    # 域名</span><br><span class=\"line\"></span><br><span class=\"line\">Email Address []:     # 邮箱</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-复制证书至docker\"><a href=\"#3-复制证书至docker\" class=\"headerlink\" title=\"3 复制证书至docker\"></a>3 复制证书至docker</h1><h2 id=\"3-1创建目录\"><a href=\"#3-1创建目录\" class=\"headerlink\" title=\"3.1创建目录\"></a>3.1创建目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir -p /etc/docker/certs.d/rep.itmuch.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-复制证书至docker目录\"><a href=\"#3-2-复制证书至docker目录\" class=\"headerlink\" title=\"3.2 复制证书至docker目录\"></a>3.2 复制证书至docker目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cp ~/certs/rep.itmuch.com.crt /etc/docker/certs.d/rep.itmuch.com/</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-重启docker\"><a href=\"#3-3-重启docker\" class=\"headerlink\" title=\"3.3 重启docker\"></a>3.3 重启docker</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-设置用户名和密码\"><a href=\"#4-设置用户名和密码\" class=\"headerlink\" title=\"4 设置用户名和密码\"></a>4 设置用户名和密码</h1><h2 id=\"4-1-安装-httpd-tools\"><a href=\"#4-1-安装-httpd-tools\" class=\"headerlink\" title=\"4.1 安装 httpd-tools\"></a>4.1 安装 httpd-tools</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install httpd-tools</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-当前登录用户\"><a href=\"#4-2-当前登录用户\" class=\"headerlink\" title=\"4.2 当前登录用户\"></a>4.2 当前登录用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd~</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-创建目录\"><a href=\"#4-3-创建目录\" class=\"headerlink\" title=\"4.3 创建目录\"></a>4.3 创建目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;mkdir auth</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4创建用户名和密码\"><a href=\"#4-4创建用户名和密码\" class=\"headerlink\" title=\"4.4创建用户名和密码\"></a>4.4创建用户名和密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -Bbn testuser testpassword &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-运行\"><a href=\"#5-运行\" class=\"headerlink\" title=\"5 运行\"></a>5 运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 443:5000   \\-v /root/certs:/certs \\ -v/root/auth:/auth \\-v /opt/docker-image:/var/lib/registry \\-e STORAGE_PATH=/opt/docker-image \\-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/rep.itmuch.com.crt\\-e REGISTRY_HTTP_TLS_KEY=/certs/rep.itmuch.com.key\\ -e&quot;REGISTRY_AUTH=htpasswd&quot; \\  -e&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\  -eREGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"host主机名\"><a href=\"#host主机名\" class=\"headerlink\" title=\"host主机名\"></a>host主机名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;192.168.137.8 rep.itmuch.com&apos;&gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n<h1 id=\"登录私有库\"><a href=\"#登录私有库\" class=\"headerlink\" title=\"登录私有库\"></a>登录私有库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login rep.itmuch.com</span><br></pre></td></tr></table></figure>\n<p>push或pull需要登录否则不能报错</p>\n<h1 id=\"push到私有库\"><a href=\"#push到私有库\" class=\"headerlink\" title=\"push到私有库\"></a>push到私有库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag alpine rep.itmuch.com/alpine</span><br><span class=\"line\"></span><br><span class=\"line\">docker push rep.itmuch.com/alpine</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像目录\"><a href=\"#查看镜像目录\" class=\"headerlink\" title=\"查看镜像目录\"></a>查看镜像目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://rep.itmuch.com/v2/_catalog</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像-版本列表\"><a href=\"#查看镜像-版本列表\" class=\"headerlink\" title=\"查看镜像 版本列表\"></a>查看镜像 版本列表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://rep.itmuch.com/v2/alpine/tags/list</span><br></pre></td></tr></table></figure>"},{"title":"Solr的主从模式Master-Slave","author":"wen","date":"2018-10-14T07:25:00.000Z","_content":"# 摘要：\n如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，Master-Slave模式，为什么要提及这种方式，因为我们公司目前用的就是这种方式。\n\n# 引入Master-Slave\nSolr在查询的时候，特别忌讳进行写操作，因为它是IO阻塞型的。现在的流行的Elasticsearch就对此有很好的改进。在引入Master-Slave以后，将读写分配到不同的服务器上，你可以使用master来做索引，然后使用slaves来做查询。\n1.在多台服务器上分别搭建好可以独立运行的Solr，参见[这里](https://smallwenzi.github.io/2018/10/13/lr%E6%95%99%E7%A8%8B/)\n2.指定其中的一台为Master，只需要在SolrConifg.xml中配置：\n```\n   <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\">\n        <lst name=\"master\">\n            <str name=\"enable\">${enable.master:true}</str>\n            <!--\n                Create a backup after 'optimize'. Other values can be 'commit', 'startup'.\n                It is possible to have multiple entries of this config string.\n                Note that this is just for backup, replication does not require this.\n            -->\n            <str name=\"backupAfter\">optimize</str>\n            <!-- Replicate on 'commit'. 'startup' and 'optimize' are also the valid values for replicateAfter. -->\n            <str name=\"replicateAfter\">commit</str>\n            <!-- If configuration files need to be replicated give the names here, separated by comma -->\n            <str name=\"confFiles\">schema.xml,dict.txt,synonyms.txt</str>\n            <str name=\"commitReserveDuration\">00:00:10</str>\n        </lst>\n        <int name=\"maxNumberOfBackups\">2</int>\n           </requestHandler>\n```\n3.指定其他多有的服务为Slave，只需要分别SolrConifg.xml配置：\n```\n  <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\" >\n    <lst name=\"slave\">\n        <str name=\"enable\">${enable.slave:true}</str>\n        <str name=\"masterUrl\">http://192.168.1.102:8983/solr/jcg</str>\n        <str name=\"pollInterval\">00:00:10</str>\n        <str name=\"httpConnTimeout\">5000</str>\n        <str name=\"httpReadTimeout\">10000</str>\n     </lst>\n  </requestHandler>\n```\n4.重启所有的master-slave服务即可","source":"_posts/olr的主从模式Master-Slave.md","raw":"title: Solr的主从模式Master-Slave\nauthor: wen\ntags:\n  - solr\n  - solr-master\n  - solr-slave\ncategories:\n  - solr\ndate: 2018-10-14 15:25:00\n---\n# 摘要：\n如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，Master-Slave模式，为什么要提及这种方式，因为我们公司目前用的就是这种方式。\n\n# 引入Master-Slave\nSolr在查询的时候，特别忌讳进行写操作，因为它是IO阻塞型的。现在的流行的Elasticsearch就对此有很好的改进。在引入Master-Slave以后，将读写分配到不同的服务器上，你可以使用master来做索引，然后使用slaves来做查询。\n1.在多台服务器上分别搭建好可以独立运行的Solr，参见[这里](https://smallwenzi.github.io/2018/10/13/lr%E6%95%99%E7%A8%8B/)\n2.指定其中的一台为Master，只需要在SolrConifg.xml中配置：\n```\n   <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\">\n        <lst name=\"master\">\n            <str name=\"enable\">${enable.master:true}</str>\n            <!--\n                Create a backup after 'optimize'. Other values can be 'commit', 'startup'.\n                It is possible to have multiple entries of this config string.\n                Note that this is just for backup, replication does not require this.\n            -->\n            <str name=\"backupAfter\">optimize</str>\n            <!-- Replicate on 'commit'. 'startup' and 'optimize' are also the valid values for replicateAfter. -->\n            <str name=\"replicateAfter\">commit</str>\n            <!-- If configuration files need to be replicated give the names here, separated by comma -->\n            <str name=\"confFiles\">schema.xml,dict.txt,synonyms.txt</str>\n            <str name=\"commitReserveDuration\">00:00:10</str>\n        </lst>\n        <int name=\"maxNumberOfBackups\">2</int>\n           </requestHandler>\n```\n3.指定其他多有的服务为Slave，只需要分别SolrConifg.xml配置：\n```\n  <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\" >\n    <lst name=\"slave\">\n        <str name=\"enable\">${enable.slave:true}</str>\n        <str name=\"masterUrl\">http://192.168.1.102:8983/solr/jcg</str>\n        <str name=\"pollInterval\">00:00:10</str>\n        <str name=\"httpConnTimeout\">5000</str>\n        <str name=\"httpReadTimeout\">10000</str>\n     </lst>\n  </requestHandler>\n```\n4.重启所有的master-slave服务即可","slug":"olr的主从模式Master-Slave","published":1,"updated":"2018-10-14T07:33:13.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvbprzl7001txwjl8bkqjqla","content":"<h1 id=\"摘要：\"><a href=\"#摘要：\" class=\"headerlink\" title=\"摘要：\"></a>摘要：</h1><p>如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，Master-Slave模式，为什么要提及这种方式，因为我们公司目前用的就是这种方式。</p>\n<h1 id=\"引入Master-Slave\"><a href=\"#引入Master-Slave\" class=\"headerlink\" title=\"引入Master-Slave\"></a>引入Master-Slave</h1><p>Solr在查询的时候，特别忌讳进行写操作，因为它是IO阻塞型的。现在的流行的Elasticsearch就对此有很好的改进。在引入Master-Slave以后，将读写分配到不同的服务器上，你可以使用master来做索引，然后使用slaves来做查询。<br>1.在多台服务器上分别搭建好可以独立运行的Solr，参见<a href=\"https://smallwenzi.github.io/2018/10/13/lr%E6%95%99%E7%A8%8B/\">这里</a><br>2.指定其中的一台为Master，只需要在SolrConifg.xml中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot;&gt;</span><br><span class=\"line\">     &lt;lst name=&quot;master&quot;&gt;</span><br><span class=\"line\">         &lt;str name=&quot;enable&quot;&gt;$&#123;enable.master:true&#125;&lt;/str&gt;</span><br><span class=\"line\">         &lt;!--</span><br><span class=\"line\">             Create a backup after &apos;optimize&apos;. Other values can be &apos;commit&apos;, &apos;startup&apos;.</span><br><span class=\"line\">             It is possible to have multiple entries of this config string.</span><br><span class=\"line\">             Note that this is just for backup, replication does not require this.</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;backupAfter&quot;&gt;optimize&lt;/str&gt;</span><br><span class=\"line\">         &lt;!-- Replicate on &apos;commit&apos;. &apos;startup&apos; and &apos;optimize&apos; are also the valid values for replicateAfter. --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;replicateAfter&quot;&gt;commit&lt;/str&gt;</span><br><span class=\"line\">         &lt;!-- If configuration files need to be replicated give the names here, separated by comma --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;confFiles&quot;&gt;schema.xml,dict.txt,synonyms.txt&lt;/str&gt;</span><br><span class=\"line\">         &lt;str name=&quot;commitReserveDuration&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class=\"line\">     &lt;/lst&gt;</span><br><span class=\"line\">     &lt;int name=&quot;maxNumberOfBackups&quot;&gt;2&lt;/int&gt;</span><br><span class=\"line\">        &lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.指定其他多有的服务为Slave，只需要分别SolrConifg.xml配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot; &gt;</span><br><span class=\"line\">  &lt;lst name=&quot;slave&quot;&gt;</span><br><span class=\"line\">      &lt;str name=&quot;enable&quot;&gt;$&#123;enable.slave:true&#125;&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;masterUrl&quot;&gt;http://192.168.1.102:8983/solr/jcg&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;pollInterval&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;httpConnTimeout&quot;&gt;5000&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;httpReadTimeout&quot;&gt;10000&lt;/str&gt;</span><br><span class=\"line\">   &lt;/lst&gt;</span><br><span class=\"line\">&lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p>\n<p>4.重启所有的master-slave服务即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"摘要：\"><a href=\"#摘要：\" class=\"headerlink\" title=\"摘要：\"></a>摘要：</h1><p>如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，Master-Slave模式，为什么要提及这种方式，因为我们公司目前用的就是这种方式。</p>\n<h1 id=\"引入Master-Slave\"><a href=\"#引入Master-Slave\" class=\"headerlink\" title=\"引入Master-Slave\"></a>引入Master-Slave</h1><p>Solr在查询的时候，特别忌讳进行写操作，因为它是IO阻塞型的。现在的流行的Elasticsearch就对此有很好的改进。在引入Master-Slave以后，将读写分配到不同的服务器上，你可以使用master来做索引，然后使用slaves来做查询。<br>1.在多台服务器上分别搭建好可以独立运行的Solr，参见<a href=\"https://smallwenzi.github.io/2018/10/13/lr%E6%95%99%E7%A8%8B/\">这里</a><br>2.指定其中的一台为Master，只需要在SolrConifg.xml中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot;&gt;</span><br><span class=\"line\">     &lt;lst name=&quot;master&quot;&gt;</span><br><span class=\"line\">         &lt;str name=&quot;enable&quot;&gt;$&#123;enable.master:true&#125;&lt;/str&gt;</span><br><span class=\"line\">         &lt;!--</span><br><span class=\"line\">             Create a backup after &apos;optimize&apos;. Other values can be &apos;commit&apos;, &apos;startup&apos;.</span><br><span class=\"line\">             It is possible to have multiple entries of this config string.</span><br><span class=\"line\">             Note that this is just for backup, replication does not require this.</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;backupAfter&quot;&gt;optimize&lt;/str&gt;</span><br><span class=\"line\">         &lt;!-- Replicate on &apos;commit&apos;. &apos;startup&apos; and &apos;optimize&apos; are also the valid values for replicateAfter. --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;replicateAfter&quot;&gt;commit&lt;/str&gt;</span><br><span class=\"line\">         &lt;!-- If configuration files need to be replicated give the names here, separated by comma --&gt;</span><br><span class=\"line\">         &lt;str name=&quot;confFiles&quot;&gt;schema.xml,dict.txt,synonyms.txt&lt;/str&gt;</span><br><span class=\"line\">         &lt;str name=&quot;commitReserveDuration&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class=\"line\">     &lt;/lst&gt;</span><br><span class=\"line\">     &lt;int name=&quot;maxNumberOfBackups&quot;&gt;2&lt;/int&gt;</span><br><span class=\"line\">        &lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.指定其他多有的服务为Slave，只需要分别SolrConifg.xml配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot; &gt;</span><br><span class=\"line\">  &lt;lst name=&quot;slave&quot;&gt;</span><br><span class=\"line\">      &lt;str name=&quot;enable&quot;&gt;$&#123;enable.slave:true&#125;&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;masterUrl&quot;&gt;http://192.168.1.102:8983/solr/jcg&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;pollInterval&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;httpConnTimeout&quot;&gt;5000&lt;/str&gt;</span><br><span class=\"line\">      &lt;str name=&quot;httpReadTimeout&quot;&gt;10000&lt;/str&gt;</span><br><span class=\"line\">   &lt;/lst&gt;</span><br><span class=\"line\">&lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p>\n<p>4.重启所有的master-slave服务即可</p>\n"},{"title":"（五）更新docker 版本（root用户）","author":"wen","date":"2018-05-08T09:00:00.000Z","_content":"参考：[安装docker 操作](/2018/05/08/（四）安装docker（root用户）/)\n\n# 1 删除旧版本（以下操作都是使用root用户）\n```\nyum remove docker \\\n\ndocker-client \\\n\ndocker-client-latest\\ \n\ndocker-common \\\n\ndocker-latest \\\n\ndocker-latest-logrotate \\\n\ndocker-logrotate \\\n\ndocker-selinux \\\n\ndocker-engine-selinux \\\n\ndocker-engine\n\n```\n\n# 2 确保docker-ce-edge最新版本\n```\nyum-config-manager--enable docker-ce-edge\n```\n# 3 安装docker\n```\n yum install docker-ce\n```\n\n# 4 设置集群功能\n```\nvi /etc/systemd/system/multi-user.target.wants/docker.service \n在\nExecStart=/usr/bin/dockerd 添加 --experimental=true  表示启用集群功能\n```\n# 5 重新加载配置\n```\nsystemctl daemon-reload\n```\n\n# 6 启动服务\n```\nsysctemctl start docker\n```\n\n# 7 查看版本：\n```\ndocker version\n```","source":"_posts/）更新docker-版本（root用户）.md","raw":"title: （五）更新docker 版本（root用户）\nauthor: wen\ntags:\n  - docker\ncategories: []\ndate: 2018-05-08 17:00:00\n---\n参考：[安装docker 操作](/2018/05/08/（四）安装docker（root用户）/)\n\n# 1 删除旧版本（以下操作都是使用root用户）\n```\nyum remove docker \\\n\ndocker-client \\\n\ndocker-client-latest\\ \n\ndocker-common \\\n\ndocker-latest \\\n\ndocker-latest-logrotate \\\n\ndocker-logrotate \\\n\ndocker-selinux \\\n\ndocker-engine-selinux \\\n\ndocker-engine\n\n```\n\n# 2 确保docker-ce-edge最新版本\n```\nyum-config-manager--enable docker-ce-edge\n```\n# 3 安装docker\n```\n yum install docker-ce\n```\n\n# 4 设置集群功能\n```\nvi /etc/systemd/system/multi-user.target.wants/docker.service \n在\nExecStart=/usr/bin/dockerd 添加 --experimental=true  表示启用集群功能\n```\n# 5 重新加载配置\n```\nsystemctl daemon-reload\n```\n\n# 6 启动服务\n```\nsysctemctl start docker\n```\n\n# 7 查看版本：\n```\ndocker version\n```","slug":"）更新docker-版本（root用户）","published":1,"updated":"2019-05-06T06:03:39.216Z","_id":"cjvbprzlc001wxwjle0bmy1wp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：<a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker 操作</a></p>\n<h1 id=\"1-删除旧版本（以下操作都是使用root用户）\"><a href=\"#1-删除旧版本（以下操作都是使用root用户）\" class=\"headerlink\" title=\"1 删除旧版本（以下操作都是使用root用户）\"></a>1 删除旧版本（以下操作都是使用root用户）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-client \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-client-latest\\ </span><br><span class=\"line\"></span><br><span class=\"line\">docker-common \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-latest \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-latest-logrotate \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-logrotate \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-selinux \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-engine-selinux \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-engine</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-确保docker-ce-edge最新版本\"><a href=\"#2-确保docker-ce-edge最新版本\" class=\"headerlink\" title=\"2 确保docker-ce-edge最新版本\"></a>2 确保docker-ce-edge最新版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager--enable docker-ce-edge</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3 安装docker\"></a>3 安装docker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-设置集群功能\"><a href=\"#4-设置集群功能\" class=\"headerlink\" title=\"4 设置集群功能\"></a>4 设置集群功能</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system/multi-user.target.wants/docker.service </span><br><span class=\"line\">在</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd 添加 --experimental=true  表示启用集群功能</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-重新加载配置\"><a href=\"#5-重新加载配置\" class=\"headerlink\" title=\"5 重新加载配置\"></a>5 重新加载配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-启动服务\"><a href=\"#6-启动服务\" class=\"headerlink\" title=\"6 启动服务\"></a>6 启动服务</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctemctl start docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-查看版本：\"><a href=\"#7-查看版本：\" class=\"headerlink\" title=\"7 查看版本：\"></a>7 查看版本：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"/2018/05/08/（四）安装docker（root用户）/\">安装docker 操作</a></p>\n<h1 id=\"1-删除旧版本（以下操作都是使用root用户）\"><a href=\"#1-删除旧版本（以下操作都是使用root用户）\" class=\"headerlink\" title=\"1 删除旧版本（以下操作都是使用root用户）\"></a>1 删除旧版本（以下操作都是使用root用户）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-client \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-client-latest\\ </span><br><span class=\"line\"></span><br><span class=\"line\">docker-common \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-latest \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-latest-logrotate \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-logrotate \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-selinux \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-engine-selinux \\</span><br><span class=\"line\"></span><br><span class=\"line\">docker-engine</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-确保docker-ce-edge最新版本\"><a href=\"#2-确保docker-ce-edge最新版本\" class=\"headerlink\" title=\"2 确保docker-ce-edge最新版本\"></a>2 确保docker-ce-edge最新版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager--enable docker-ce-edge</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3 安装docker\"></a>3 安装docker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-设置集群功能\"><a href=\"#4-设置集群功能\" class=\"headerlink\" title=\"4 设置集群功能\"></a>4 设置集群功能</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/systemd/system/multi-user.target.wants/docker.service </span><br><span class=\"line\">在</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd 添加 --experimental=true  表示启用集群功能</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-重新加载配置\"><a href=\"#5-重新加载配置\" class=\"headerlink\" title=\"5 重新加载配置\"></a>5 重新加载配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-启动服务\"><a href=\"#6-启动服务\" class=\"headerlink\" title=\"6 启动服务\"></a>6 启动服务</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctemctl start docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-查看版本：\"><a href=\"#7-查看版本：\" class=\"headerlink\" title=\"7 查看版本：\"></a>7 查看版本：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>"},{"title":"（四）安装docker（root用户）","author":"wen","date":"2018-05-08T07:59:00.000Z","_content":"链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n[升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n# 1 安装docker（以下操作都是使用root用户）\n```\n--安装驱动（red-hat为例,不同操作系统，驱动不同详细看官网教程）\n> yum install -y yum-utils device-mapper-persistent-data lvm2  \n\n--添加docker仓库\n> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n--清除缓存\n> yum clean all\n\n--重新更新缓存\n> yum makecache\n\n--确保docker engine最新\n> yum-config-manager --enable docker-ce-edge\n\n--安装docker\n> yum install docker-ce\n\n开机启动\n> systemctl enable docker\n\n开启集群权限\n>vi /etc/systemd/system/multi-user.target.wants/docker.service \n在\nExecStart=/usr/bin/dockerd \n添加\n--experimental=true \n\n重新加载配置\n>systemctl daemon-reload \n\n --启动docker\n>systemctl start docker\n```\n\n参考：[docker官网](https://docs.docker.com/install/linux/docker-ce/centos/)\n\ndocker 常用命令 参考[docker 命令官网](https://docs.docker.com/engine/reference/run/)\n\n# 2 查看docker 版本\n```\ndocker version --目前最新版本是 17.12.1-ce\n```\n# 3 查看docker 信息\n```\ndocker info\n```\n# 4 运行镜像\n```\ndocker run hello-word --本地没有会找镜像库 \n```\n关于run 一些参数详细参考[docker官网](https://docs.docker.com/engine/reference/run/)\n\n\n\n# 5 下载镜像\n```\ndocker pull alpine\n```\n# 6 制作java环境镜像：\n使用DockerFile 进行编写 ,参考[dockerFile官网](https://docs.docker.com/engine/reference/builder/#usage)\n\n```\nFROM alpine\nMAINTAINER killko <killko@qq.com>\nENV TIME_ZONE Asiz/Shanghai\nRUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories && \\\n    echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories && \\\n    apk update && \\\n    apk upgrade && \\\n    apk add ca-certificates openjdk8-jre-base@community && \\\n    apk del ca-certificates && \\\n    apk add --no-cache tzdata && \\\n    echo \"${TIME_ZONE}\" > /etc/timezone && \\\n    ln -sf /usr/share/zoneinfo/${TIME_ZONE} /etc/localtime && \\\n    rm -rf /tmp/* /var/cache/apk/*\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime\n```\n编写完成进行build\n```\n>docker build  -t openjre:latest . --表示在当前目录进行制作镜像\n>docker images --查看镜像\n>docker run -it openjre sh --进行查看java是否安装成功\n```\n\n\n# 7 导入镜像\n```\ndocker load < openjre.tar\n```\n\n# 8 导出镜像：\n```\ndocker save openjre:latest  openjre.tar\n```\n\n# 9 查看镜像\n```\ndocker images\n```\n\n# 10 查看正在运行容器\n```\ndocker ps -a --查看容器id 运行状态 映射端口\n```\n\n# 11 查看容器日志\n```\ndocker logs -f 容器id --容器id从docker ps -a获取\n```\n\n# 12 停止容器\n```\ndocker stop 容器id ----容器id从docker ps -a获取\n```\n\n# 13 删除容器\n```\ndocker rm 容器id --容器id从docker ps -a获取\n```\n# 14 删除镜像\n```\ndocker rmi imagename:tag --imagename:tag imagename表示镜像名称 tag表示版本 这些信息可以从docker images进行获取\n```\n\n# 15 进入容器 运行sh命令：\ndocker exec -it 容器id sh --容器id从docker ps -a获取\n\n# 16 添加普通用户操作docker\n```\nvi etc/systemd/system/multi-user.target.wants/docker.service （操作服务）\n\nExecStart=/usr/bin/dockerd -G jenkins  #表示jenkins用户组可以操作docker命令\n\n保存后\n\nsystemctl daemon-reload --重新加载服务\n\nsystemctl restart docker --重启服务\n```","source":"_posts/（四）安装docker（root用户）.md","raw":"title: （四）安装docker（root用户）\nauthor: wen\ntags:\n  - docker\ncategories: []\ndate: 2018-05-08 15:59:00\n---\n链接：\n[oracle VM安装red hat liunx](/2018/05/08/）oracle-VM安装red-hat-liunx/)\n\n[升级RPM和YUM 包](/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/)\n\n# 1 安装docker（以下操作都是使用root用户）\n```\n--安装驱动（red-hat为例,不同操作系统，驱动不同详细看官网教程）\n> yum install -y yum-utils device-mapper-persistent-data lvm2  \n\n--添加docker仓库\n> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n--清除缓存\n> yum clean all\n\n--重新更新缓存\n> yum makecache\n\n--确保docker engine最新\n> yum-config-manager --enable docker-ce-edge\n\n--安装docker\n> yum install docker-ce\n\n开机启动\n> systemctl enable docker\n\n开启集群权限\n>vi /etc/systemd/system/multi-user.target.wants/docker.service \n在\nExecStart=/usr/bin/dockerd \n添加\n--experimental=true \n\n重新加载配置\n>systemctl daemon-reload \n\n --启动docker\n>systemctl start docker\n```\n\n参考：[docker官网](https://docs.docker.com/install/linux/docker-ce/centos/)\n\ndocker 常用命令 参考[docker 命令官网](https://docs.docker.com/engine/reference/run/)\n\n# 2 查看docker 版本\n```\ndocker version --目前最新版本是 17.12.1-ce\n```\n# 3 查看docker 信息\n```\ndocker info\n```\n# 4 运行镜像\n```\ndocker run hello-word --本地没有会找镜像库 \n```\n关于run 一些参数详细参考[docker官网](https://docs.docker.com/engine/reference/run/)\n\n\n\n# 5 下载镜像\n```\ndocker pull alpine\n```\n# 6 制作java环境镜像：\n使用DockerFile 进行编写 ,参考[dockerFile官网](https://docs.docker.com/engine/reference/builder/#usage)\n\n```\nFROM alpine\nMAINTAINER killko <killko@qq.com>\nENV TIME_ZONE Asiz/Shanghai\nRUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories && \\\n    echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories && \\\n    apk update && \\\n    apk upgrade && \\\n    apk add ca-certificates openjdk8-jre-base@community && \\\n    apk del ca-certificates && \\\n    apk add --no-cache tzdata && \\\n    echo \"${TIME_ZONE}\" > /etc/timezone && \\\n    ln -sf /usr/share/zoneinfo/${TIME_ZONE} /etc/localtime && \\\n    rm -rf /tmp/* /var/cache/apk/*\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime\n```\n编写完成进行build\n```\n>docker build  -t openjre:latest . --表示在当前目录进行制作镜像\n>docker images --查看镜像\n>docker run -it openjre sh --进行查看java是否安装成功\n```\n\n\n# 7 导入镜像\n```\ndocker load < openjre.tar\n```\n\n# 8 导出镜像：\n```\ndocker save openjre:latest  openjre.tar\n```\n\n# 9 查看镜像\n```\ndocker images\n```\n\n# 10 查看正在运行容器\n```\ndocker ps -a --查看容器id 运行状态 映射端口\n```\n\n# 11 查看容器日志\n```\ndocker logs -f 容器id --容器id从docker ps -a获取\n```\n\n# 12 停止容器\n```\ndocker stop 容器id ----容器id从docker ps -a获取\n```\n\n# 13 删除容器\n```\ndocker rm 容器id --容器id从docker ps -a获取\n```\n# 14 删除镜像\n```\ndocker rmi imagename:tag --imagename:tag imagename表示镜像名称 tag表示版本 这些信息可以从docker images进行获取\n```\n\n# 15 进入容器 运行sh命令：\ndocker exec -it 容器id sh --容器id从docker ps -a获取\n\n# 16 添加普通用户操作docker\n```\nvi etc/systemd/system/multi-user.target.wants/docker.service （操作服务）\n\nExecStart=/usr/bin/dockerd -G jenkins  #表示jenkins用户组可以操作docker命令\n\n保存后\n\nsystemctl daemon-reload --重新加载服务\n\nsystemctl restart docker --重启服务\n```","slug":"（四）安装docker（root用户）","published":1,"updated":"2019-05-06T06:03:17.972Z","_id":"cjvbprzlg001zxwjlbw1lv5we","comments":1,"layout":"post","photos":[],"link":"","content":"<p>链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p><a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"1-安装docker（以下操作都是使用root用户）\"><a href=\"#1-安装docker（以下操作都是使用root用户）\" class=\"headerlink\" title=\"1 安装docker（以下操作都是使用root用户）\"></a>1 安装docker（以下操作都是使用root用户）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--安装驱动（red-hat为例,不同操作系统，驱动不同详细看官网教程）</span><br><span class=\"line\">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2  </span><br><span class=\"line\"></span><br><span class=\"line\">--添加docker仓库</span><br><span class=\"line\">&gt; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">--清除缓存</span><br><span class=\"line\">&gt; yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\">--重新更新缓存</span><br><span class=\"line\">&gt; yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\">--确保docker engine最新</span><br><span class=\"line\">&gt; yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"></span><br><span class=\"line\">--安装docker</span><br><span class=\"line\">&gt; yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">开机启动</span><br><span class=\"line\">&gt; systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\">开启集群权限</span><br><span class=\"line\">&gt;vi /etc/systemd/system/multi-user.target.wants/docker.service </span><br><span class=\"line\">在</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd </span><br><span class=\"line\">添加</span><br><span class=\"line\">--experimental=true </span><br><span class=\"line\"></span><br><span class=\"line\">重新加载配置</span><br><span class=\"line\">&gt;systemctl daemon-reload </span><br><span class=\"line\"></span><br><span class=\"line\"> --启动docker</span><br><span class=\"line\">&gt;systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">docker官网</a></p>\n<p>docker 常用命令 参考<a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">docker 命令官网</a></p>\n<h1 id=\"2-查看docker-版本\"><a href=\"#2-查看docker-版本\" class=\"headerlink\" title=\"2 查看docker 版本\"></a>2 查看docker 版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version --目前最新版本是 17.12.1-ce</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-查看docker-信息\"><a href=\"#3-查看docker-信息\" class=\"headerlink\" title=\"3 查看docker 信息\"></a>3 查看docker 信息</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行镜像\"><a href=\"#4-运行镜像\" class=\"headerlink\" title=\"4 运行镜像\"></a>4 运行镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-word --本地没有会找镜像库</span><br></pre></td></tr></table></figure>\n<p>关于run 一些参数详细参考<a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">docker官网</a></p>\n<h1 id=\"5-下载镜像\"><a href=\"#5-下载镜像\" class=\"headerlink\" title=\"5 下载镜像\"></a>5 下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull alpine</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-制作java环境镜像：\"><a href=\"#6-制作java环境镜像：\" class=\"headerlink\" title=\"6 制作java环境镜像：\"></a>6 制作java环境镜像：</h1><p>使用DockerFile 进行编写 ,参考<a href=\"https://docs.docker.com/engine/reference/builder/#usage\" target=\"_blank\" rel=\"noopener\">dockerFile官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM alpine</span><br><span class=\"line\">MAINTAINER killko &lt;killko@qq.com&gt;</span><br><span class=\"line\">ENV TIME_ZONE Asiz/Shanghai</span><br><span class=\"line\">RUN echo &apos;@edge http://nl.alpinelinux.org/alpine/edge/main&apos; &gt;&gt; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &apos;@community http://nl.alpinelinux.org/alpine/edge/community&apos; &gt;&gt; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    apk update &amp;&amp; \\</span><br><span class=\"line\">    apk upgrade &amp;&amp; \\</span><br><span class=\"line\">    apk add ca-certificates openjdk8-jre-base@community &amp;&amp; \\</span><br><span class=\"line\">    apk del ca-certificates &amp;&amp; \\</span><br><span class=\"line\">    apk add --no-cache tzdata &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;$&#123;TIME_ZONE&#125;&quot; &gt; /etc/timezone &amp;&amp; \\</span><br><span class=\"line\">    ln -sf /usr/share/zoneinfo/$&#123;TIME_ZONE&#125; /etc/localtime &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /tmp/* /var/cache/apk/*</span><br><span class=\"line\">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure>\n<p>编写完成进行build<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker build  -t openjre:latest . --表示在当前目录进行制作镜像</span><br><span class=\"line\">&gt;docker images --查看镜像</span><br><span class=\"line\">&gt;docker run -it openjre sh --进行查看java是否安装成功</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"7-导入镜像\"><a href=\"#7-导入镜像\" class=\"headerlink\" title=\"7 导入镜像\"></a>7 导入镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load &lt; openjre.tar</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-导出镜像：\"><a href=\"#8-导出镜像：\" class=\"headerlink\" title=\"8 导出镜像：\"></a>8 导出镜像：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save openjre:latest  openjre.tar</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-查看镜像\"><a href=\"#9-查看镜像\" class=\"headerlink\" title=\"9 查看镜像\"></a>9 查看镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-查看正在运行容器\"><a href=\"#10-查看正在运行容器\" class=\"headerlink\" title=\"10 查看正在运行容器\"></a>10 查看正在运行容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a --查看容器id 运行状态 映射端口</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-查看容器日志\"><a href=\"#11-查看容器日志\" class=\"headerlink\" title=\"11 查看容器日志\"></a>11 查看容器日志</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f 容器id --容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-停止容器\"><a href=\"#12-停止容器\" class=\"headerlink\" title=\"12 停止容器\"></a>12 停止容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id ----容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-删除容器\"><a href=\"#13-删除容器\" class=\"headerlink\" title=\"13 删除容器\"></a>13 删除容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id --容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-删除镜像\"><a href=\"#14-删除镜像\" class=\"headerlink\" title=\"14 删除镜像\"></a>14 删除镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imagename:tag --imagename:tag imagename表示镜像名称 tag表示版本 这些信息可以从docker images进行获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-进入容器-运行sh命令：\"><a href=\"#15-进入容器-运行sh命令：\" class=\"headerlink\" title=\"15 进入容器 运行sh命令：\"></a>15 进入容器 运行sh命令：</h1><p>docker exec -it 容器id sh –容器id从docker ps -a获取</p>\n<h1 id=\"16-添加普通用户操作docker\"><a href=\"#16-添加普通用户操作docker\" class=\"headerlink\" title=\"16 添加普通用户操作docker\"></a>16 添加普通用户操作docker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi etc/systemd/system/multi-user.target.wants/docker.service （操作服务）</span><br><span class=\"line\"></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -G jenkins  #表示jenkins用户组可以操作docker命令</span><br><span class=\"line\"></span><br><span class=\"line\">保存后</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload --重新加载服务</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart docker --重启服务</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>链接：<br><a href=\"/2018/05/08/）oracle-VM安装red-hat-liunx/\">oracle VM安装red hat liunx</a></p>\n<p><a href=\"/2018/05/08/）Red-Hat-升级-rpm软件、YUM软件（root用户）/\">升级RPM和YUM 包</a></p>\n<h1 id=\"1-安装docker（以下操作都是使用root用户）\"><a href=\"#1-安装docker（以下操作都是使用root用户）\" class=\"headerlink\" title=\"1 安装docker（以下操作都是使用root用户）\"></a>1 安装docker（以下操作都是使用root用户）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--安装驱动（red-hat为例,不同操作系统，驱动不同详细看官网教程）</span><br><span class=\"line\">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2  </span><br><span class=\"line\"></span><br><span class=\"line\">--添加docker仓库</span><br><span class=\"line\">&gt; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">--清除缓存</span><br><span class=\"line\">&gt; yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\">--重新更新缓存</span><br><span class=\"line\">&gt; yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\">--确保docker engine最新</span><br><span class=\"line\">&gt; yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"></span><br><span class=\"line\">--安装docker</span><br><span class=\"line\">&gt; yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">开机启动</span><br><span class=\"line\">&gt; systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\">开启集群权限</span><br><span class=\"line\">&gt;vi /etc/systemd/system/multi-user.target.wants/docker.service </span><br><span class=\"line\">在</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd </span><br><span class=\"line\">添加</span><br><span class=\"line\">--experimental=true </span><br><span class=\"line\"></span><br><span class=\"line\">重新加载配置</span><br><span class=\"line\">&gt;systemctl daemon-reload </span><br><span class=\"line\"></span><br><span class=\"line\"> --启动docker</span><br><span class=\"line\">&gt;systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">docker官网</a></p>\n<p>docker 常用命令 参考<a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">docker 命令官网</a></p>\n<h1 id=\"2-查看docker-版本\"><a href=\"#2-查看docker-版本\" class=\"headerlink\" title=\"2 查看docker 版本\"></a>2 查看docker 版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version --目前最新版本是 17.12.1-ce</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-查看docker-信息\"><a href=\"#3-查看docker-信息\" class=\"headerlink\" title=\"3 查看docker 信息\"></a>3 查看docker 信息</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行镜像\"><a href=\"#4-运行镜像\" class=\"headerlink\" title=\"4 运行镜像\"></a>4 运行镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-word --本地没有会找镜像库</span><br></pre></td></tr></table></figure>\n<p>关于run 一些参数详细参考<a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">docker官网</a></p>\n<h1 id=\"5-下载镜像\"><a href=\"#5-下载镜像\" class=\"headerlink\" title=\"5 下载镜像\"></a>5 下载镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull alpine</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-制作java环境镜像：\"><a href=\"#6-制作java环境镜像：\" class=\"headerlink\" title=\"6 制作java环境镜像：\"></a>6 制作java环境镜像：</h1><p>使用DockerFile 进行编写 ,参考<a href=\"https://docs.docker.com/engine/reference/builder/#usage\" target=\"_blank\" rel=\"noopener\">dockerFile官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM alpine</span><br><span class=\"line\">MAINTAINER killko &lt;killko@qq.com&gt;</span><br><span class=\"line\">ENV TIME_ZONE Asiz/Shanghai</span><br><span class=\"line\">RUN echo &apos;@edge http://nl.alpinelinux.org/alpine/edge/main&apos; &gt;&gt; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    echo &apos;@community http://nl.alpinelinux.org/alpine/edge/community&apos; &gt;&gt; /etc/apk/repositories &amp;&amp; \\</span><br><span class=\"line\">    apk update &amp;&amp; \\</span><br><span class=\"line\">    apk upgrade &amp;&amp; \\</span><br><span class=\"line\">    apk add ca-certificates openjdk8-jre-base@community &amp;&amp; \\</span><br><span class=\"line\">    apk del ca-certificates &amp;&amp; \\</span><br><span class=\"line\">    apk add --no-cache tzdata &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;$&#123;TIME_ZONE&#125;&quot; &gt; /etc/timezone &amp;&amp; \\</span><br><span class=\"line\">    ln -sf /usr/share/zoneinfo/$&#123;TIME_ZONE&#125; /etc/localtime &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /tmp/* /var/cache/apk/*</span><br><span class=\"line\">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure>\n<p>编写完成进行build<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker build  -t openjre:latest . --表示在当前目录进行制作镜像</span><br><span class=\"line\">&gt;docker images --查看镜像</span><br><span class=\"line\">&gt;docker run -it openjre sh --进行查看java是否安装成功</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"7-导入镜像\"><a href=\"#7-导入镜像\" class=\"headerlink\" title=\"7 导入镜像\"></a>7 导入镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load &lt; openjre.tar</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-导出镜像：\"><a href=\"#8-导出镜像：\" class=\"headerlink\" title=\"8 导出镜像：\"></a>8 导出镜像：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save openjre:latest  openjre.tar</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-查看镜像\"><a href=\"#9-查看镜像\" class=\"headerlink\" title=\"9 查看镜像\"></a>9 查看镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-查看正在运行容器\"><a href=\"#10-查看正在运行容器\" class=\"headerlink\" title=\"10 查看正在运行容器\"></a>10 查看正在运行容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a --查看容器id 运行状态 映射端口</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-查看容器日志\"><a href=\"#11-查看容器日志\" class=\"headerlink\" title=\"11 查看容器日志\"></a>11 查看容器日志</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f 容器id --容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-停止容器\"><a href=\"#12-停止容器\" class=\"headerlink\" title=\"12 停止容器\"></a>12 停止容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id ----容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-删除容器\"><a href=\"#13-删除容器\" class=\"headerlink\" title=\"13 删除容器\"></a>13 删除容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id --容器id从docker ps -a获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-删除镜像\"><a href=\"#14-删除镜像\" class=\"headerlink\" title=\"14 删除镜像\"></a>14 删除镜像</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imagename:tag --imagename:tag imagename表示镜像名称 tag表示版本 这些信息可以从docker images进行获取</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-进入容器-运行sh命令：\"><a href=\"#15-进入容器-运行sh命令：\" class=\"headerlink\" title=\"15 进入容器 运行sh命令：\"></a>15 进入容器 运行sh命令：</h1><p>docker exec -it 容器id sh –容器id从docker ps -a获取</p>\n<h1 id=\"16-添加普通用户操作docker\"><a href=\"#16-添加普通用户操作docker\" class=\"headerlink\" title=\"16 添加普通用户操作docker\"></a>16 添加普通用户操作docker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi etc/systemd/system/multi-user.target.wants/docker.service （操作服务）</span><br><span class=\"line\"></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -G jenkins  #表示jenkins用户组可以操作docker命令</span><br><span class=\"line\"></span><br><span class=\"line\">保存后</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload --重新加载服务</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart docker --重启服务</span><br></pre></td></tr></table></figure>"},{"title":"底层代码构造sql忽略NUll条件","author":"wen","date":"2019-05-06T03:00:00.000Z","_content":"代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃\n\n代码：com.amway.common.jpa.repository.JpaRepoUtil\n```\n\n\tprivate static StringBuilder generateQlForQueryByProperties(Map<String, Object> propertiesMap,\n\t\t\tStringBuilder ql, Map<Integer, Object> params, FindByPropertiesType findType) {\n\t\tint index = 0;\n\t\t\n\t\tif (propertiesMap != null && !propertiesMap.isEmpty()) {\n\t\t\tboolean doDeleteAnd = false, doDeletewWere = true;\n\t\t\tql.append(\" where \");\n\t        for (Entry<String,Object> entry: propertiesMap.entrySet()) {\n\t        \tObject value = entry.getValue();\n                //忽略null 的值\n\t        \tif (value != null) {\n\t        \t\tif (doDeletewWere) \n\t        \t\t\tdoDeletewWere = false;\n\t        \t\t\n\t        \t\tif (value instanceof String && (findType == null || FindByPropertiesType.Fuzzy.equals(findType))) {\n\t        \t\t\tString valueStr = (String) entry.getValue();\n\t        \t\t\tql.append(\"upper(model.\" + entry.getKey() + \") like :propertyValue\" + index + \" and \");\n\t        \t\t\tparams.put(index++, \"%\" + valueStr.trim().toUpperCase() + \"%\");\n\t        \t\t} else if(QueryValue.NULL.equals(value)) {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \" is null and \");\n\t        \t\t} else if(QueryValue.NotNull.equals(value)) {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \" is not null and \");\n\t        \t\t} else {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \"=:propertyValue\" + index + \" and \");\n\t        \t\t\tparams.put(index++, entry.getValue());\n\t        \t\t}\n\t        \t\t\n\t        \t\tdoDeleteAnd = true;\n\t        \t}\n\t        }\n\t        if (doDeleteAnd)\n\t        \tql = ql.delete(ql.toString().lastIndexOf(\" and \"), ql.toString().length());\n\t        if (doDeletewWere)\n        \t\tql = ql.delete(ql.toString().lastIndexOf(\" where \"), ql.toString().length());\n\t\t}\n\t\treturn ql;\n\t}\n```\n\n![upload successful](A问题/1.png)\n\n总结：需要深度了解底层代码。","source":"_posts/A问题.md","raw":"title: 底层代码构造sql忽略NUll条件\nauthor: wen\ntags:\n  - jpa\ncategories: []\ndate: 2019-05-06 11:00:00\n---\n代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃\n\n代码：com.amway.common.jpa.repository.JpaRepoUtil\n```\n\n\tprivate static StringBuilder generateQlForQueryByProperties(Map<String, Object> propertiesMap,\n\t\t\tStringBuilder ql, Map<Integer, Object> params, FindByPropertiesType findType) {\n\t\tint index = 0;\n\t\t\n\t\tif (propertiesMap != null && !propertiesMap.isEmpty()) {\n\t\t\tboolean doDeleteAnd = false, doDeletewWere = true;\n\t\t\tql.append(\" where \");\n\t        for (Entry<String,Object> entry: propertiesMap.entrySet()) {\n\t        \tObject value = entry.getValue();\n                //忽略null 的值\n\t        \tif (value != null) {\n\t        \t\tif (doDeletewWere) \n\t        \t\t\tdoDeletewWere = false;\n\t        \t\t\n\t        \t\tif (value instanceof String && (findType == null || FindByPropertiesType.Fuzzy.equals(findType))) {\n\t        \t\t\tString valueStr = (String) entry.getValue();\n\t        \t\t\tql.append(\"upper(model.\" + entry.getKey() + \") like :propertyValue\" + index + \" and \");\n\t        \t\t\tparams.put(index++, \"%\" + valueStr.trim().toUpperCase() + \"%\");\n\t        \t\t} else if(QueryValue.NULL.equals(value)) {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \" is null and \");\n\t        \t\t} else if(QueryValue.NotNull.equals(value)) {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \" is not null and \");\n\t        \t\t} else {\n\t        \t\t\tql.append(\"model.\" + entry.getKey() + \"=:propertyValue\" + index + \" and \");\n\t        \t\t\tparams.put(index++, entry.getValue());\n\t        \t\t}\n\t        \t\t\n\t        \t\tdoDeleteAnd = true;\n\t        \t}\n\t        }\n\t        if (doDeleteAnd)\n\t        \tql = ql.delete(ql.toString().lastIndexOf(\" and \"), ql.toString().length());\n\t        if (doDeletewWere)\n        \t\tql = ql.delete(ql.toString().lastIndexOf(\" where \"), ql.toString().length());\n\t\t}\n\t\treturn ql;\n\t}\n```\n\n![upload successful](A问题/1.png)\n\n总结：需要深度了解底层代码。","slug":"A问题","published":1,"updated":"2019-05-06T03:17:25.926Z","_id":"cjvbsiuen0000u4jltyjew9bi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃</p>\n<p>代码：com.amway.common.jpa.repository.JpaRepoUtil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private static StringBuilder generateQlForQueryByProperties(Map&lt;String, Object&gt; propertiesMap,</span><br><span class=\"line\">\t\tStringBuilder ql, Map&lt;Integer, Object&gt; params, FindByPropertiesType findType) &#123;</span><br><span class=\"line\">\tint index = 0;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif (propertiesMap != null &amp;&amp; !propertiesMap.isEmpty()) &#123;</span><br><span class=\"line\">\t\tboolean doDeleteAnd = false, doDeletewWere = true;</span><br><span class=\"line\">\t\tql.append(&quot; where &quot;);</span><br><span class=\"line\">        for (Entry&lt;String,Object&gt; entry: propertiesMap.entrySet()) &#123;</span><br><span class=\"line\">        \tObject value = entry.getValue();</span><br><span class=\"line\">               //忽略null 的值</span><br><span class=\"line\">        \tif (value != null) &#123;</span><br><span class=\"line\">        \t\tif (doDeletewWere) </span><br><span class=\"line\">        \t\t\tdoDeletewWere = false;</span><br><span class=\"line\">        \t\t</span><br><span class=\"line\">        \t\tif (value instanceof String &amp;&amp; (findType == null || FindByPropertiesType.Fuzzy.equals(findType))) &#123;</span><br><span class=\"line\">        \t\t\tString valueStr = (String) entry.getValue();</span><br><span class=\"line\">        \t\t\tql.append(&quot;upper(model.&quot; + entry.getKey() + &quot;) like :propertyValue&quot; + index + &quot; and &quot;);</span><br><span class=\"line\">        \t\t\tparams.put(index++, &quot;%&quot; + valueStr.trim().toUpperCase() + &quot;%&quot;);</span><br><span class=\"line\">        \t\t&#125; else if(QueryValue.NULL.equals(value)) &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot; is null and &quot;);</span><br><span class=\"line\">        \t\t&#125; else if(QueryValue.NotNull.equals(value)) &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot; is not null and &quot;);</span><br><span class=\"line\">        \t\t&#125; else &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot;=:propertyValue&quot; + index + &quot; and &quot;);</span><br><span class=\"line\">        \t\t\tparams.put(index++, entry.getValue());</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t</span><br><span class=\"line\">        \t\tdoDeleteAnd = true;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (doDeleteAnd)</span><br><span class=\"line\">        \tql = ql.delete(ql.toString().lastIndexOf(&quot; and &quot;), ql.toString().length());</span><br><span class=\"line\">        if (doDeletewWere)</span><br><span class=\"line\">       \t\tql = ql.delete(ql.toString().lastIndexOf(&quot; where &quot;), ql.toString().length());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ql;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/05/06/A问题/1.png\" alt=\"upload successful\"></p>\n<p>总结：需要深度了解底层代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃</p>\n<p>代码：com.amway.common.jpa.repository.JpaRepoUtil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private static StringBuilder generateQlForQueryByProperties(Map&lt;String, Object&gt; propertiesMap,</span><br><span class=\"line\">\t\tStringBuilder ql, Map&lt;Integer, Object&gt; params, FindByPropertiesType findType) &#123;</span><br><span class=\"line\">\tint index = 0;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif (propertiesMap != null &amp;&amp; !propertiesMap.isEmpty()) &#123;</span><br><span class=\"line\">\t\tboolean doDeleteAnd = false, doDeletewWere = true;</span><br><span class=\"line\">\t\tql.append(&quot; where &quot;);</span><br><span class=\"line\">        for (Entry&lt;String,Object&gt; entry: propertiesMap.entrySet()) &#123;</span><br><span class=\"line\">        \tObject value = entry.getValue();</span><br><span class=\"line\">               //忽略null 的值</span><br><span class=\"line\">        \tif (value != null) &#123;</span><br><span class=\"line\">        \t\tif (doDeletewWere) </span><br><span class=\"line\">        \t\t\tdoDeletewWere = false;</span><br><span class=\"line\">        \t\t</span><br><span class=\"line\">        \t\tif (value instanceof String &amp;&amp; (findType == null || FindByPropertiesType.Fuzzy.equals(findType))) &#123;</span><br><span class=\"line\">        \t\t\tString valueStr = (String) entry.getValue();</span><br><span class=\"line\">        \t\t\tql.append(&quot;upper(model.&quot; + entry.getKey() + &quot;) like :propertyValue&quot; + index + &quot; and &quot;);</span><br><span class=\"line\">        \t\t\tparams.put(index++, &quot;%&quot; + valueStr.trim().toUpperCase() + &quot;%&quot;);</span><br><span class=\"line\">        \t\t&#125; else if(QueryValue.NULL.equals(value)) &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot; is null and &quot;);</span><br><span class=\"line\">        \t\t&#125; else if(QueryValue.NotNull.equals(value)) &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot; is not null and &quot;);</span><br><span class=\"line\">        \t\t&#125; else &#123;</span><br><span class=\"line\">        \t\t\tql.append(&quot;model.&quot; + entry.getKey() + &quot;=:propertyValue&quot; + index + &quot; and &quot;);</span><br><span class=\"line\">        \t\t\tparams.put(index++, entry.getValue());</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t</span><br><span class=\"line\">        \t\tdoDeleteAnd = true;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (doDeleteAnd)</span><br><span class=\"line\">        \tql = ql.delete(ql.toString().lastIndexOf(&quot; and &quot;), ql.toString().length());</span><br><span class=\"line\">        if (doDeletewWere)</span><br><span class=\"line\">       \t\tql = ql.delete(ql.toString().lastIndexOf(&quot; where &quot;), ql.toString().length());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ql;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/05/06/A问题/1.png\" alt=\"upload successful\"></p>\n<p>总结：需要深度了解底层代码。</p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo git/4.png","slug":"4.png","post":"cjvbprzi4000exwjlog7hp0kh","modified":0,"renderable":0},{"_id":"source/_posts/gtmetix/1.jpg","slug":"1.jpg","post":"cjvbprzhs000axwjl7bny3vtp","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/1.jpeg","slug":"1.jpeg","post":"cjvbprzi4000exwjlog7hp0kh","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/2.png","slug":"2.png","post":"cjvbprzi4000exwjlog7hp0kh","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/3.png","slug":"3.png","post":"cjvbprzi4000exwjlog7hp0kh","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjvbprzg20004xwjlihdcxz0g","category_id":"cjvbprzh60006xwjlgg6a6rzp","_id":"cjvbprzib000gxwjli6k0c7wr"},{"post_id":"cjvbprzgd0005xwjl97gwkk4r","category_id":"cjvbprzhy000bxwjlet5e42qj","_id":"cjvbprzit000mxwjlbvvsjskv"},{"post_id":"cjvbprzhd0008xwjlpvmpnqk8","category_id":"cjvbprzhy000bxwjlet5e42qj","_id":"cjvbprzj4000qxwjl45pbc6fu"},{"post_id":"cjvbprzip000kxwjlbwbhucb2","category_id":"cjvbprzhy000bxwjlet5e42qj","_id":"cjvbprzja000uxwjlpqng1joc"},{"post_id":"cjvbprzho0009xwjl8a5ta1f3","category_id":"cjvbprzis000lxwjl3ramhaf2","_id":"cjvbprzje000wxwjlxbztpbhn"},{"post_id":"cjvbprzhs000axwjl7bny3vtp","category_id":"cjvbprzj5000rxwjly49m5po6","_id":"cjvbprzjr0013xwjlkpw4ggjg"},{"post_id":"cjvbprzjc000vxwjl1u7pl49p","category_id":"cjvbprzis000lxwjl3ramhaf2","_id":"cjvbprzjx0018xwjl9rej52ur"},{"post_id":"cjvbprzi4000exwjlog7hp0kh","category_id":"cjvbprzjf000xxwjl65bfbz6m","_id":"cjvbprzk9001dxwjl58u2v2jf"},{"post_id":"cjvbprzkg001gxwjlde3n94n9","category_id":"cjvbprzh60006xwjlgg6a6rzp","_id":"cjvbprzl3001pxwjlstoiaekf"},{"post_id":"cjvbprzik000jxwjli5x0bsoz","category_id":"cjvbprzkb001exwjlh52ybp0g","_id":"cjvbprzla001uxwjlbc0q1oj6"},{"post_id":"cjvbprzjl0011xwjll36tvtcf","category_id":"cjvbprzku001kxwjlljcj4ci6","_id":"cjvbprzlf001yxwjlbeo8eksk"},{"post_id":"cjvbprzl7001txwjl8bkqjqla","category_id":"cjvbprzkb001exwjlh52ybp0g","_id":"cjvbprzll0022xwjlhz4y47p0"},{"post_id":"cjvbprzju0015xwjl2lrr7wsa","category_id":"cjvbprzl6001sxwjlakn09aio","_id":"cjvbprzlo0025xwjlfwhyjl1o"},{"post_id":"cjvbprzjy0019xwjlsziv9tu8","category_id":"cjvbprzli0020xwjltyhniqmm","_id":"cjvbprzlu002axwjlm4djq4oh"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","category_id":"cjvbprzjv0016xwjlorm96kf8","_id":"cjvbprzly002fxwjla1ebh560"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","category_id":"cjvbprzlp0026xwjlp636i9ws","_id":"cjvbprzly002gxwjlad9gpl5p"},{"post_id":"cjvbprzk6001cxwjl4swo4oqq","category_id":"cjvbprzli0020xwjltyhniqmm","_id":"cjvbprzlz002hxwjlmo155nxh"}],"PostTag":[{"post_id":"cjvbprzg20004xwjlihdcxz0g","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzi1000dxwjlwqyk20nm"},{"post_id":"cjvbprzgd0005xwjl97gwkk4r","tag_id":"cjvbprzhz000cxwjlcftqqqff","_id":"cjvbprzjk0010xwjl9zph2czl"},{"post_id":"cjvbprzgd0005xwjl97gwkk4r","tag_id":"cjvbprzif000ixwjlvavdsveg","_id":"cjvbprzjq0012xwjlyl1wgdbl"},{"post_id":"cjvbprzgd0005xwjl97gwkk4r","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzjx0017xwjlnezdim3e"},{"post_id":"cjvbprzgd0005xwjl97gwkk4r","tag_id":"cjvbprzj5000sxwjlt48mz6fz","_id":"cjvbprzk2001axwjl2tuwmk7f"},{"post_id":"cjvbprzhd0008xwjlpvmpnqk8","tag_id":"cjvbprzj5000sxwjlt48mz6fz","_id":"cjvbprzkf001fxwjlynkaotkt"},{"post_id":"cjvbprzhd0008xwjlpvmpnqk8","tag_id":"cjvbprzhz000cxwjlcftqqqff","_id":"cjvbprzkk001hxwjlcri6j5kj"},{"post_id":"cjvbprzkg001gxwjlde3n94n9","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzkv001lxwjl9oampip9"},{"post_id":"cjvbprzkg001gxwjlde3n94n9","tag_id":"cjvbprzif000ixwjlvavdsveg","_id":"cjvbprzl0001nxwjlyubbnm56"},{"post_id":"cjvbprzkl001ixwjl8l4a9dmz","tag_id":"cjvbprzj5000sxwjlt48mz6fz","_id":"cjvbprzl6001rxwjlad562v5i"},{"post_id":"cjvbprzl1001oxwjl37gvwcvx","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzlb001vxwjly5tkqfzc"},{"post_id":"cjvbprzho0009xwjl8a5ta1f3","tag_id":"cjvbprzk3001bxwjloa0to4p6","_id":"cjvbprzlk0021xwjlocs9r7hz"},{"post_id":"cjvbprzho0009xwjl8a5ta1f3","tag_id":"cjvbprzks001jxwjlzvlgghhe","_id":"cjvbprzlm0023xwjldfoh39mk"},{"post_id":"cjvbprzho0009xwjl8a5ta1f3","tag_id":"cjvbprzl5001qxwjlumhi7qdf","_id":"cjvbprzlr0027xwjl958s8lq6"},{"post_id":"cjvbprzlc001wxwjle0bmy1wp","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzls0028xwjljzc670cj"},{"post_id":"cjvbprzlg001zxwjlbw1lv5we","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzlu002bxwjlsub7h602"},{"post_id":"cjvbprzhs000axwjl7bny3vtp","tag_id":"cjvbprzlf001xxwjlquwjebc5","_id":"cjvbprzlw002dxwjlet0gxo0m"},{"post_id":"cjvbprzi4000exwjlog7hp0kh","tag_id":"cjvbprzln0024xwjlfjskq6sd","_id":"cjvbprzm0002jxwjlywi6m4lw"},{"post_id":"cjvbprzi4000exwjlog7hp0kh","tag_id":"cjvbprzlt0029xwjlyrftk7d6","_id":"cjvbprzm1002kxwjl3s22s8sh"},{"post_id":"cjvbprzi4000exwjlog7hp0kh","tag_id":"cjvbprzlx002exwjl5f7e5uht","_id":"cjvbprzm2002mxwjlbwlaijut"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","tag_id":"cjvbprzm0002ixwjllx4kdiwc","_id":"cjvbprzm6002qxwjli086nf1h"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","tag_id":"cjvbprzm1002lxwjlqawbwaa0","_id":"cjvbprzm7002rxwjl0odyz7hd"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","tag_id":"cjvbprzm3002nxwjlqqxnk82j","_id":"cjvbprzm8002txwjlr2f21nx6"},{"post_id":"cjvbprzi9000fxwjlbymkzqar","tag_id":"cjvbprzm4002oxwjlyohxu1ul","_id":"cjvbprzm9002uxwjl6pnwwoyq"},{"post_id":"cjvbprzik000jxwjli5x0bsoz","tag_id":"cjvbprzm5002pxwjlpkk2btuy","_id":"cjvbprzma002wxwjlems9dr75"},{"post_id":"cjvbprzip000kxwjlbwbhucb2","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzmd002yxwjl5r88lb0j"},{"post_id":"cjvbprzip000kxwjlbwbhucb2","tag_id":"cjvbprzj5000sxwjlt48mz6fz","_id":"cjvbprzme002zxwjl5wwipb46"},{"post_id":"cjvbprzip000kxwjlbwbhucb2","tag_id":"cjvbprzm0002ixwjllx4kdiwc","_id":"cjvbprzmg0031xwjlzuaqd50z"},{"post_id":"cjvbprzip000kxwjlbwbhucb2","tag_id":"cjvbprzif000ixwjlvavdsveg","_id":"cjvbprzmg0032xwjl9lqwe260"},{"post_id":"cjvbprziy000oxwjlewri7hc0","tag_id":"cjvbprzmb002xxwjlf07nmqsh","_id":"cjvbprzmj0034xwjlhr0cqt81"},{"post_id":"cjvbprzj2000pxwjltd90fijc","tag_id":"cjvbprzha0007xwjl0uikuise","_id":"cjvbprzmk0035xwjlupwt5fb3"},{"post_id":"cjvbprzj2000pxwjltd90fijc","tag_id":"cjvbprzmf0030xwjlzrbfpeom","_id":"cjvbprzmm0037xwjlmri48o5w"},{"post_id":"cjvbprzjc000vxwjl1u7pl49p","tag_id":"cjvbprzm0002ixwjllx4kdiwc","_id":"cjvbprzmm0038xwjlmicpj58c"},{"post_id":"cjvbprzjc000vxwjl1u7pl49p","tag_id":"cjvbprzif000ixwjlvavdsveg","_id":"cjvbprzmo003axwjlx2ojiso8"},{"post_id":"cjvbprzjh000zxwjljfa95dia","tag_id":"cjvbprzml0036xwjljv0kxc5i","_id":"cjvbprzmp003bxwjlev0xlhah"},{"post_id":"cjvbprzjl0011xwjll36tvtcf","tag_id":"cjvbprzmn0039xwjlvylmx2up","_id":"cjvbprzmr003exwjl7ut2cdma"},{"post_id":"cjvbprzjl0011xwjll36tvtcf","tag_id":"cjvbprzmp003cxwjlob21fzem","_id":"cjvbprzms003fxwjlgp1eeyzf"},{"post_id":"cjvbprzjy0019xwjlsziv9tu8","tag_id":"cjvbprzmq003dxwjl166ubx3b","_id":"cjvbprzmw003kxwjla71jp8xk"},{"post_id":"cjvbprzjy0019xwjlsziv9tu8","tag_id":"cjvbprzms003gxwjlemp7h6jv","_id":"cjvbprzmx003lxwjl6hg49rkr"},{"post_id":"cjvbprzjy0019xwjlsziv9tu8","tag_id":"cjvbprzmt003hxwjl2ucu28nh","_id":"cjvbprzn0003nxwjltb1qu2x2"},{"post_id":"cjvbprzjy0019xwjlsziv9tu8","tag_id":"cjvbprzmu003ixwjlptd6cg3n","_id":"cjvbprzn2003oxwjlpucmw7ke"},{"post_id":"cjvbprzk6001cxwjl4swo4oqq","tag_id":"cjvbprzmv003jxwjle9xefhbj","_id":"cjvbprzn4003qxwjl1lawsi3i"},{"post_id":"cjvbprzk6001cxwjl4swo4oqq","tag_id":"cjvbprzms003gxwjlemp7h6jv","_id":"cjvbprzn5003rxwjlo18wakky"},{"post_id":"cjvbprzkw001mxwjl37d2qmtj","tag_id":"cjvbprzn3003pxwjlqdowmk2h","_id":"cjvbprzn7003txwjl4svxumw3"},{"post_id":"cjvbprzl7001txwjl8bkqjqla","tag_id":"cjvbprzm5002pxwjlpkk2btuy","_id":"cjvbprznc003wxwjl8h5105vq"},{"post_id":"cjvbprzl7001txwjl8bkqjqla","tag_id":"cjvbprzn7003uxwjlry8inidy","_id":"cjvbprznd003xxwjla0uhkrjq"},{"post_id":"cjvbprzl7001txwjl8bkqjqla","tag_id":"cjvbprzn8003vxwjlv4o3ijzf","_id":"cjvbprzne003yxwjlmu34avqq"},{"post_id":"cjvbsiuen0000u4jltyjew9bi","tag_id":"cjvbs94yz0001hgjlby2xlduo","_id":"cjvbsiuf90001u4jlsp4hlggw"}],"Tag":[{"name":"docker","_id":"cjvbprzha0007xwjl0uikuise"},{"name":"git","_id":"cjvbprzhz000cxwjlcftqqqff"},{"name":"maven","_id":"cjvbprzif000ixwjlvavdsveg"},{"name":"jenkins","_id":"cjvbprzj5000sxwjlt48mz6fz"},{"name":"linux","_id":"cjvbprzk3001bxwjloa0to4p6"},{"name":"rpm","_id":"cjvbprzks001jxwjlzvlgghhe"},{"name":"yum","_id":"cjvbprzl5001qxwjlumhi7qdf"},{"name":"性能优化","_id":"cjvbprzlf001xxwjlquwjebc5"},{"name":"hexo","_id":"cjvbprzln0024xwjlfjskq6sd"},{"name":"githubpage","_id":"cjvbprzlt0029xwjlyrftk7d6"},{"name":"hexo-admin","_id":"cjvbprzlx002exwjl5f7e5uht"},{"name":"java","_id":"cjvbprzm0002ixwjllx4kdiwc"},{"name":"单例模式","_id":"cjvbprzm1002lxwjlqawbwaa0"},{"name":"设计模式","_id":"cjvbprzm3002nxwjlqqxnk82j"},{"name":"线程","_id":"cjvbprzm4002oxwjlyohxu1ul"},{"name":"solr","_id":"cjvbprzm5002pxwjlpkk2btuy"},{"name":"thymeleaf","_id":"cjvbprzmb002xxwjlf07nmqsh"},{"name":"mysql","_id":"cjvbprzmf0030xwjlzrbfpeom"},{"name":"notepad","_id":"cjvbprzml0036xwjljv0kxc5i"},{"name":"plantuml","_id":"cjvbprzmn0039xwjlvylmx2up"},{"name":"atom","_id":"cjvbprzmp003cxwjlob21fzem"},{"name":"工作","_id":"cjvbprzmq003dxwjl166ubx3b"},{"name":"work","_id":"cjvbprzms003gxwjlemp7h6jv"},{"name":"工具","_id":"cjvbprzmt003hxwjl2ucu28nh"},{"name":"tools","_id":"cjvbprzmu003ixwjlptd6cg3n"},{"name":"工作效率","_id":"cjvbprzmv003jxwjle9xefhbj"},{"name":"red hat Linux","_id":"cjvbprzn3003pxwjlqdowmk2h"},{"name":"solr-master","_id":"cjvbprzn7003uxwjlry8inidy"},{"name":"solr-slave","_id":"cjvbprzn8003vxwjlv4o3ijzf"},{"name":"jpa","_id":"cjvbs94yz0001hgjlby2xlduo"}]}}