{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1487671763863},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1487671763870},{"_id":"themes/Yelee/_config.yml","hash":"4fffa3fe211c76ddc2b0afb6b7d6372259096333","modified":1487750478700},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1487671764532},{"_id":"source/404/index.md","hash":"fd1d6927c79e66599bb9c42b7fd7586968fe0e0d","modified":1487729024014},{"_id":"source/_discarded/exo git.md","hash":"83d3c4fdc7617a50c759bff91c5e5192a5c496d8","modified":1487586393202},{"_id":"source/_posts/hexo git.md","hash":"fda18b6a792ce84044840c827ebed34508feb9c1","modified":1487673319940},{"_id":"source/about/index-1.md","hash":"03c96050db1892bf5a968bc4017f70220e10b970","modified":1487673357443},{"_id":"source/about/index.md","hash":"c16630b80e5d4581e6a1d5e4f4b019d7d49fe358","modified":1487908473216},{"_id":"source/smallwenzi.github.io-master/.gitattributes","hash":"4a3348fc9a3d1ec1bc517399089440028e2242fd","modified":1487560992000},{"_id":"source/smallwenzi.github.io-master/.gitignore","hash":"3809d45d6f3670729017961126fee68de00eebb3","modified":1487560992000},{"_id":"source/tags/index.md","hash":"8f179b85e4ce6db40a64547c4d2fa9b6a13b597b","modified":1487673173082},{"_id":"themes/Yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1487671921080},{"_id":"themes/Yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487671763828},{"_id":"themes/Yelee/.git/ORIG_HEAD","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1487671921252},{"_id":"themes/Yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1487671763845},{"_id":"themes/Yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487671747401},{"_id":"themes/Yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1487671763814},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1487671763860},{"_id":"themes/Yelee/.git/index","hash":"9f767f6a5fb25674b6c4eaa88ac9f1ec0e9b9652","modified":1487671765212},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1487671763881},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1487671763886},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1487671763891},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1487671763896},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1487671763901},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1487671764503},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1487671764507},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1487671764509},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1487671764520},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487671764523},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1487671764528},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487671764525},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1487671764533},{"_id":"source/_discarded/exo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"source/_discarded/exo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"source/_discarded/exo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"source/_discarded/exo git/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487586393338},{"_id":"source/_posts/exo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"source/_posts/exo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"source/_posts/exo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"source/_posts/exo git/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487586393338},{"_id":"source/_posts/hexo git/1.jpeg","hash":"005bb04becc11f386e4c174a32110677bd6d7f6a","modified":1487586393325},{"_id":"source/_posts/hexo git/2.png","hash":"f68754f1c8f0939dd6a162b207aa85f5f711c68a","modified":1487586393321},{"_id":"source/_posts/hexo git/3.png","hash":"a1165a66861d344170b662de946d669bba3396c1","modified":1487586393318},{"_id":"themes/Yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487671747471},{"_id":"themes/Yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487671747495},{"_id":"themes/Yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487671747526},{"_id":"themes/Yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487671747530},{"_id":"themes/Yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487671747548},{"_id":"themes/Yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487671747554},{"_id":"themes/Yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487671747561},{"_id":"themes/Yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1487671747567},{"_id":"themes/Yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487671747573},{"_id":"themes/Yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487671747580},{"_id":"themes/Yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1487671747585},{"_id":"themes/Yelee/.git/logs/HEAD","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763835},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1487671763917},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1487671763935},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1487671763990},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1487671763921},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1487671764002},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1487671764147},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1487671764156},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1487671764232},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1487671764238},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1487671764287},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1487671764299},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1487671764307},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1487671764331},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1487671764340},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1487671764355},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1487671764359},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1487671764429},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1487671764418},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1487671764465},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1487671764500},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1487671764616},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1487671764637},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1487671764646},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1487671764655},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1487671764731},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1487671764912},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1487671764920},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1487671764921},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1487671764925},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1487671764924},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1487671764927},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1487671764926},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1487671764930},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1487671764932},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1487671764929},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1487671764933},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1487671764931},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1487671764934},{"_id":"themes/Yelee/source/img/head.jpg","hash":"9513f74ab765b6160f575ac687004e2309097dfb","modified":1487572462503},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1487671764935},{"_id":"themes/Yelee/source/img/wechat.jpg","hash":"79f03ce57452d84c10a726c758a5210b193b27eb","modified":1487583917917},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1487671764937},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1487671764938},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1487671764939},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1487671764940},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1487671764941},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1487671764942},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1487671765060},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1487671765108},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1487671765129},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1487671764922},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1487671764936},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1487671765148},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1487671765167},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1487671765188},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1487671765206},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1487671764660},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1487671764716},{"_id":"themes/Yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1487671763833},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1487671764011},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1487671764030},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1487671764065},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1487671764076},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1487671764089},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1487671764367},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1487671764375},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1487671764389},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1487749937187},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1487671764410},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1487671764414},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1487671764539},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1487671764545},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1487671764549},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1487671764554},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1487671764820},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1487671764824},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1487671764828},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1487671764832},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1487671764839},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1487671764842},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1487671764849},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1487671764852},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1487671764856},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1487671764861},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1487671764872},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1487671764881},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1487671764885},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1487671764892},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1487671764900},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1487671764905},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1487671764753},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1487671764760},{"_id":"themes/Yelee/.git/objects/pack/pack-493eb329b8ff3d0c9c1e2553152d7360bec26ee2.idx","hash":"5c356891946c1b399d3a1a70349e6e4ca9e85899","modified":1487671763459},{"_id":"source/_posts/hexo git/4.png","hash":"9cd1c8552ae4b20a22451ddc5d948f5d116c51b1","modified":1487646880422},{"_id":"themes/Yelee/.git/logs/refs/heads/master","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763837},{"_id":"themes/Yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487671763826},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1487671764768},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1487671764776},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1487671764781},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1487671764802},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1487671764812},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1487671764808},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1487671764816},{"_id":"themes/Yelee/.git/logs/refs/remotes/origin/HEAD","hash":"d3375263769f565cf512dc7ad66b488e8abe16d4","modified":1487671763823},{"_id":"themes/Yelee/.git/objects/pack/pack-493eb329b8ff3d0c9c1e2553152d7360bec26ee2.pack","hash":"727a7d63bd7082f0dc7c2b2683f030f1b15d6e68","modified":1487671763600},{"_id":"public/baidu_urls.txt","hash":"9b00766f67665c9ab9bf09accf6b251522d8a369","modified":1487907431542},{"_id":"public/baidusitemap.xml","hash":"d3f6b1d11ba02b3b3254a0fde04d4f117ab117fa","modified":1487907359617},{"_id":"public/page-sitemap.xml","hash":"2908216bbddd18b20d2d18f7c286da771ee8dde9","modified":1487749468002},{"_id":"public/category-sitemap.xml","hash":"2eed6094b41abc7619468fb835341de2a26ca7bb","modified":1487907359829},{"_id":"public/post-sitemap.xml","hash":"cd9860869f6e7ad0d673b84ccc8610976e311685","modified":1487907359829},{"_id":"public/content.json","hash":"90b33e7e1c72799bb08ca9f2d91a438abe5fcd81","modified":1487845339568},{"_id":"public/search.xml","hash":"cd7bb0af85ff412146751c9808f542ad93188353","modified":1487845339571},{"_id":"public/atom.xml","hash":"d800b38e484e8820bd8f7bf857dd637d18dc732e","modified":1487907359822},{"_id":"public/sitemap.xml","hash":"9cfd992f90cc3e95ade3ab4b63494e7040f3efc1","modified":1487907359829},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1487749468004},{"_id":"public/tag-sitemap.xml","hash":"89e503825b4d27d04e92cb018bf213626b738da3","modified":1487907359830},{"_id":"public/archives/index.html","hash":"6d48ee16c492b804de98cf3e1151e739113a36d1","modified":1487845339998},{"_id":"public/archives/2017/index.html","hash":"015536e3c97ff95bf1ab477d68e5e2289fbaa492","modified":1487845340062},{"_id":"public/archives/2017/02/index.html","hash":"11f08766fbb0494103b99ef49c8234e976f2bf84","modified":1487845340064},{"_id":"public/categories/hexo/index.html","hash":"5a37f88a0eed3251cca37ad792a79a97dd90c72e","modified":1487845340064},{"_id":"public/index.html","hash":"2f8f0f6ed40b11d635debcdb34064aee660312e3","modified":1487845340065},{"_id":"public/404.html","hash":"e0e78a661544ab829c5f3b35f650056c09a84d76","modified":1487845340065},{"_id":"public/2017/02/20/hexo git/index.html","hash":"31aea98d84a47bdf353cbf881518f57a3f107388","modified":1487845340065},{"_id":"public/about/index-1.html","hash":"3850cbded0dd9621e7fd6dea589243af1da0e9c9","modified":1487845340064},{"_id":"public/about/index.html","hash":"1911c2124fd3abd3246a0304ea067d63aa125d9c","modified":1487845340064},{"_id":"public/tags/hexo-admin/index.html","hash":"f6e068285539be42d7d4eaf2bb81373c98cadffe","modified":1487845340127},{"_id":"public/tags/hexo/index.html","hash":"818edf648343970ffc8c9ce0e08cf07f2ad7694a","modified":1487845340127},{"_id":"public/tags/githubpage/index.html","hash":"17b64487aba35e255d29894b1edfde51181f29ff","modified":1487845340127},{"_id":"public/tags/index.html","hash":"a334d4d9e6ea45e0593c7b8bbdab426aa2328e63","modified":1487845340128},{"_id":"source/_drafts/java-单例模式（七中）.md","hash":"93244443a8f8163f22430efcc73050e7dc628d5f","modified":1487751507214},{"_id":"source/_posts/Singleton.md","hash":"e20378b908a51f02ce3cfb94bf2b7de60ec2d5b0","modified":1487845530038},{"_id":"public/categories/java/index.html","hash":"e00f9a0f3b69563a5b1006d4b10aa1f4902f0904","modified":1487845340091},{"_id":"public/categories/java/设计模式/index.html","hash":"b571b115bb3dddab7e2f3d3388893b0397e944af","modified":1487845340126},{"_id":"public/2017/02/20/Singleton/index.html","hash":"fcb3df05f81643f838dff687a09ac13d762c143f","modified":1487907359838},{"_id":"public/tags/java/index.html","hash":"e7d9fc17f648009b65844d3105298f1bb9483080","modified":1487845340133},{"_id":"public/tags/设计模式/index.html","hash":"6edfbe5ed0f3c072248b159929dbe6ebfa796856","modified":1487845340133},{"_id":"public/tags/线程/index.html","hash":"1002fab20c6c30192917e99533769580d964394c","modified":1487845340133},{"_id":"public/tags/单例模式/index.html","hash":"5b9b41f5547d4bc0e777235dc053ce52bcdf04b8","modified":1487845340133},{"_id":"source/_posts/ink-java.md","hash":"494827d47c75ed883b13f5798f5a0d5b4d3d7c34","modified":1487924714009},{"_id":"source/_drafts/ink-java.md","hash":"494827d47c75ed883b13f5798f5a0d5b4d3d7c34","modified":1488264848856},{"_id":"source/_posts/gtmetix.md","hash":"f618ab8d0c9eeee8d6394c4d03cb7a3c507ef9a1","modified":1488338497958},{"_id":"source/_posts/gtmetix/1.jpg","hash":"33942df97031a319ffba6e735b26a3592426ce38","modified":1488265485707}],"Category":[{"name":"hexo","_id":"cizgjv7ls0003fwjlznpztzlu"},{"name":"java","_id":"cizgphdqm0001fcjlmal2yxur"},{"name":"设计模式","parent":"cizgphdqm0001fcjlmal2yxur","_id":"cizi5c02i0001p0jlgebcjfz6"},{"name":"性能优化","_id":"cizxs85u00000p8jl66eiih9q"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"_content":"\n<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\n---\n\n<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=320 height=330 src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe>\n</div>","date":"2017-02-22T02:03:44.014Z","updated":"2017-02-22T02:03:44.014Z","path":"/404.html","layout":"page","_id":"cizgjv7lg0000fwjl2hy46k0v","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    .share,\n    #page-visit,\n    .visit span:nth-child(2),\n    .pic br {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=112513213&auto=0&height=430\"></iframe><br></div>"},{"title":"about","date":"2017-02-21T10:35:57.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2017-02-21 18:35:57\n---\n","updated":"2017-02-21T10:35:57.443Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"cizgjv7lp0002fwjl826s1f5m","content":"","excerpt":"","more":""},{"title":"关于我","date":"2017-02-20T09:27:32.000Z","_content":"我喜欢计算编程,专注后端开发 性能调优 spring 框架","source":"about/index.md","raw":"title: 关于我\ndate: 2017-02-20 17:27:32\n---\n我喜欢计算编程,专注后端开发 性能调优 spring 框架","updated":"2017-02-24T03:54:33.216Z","path":"about/index.html","_id":"cizgjv7lu0005fwjlfpjn56fv","comments":1,"layout":"page","content":"<p>我喜欢计算编程,专注后端开发 性能调优 spring 框架</p>\n","excerpt":"","more":"<p>我喜欢计算编程,专注后端开发 性能调优 spring 框架</p>\n"},{"title":"tags","date":"2017-02-21T10:32:53.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-21 18:32:53\n---\n","updated":"2017-02-21T10:32:53.082Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cizgjv7lw0006fwjloc96erpn","content":"","excerpt":"","more":""}],"Post":[{"title":"Hexo搭建githubpage博客","date":"2017-02-20T02:01:00.000Z","_content":"<Excerpt in index | 首页摘要>\n这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<!-- more -->\n<The rest of contents | 余下全文>\n## 系统环境配置\n要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！\n\n### 安装Node.js\n下载:[Node.js](https://nodejs.org/en/)\n参考地址：[安装Node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n### 安装Git\n下载地址：[git](http://git-scm.com/download/)\n\n### 安装hexo\n\n``` bash\n$ cd d:/hexo\n```\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n``` bash\n$ hexo init blog\n```\n\n``` bash\n$ cd blog\n```\n\n``` bash\n$ npm install\n```\n\n``` bash\n$ hexo s -g #生成预览\n```\n\n$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n$ hexo s == hexo server 启动本地web服务，用于博客的预览\n$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）\n\n现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。\n![logo](hexo git/1.jpeg)\n\n\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)\nhexo-cli: 1.0.2\nos: Windows_NT 6.1.7601 win32 x64\nhttp_parser: 2.7.0\nnode: 7.5.0\nv8: 5.4.500.48\nuv: 1.10.2\nzlib: 1.2.8\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n\n\n## Hexo主题设置\n这里以主题yilia为例进行说明。\n\n### 安装主题 (在blog目录下)\n``` bash\n$ hexo clean\n```\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n### 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。\n\n### 更新主题\n``` bash\n$ cd themes/yilia\n```\n``` bash\n$ git pull\n```\n``` bash\n$ hexo s -g\n```\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n![logo](hexo git/1.jpeg)\n\n\n## Github Pages设置\n\n### 什么是Github Pages\n\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。\n\n在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://smallwenzi.github.io/ 访问了。\n\n参考：[配置SSH keys](http://www.jianshu.com/p/05289a4bc8b2)\n\n## 部署Hexo到Github Pages\n\n这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://smallwenzi.github.io/访问了。\n首先需要明白所谓部署到github的原理。\n1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://smallwenzi.github.io来直接访问。\n2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。\n3需要将hexo生成的静态网站，提交(git commit)到github上。\n明白了原理，怎么做自然就清晰了。\n\n### 使用hexo deploy部署\nhexo deploy可以部署到很多平台，具体可以参考这个[链接](https://hexo.io/docs/deployment.html). 如果部署到github，需要在配置文件_config.xml中作如下修改：\ndeploy:\n  type: git\n  repo: git@github.com:smallwenzi/smallwenzi.github.io.git\n  branch: master\n  \n ![logo](hexo git/2.png)\n然后在命令行中执行 (在blog目录下)\n``` bash\n$ npm install hexo-deployer-git --save\n```\n``` bash\n$ hexo d -g\n```\n即可完成部署。现在打开https://smallwenzi.github.io/ ，\n\n简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。\n\n\n### Hexo 主题配置\n\n每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。\n以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：\n[参考](https://github.com/litten/hexo-theme-yilia).\n\n\n## Hexo 使用本地图片\n首先确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n假设在\n\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n\n![logo](hexo git/3.png)\n\n## Hexo 后台管理配置\n在blog 跟目录下\n``` bash\n$ npm install --save hexo-admin \n```\n``` bash\n$ hexo server -d\n```\n如下图：\n![logo](hexo git/4.png)\n[参考](https://github.com/jaredly/hexo-admin)\n","source":"_posts/hexo git.md","raw":"title: Hexo搭建githubpage博客\ntags:\n  - hexo\n  - githubpage\n  - hexo-admin\ncategories: hexo\ndate: 2017-02-20 10:01:00\n---\n<Excerpt in index | 首页摘要>\n这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<!-- more -->\n<The rest of contents | 余下全文>\n## 系统环境配置\n要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！\n\n### 安装Node.js\n下载:[Node.js](https://nodejs.org/en/)\n参考地址：[安装Node.js](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n### 安装Git\n下载地址：[git](http://git-scm.com/download/)\n\n### 安装hexo\n\n``` bash\n$ cd d:/hexo\n```\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n``` bash\n$ hexo init blog\n```\n\n``` bash\n$ cd blog\n```\n\n``` bash\n$ npm install\n```\n\n``` bash\n$ hexo s -g #生成预览\n```\n\n$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n$ hexo s == hexo server 启动本地web服务，用于博客的预览\n$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）\n\n现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。\n![logo](hexo git/1.jpeg)\n\n\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)\nhexo-cli: 1.0.2\nos: Windows_NT 6.1.7601 win32 x64\nhttp_parser: 2.7.0\nnode: 7.5.0\nv8: 5.4.500.48\nuv: 1.10.2\nzlib: 1.2.8\nares: 1.10.1-DEV\nmodules: 51\nopenssl: 1.0.2k\nicu: 58.2\nunicode: 9.0\ncldr: 30.0.3\ntz: 2016j\n\n\n## Hexo主题设置\n这里以主题yilia为例进行说明。\n\n### 安装主题 (在blog目录下)\n``` bash\n$ hexo clean\n```\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n### 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。\n\n### 更新主题\n``` bash\n$ cd themes/yilia\n```\n``` bash\n$ git pull\n```\n``` bash\n$ hexo s -g\n```\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n![logo](hexo git/1.jpeg)\n\n\n## Github Pages设置\n\n### 什么是Github Pages\n\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。\n\n在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://smallwenzi.github.io/ 访问了。\n\n参考：[配置SSH keys](http://www.jianshu.com/p/05289a4bc8b2)\n\n## 部署Hexo到Github Pages\n\n这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://smallwenzi.github.io/访问了。\n首先需要明白所谓部署到github的原理。\n1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://smallwenzi.github.io来直接访问。\n2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。\n3需要将hexo生成的静态网站，提交(git commit)到github上。\n明白了原理，怎么做自然就清晰了。\n\n### 使用hexo deploy部署\nhexo deploy可以部署到很多平台，具体可以参考这个[链接](https://hexo.io/docs/deployment.html). 如果部署到github，需要在配置文件_config.xml中作如下修改：\ndeploy:\n  type: git\n  repo: git@github.com:smallwenzi/smallwenzi.github.io.git\n  branch: master\n  \n ![logo](hexo git/2.png)\n然后在命令行中执行 (在blog目录下)\n``` bash\n$ npm install hexo-deployer-git --save\n```\n``` bash\n$ hexo d -g\n```\n即可完成部署。现在打开https://smallwenzi.github.io/ ，\n\n简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。\n\n\n### Hexo 主题配置\n\n每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。\n以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：\n[参考](https://github.com/litten/hexo-theme-yilia).\n\n\n## Hexo 使用本地图片\n首先确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n假设在\n\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n\n![logo](hexo git/3.png)\n\n## Hexo 后台管理配置\n在blog 跟目录下\n``` bash\n$ npm install --save hexo-admin \n```\n``` bash\n$ hexo server -d\n```\n如下图：\n![logo](hexo git/4.png)\n[参考](https://github.com/jaredly/hexo-admin)\n","slug":"hexo git","published":1,"updated":"2017-02-21T10:35:19.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgjv7li0001fwjlt66b71mu","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h2 id=\"系统环境配置\"><a href=\"#系统环境配置\" class=\"headerlink\" title=\"系统环境配置\"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>下载:<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a><br>参考地址：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">安装Node.js</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>下载地址：<a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"external\">git</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> d:/hexo</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> blog</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -g <span class=\"comment\">#生成预览</span></div></pre></td></tr></table></figure>\n<p>$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo s == hexo server 启动本地web服务，用于博客的预览<br>$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）</p>\n<p>现在我们打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br>hexo-cli: 1.0.2<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 2.7.0<br>node: 7.5.0<br>v8: 5.4.500.48<br>uv: 1.10.2<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>modules: 51<br>openssl: 1.0.2k<br>icu: 58.2<br>unicode: 9.0<br>cldr: 30.0.3<br>tz: 2016j</p>\n<h2 id=\"Hexo主题设置\"><a href=\"#Hexo主题设置\" class=\"headerlink\" title=\"Hexo主题设置\"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p>\n<h3 id=\"安装主题-在blog目录下\"><a href=\"#安装主题-在blog目录下\" class=\"headerlink\" title=\"安装主题 (在blog目录下)\"></a>安装主题 (在blog目录下)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes/yilia</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -g</div></pre></td></tr></table></figure>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<h2 id=\"Github-Pages设置\"><a href=\"#Github-Pages设置\" class=\"headerlink\" title=\"Github Pages设置\"></a>Github Pages设置</h2><h3 id=\"什么是Github-Pages\"><a href=\"#什么是Github-Pages\" class=\"headerlink\" title=\"什么是Github Pages\"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 来访问你的个人主页。<br>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p>\n<p>在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href=\"http://smallwenzi.github.io/\">http://smallwenzi.github.io/</a> 访问了。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"external\">配置SSH keys</a></p>\n<h2 id=\"部署Hexo到Github-Pages\"><a href=\"#部署Hexo到Github-Pages\" class=\"headerlink\" title=\"部署Hexo到Github Pages\"></a>部署Hexo到Github Pages</h2><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href=\"http://smallwenzi.github.io/访问了。\">http://smallwenzi.github.io/访问了。</a><br>首先需要明白所谓部署到github的原理。<br>1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href=\"http://smallwenzi.github.io来直接访问。\" target=\"_blank\" rel=\"external\">http://smallwenzi.github.io来直接访问。</a><br>2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p>\n<h3 id=\"使用hexo-deploy部署\"><a href=\"#使用hexo-deploy部署\" class=\"headerlink\" title=\"使用hexo deploy部署\"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br>deploy:<br>  type: git<br>  repo: git@github.com:smallwenzi/smallwenzi.github.io.git<br>  branch: master</p>\n<p> <img src=\"/2017/02/20/hexo git/2.png\" alt=\"logo\"><br>然后在命令行中执行 (在blog目录下)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure>\n<p>即可完成部署。现在打开<a href=\"https://smallwenzi.github.io/\">https://smallwenzi.github.io/</a> ，</p>\n<p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。</p>\n<h3 id=\"Hexo-主题配置\"><a href=\"#Hexo-主题配置\" class=\"headerlink\" title=\"Hexo 主题配置\"></a>Hexo 主题配置</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：<br><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">参考</a>.</p>\n<h2 id=\"Hexo-使用本地图片\"><a href=\"#Hexo-使用本地图片\" class=\"headerlink\" title=\"Hexo 使用本地图片\"></a>Hexo 使用本地图片</h2><p>首先确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>假设在</p>\n<p>MacGesture2-Publish<br>├── apppicker.jpg<br>├── logo.jpg<br>└── rules.jpg<br>MacGesture2-Publish.md</p>\n<p><img src=\"/2017/02/20/hexo git/3.png\" alt=\"logo\"></p>\n<h2 id=\"Hexo-后台管理配置\"><a href=\"#Hexo-后台管理配置\" class=\"headerlink\" title=\"Hexo 后台管理配置\"></a>Hexo 后台管理配置</h2><p>在blog 跟目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save hexo-admin</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>如下图：<br><img src=\"/2017/02/20/hexo git/4.png\" alt=\"logo\"><br><a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"external\">参考</a></p>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程</Excerpt></p>","more":"<p></p>\n<p><The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></The></p>\n<h2 id=\"系统环境配置\"><a href=\"#系统环境配置\" class=\"headerlink\" title=\"系统环境配置\"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>下载:<a href=\"https://nodejs.org/en/\">Node.js</a><br>参考地址：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装Node.js</a></p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>下载地址：<a href=\"http://git-scm.com/download/\">git</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> d:/hexo</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> blog</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -g <span class=\"comment\">#生成预览</span></div></pre></td></tr></table></figure>\n<p>$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo s == hexo server 启动本地web服务，用于博客的预览<br>$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）</p>\n<p>现在我们打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br>hexo-cli: 1.0.2<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 2.7.0<br>node: 7.5.0<br>v8: 5.4.500.48<br>uv: 1.10.2<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>modules: 51<br>openssl: 1.0.2k<br>icu: 58.2<br>unicode: 9.0<br>cldr: 30.0.3<br>tz: 2016j</p>\n<h2 id=\"Hexo主题设置\"><a href=\"#Hexo主题设置\" class=\"headerlink\" title=\"Hexo主题设置\"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p>\n<h3 id=\"安装主题-在blog目录下\"><a href=\"#安装主题-在blog目录下\" class=\"headerlink\" title=\"安装主题 (在blog目录下)\"></a>安装主题 (在blog目录下)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes/yilia</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -g</div></pre></td></tr></table></figure>\n<p>现在打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br><img src=\"/2017/02/20/hexo git/1.jpeg\" alt=\"logo\"></p>\n<h2 id=\"Github-Pages设置\"><a href=\"#Github-Pages设置\" class=\"headerlink\" title=\"Github Pages设置\"></a>Github Pages设置</h2><h3 id=\"什么是Github-Pages\"><a href=\"#什么是Github-Pages\" class=\"headerlink\" title=\"什么是Github Pages\"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\">http://username.github.io</a> 来访问你的个人主页。<br>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p>\n<p>在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href=\"http://smallwenzi.github.io/\">http://smallwenzi.github.io/</a> 访问了。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/05289a4bc8b2\">配置SSH keys</a></p>\n<h2 id=\"部署Hexo到Github-Pages\"><a href=\"#部署Hexo到Github-Pages\" class=\"headerlink\" title=\"部署Hexo到Github Pages\"></a>部署Hexo到Github Pages</h2><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href=\"http://smallwenzi.github.io/访问了。\">http://smallwenzi.github.io/访问了。</a><br>首先需要明白所谓部署到github的原理。<br>1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href=\"http://smallwenzi.github.io来直接访问。\">http://smallwenzi.github.io来直接访问。</a><br>2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p>\n<h3 id=\"使用hexo-deploy部署\"><a href=\"#使用hexo-deploy部署\" class=\"headerlink\" title=\"使用hexo deploy部署\"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个<a href=\"https://hexo.io/docs/deployment.html\">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br>deploy:<br>  type: git<br>  repo: git@github.com:smallwenzi/smallwenzi.github.io.git<br>  branch: master</p>\n<p> <img src=\"/2017/02/20/hexo git/2.png\" alt=\"logo\"><br>然后在命令行中执行 (在blog目录下)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure>\n<p>即可完成部署。现在打开<a href=\"https://smallwenzi.github.io/\">https://smallwenzi.github.io/</a> ，</p>\n<p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。</p>\n<h3 id=\"Hexo-主题配置\"><a href=\"#Hexo-主题配置\" class=\"headerlink\" title=\"Hexo 主题配置\"></a>Hexo 主题配置</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：<br><a href=\"https://github.com/litten/hexo-theme-yilia\">参考</a>.</p>\n<h2 id=\"Hexo-使用本地图片\"><a href=\"#Hexo-使用本地图片\" class=\"headerlink\" title=\"Hexo 使用本地图片\"></a>Hexo 使用本地图片</h2><p>首先确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>假设在</p>\n<p>MacGesture2-Publish<br>├── apppicker.jpg<br>├── logo.jpg<br>└── rules.jpg<br>MacGesture2-Publish.md</p>\n<p><img src=\"/2017/02/20/hexo git/3.png\" alt=\"logo\"></p>\n<h2 id=\"Hexo-后台管理配置\"><a href=\"#Hexo-后台管理配置\" class=\"headerlink\" title=\"Hexo 后台管理配置\"></a>Hexo 后台管理配置</h2><p>在blog 跟目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save hexo-admin</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>如下图：<br><img src=\"/2017/02/20/hexo git/4.png\" alt=\"logo\"><br><a href=\"https://github.com/jaredly/hexo-admin\">参考</a></p>"},{"title":"java 单例模式","author":"wen","date":"2017-02-20T02:01:00.000Z","_content":"<Excerpt in index | 首页摘要>\n在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<!-- more -->\n<The rest of contents | 余下全文>\n# 什么是单例模式\n在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。\n从概念中体现出了单例的一些特点：\n\n> （1）、在任何情况下，单例类永远只有一个实例存在\n> （2）、单例需要有能力为整个系统提供这一唯一实例  \n\n为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：\n在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。\n\n正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。\n\n## 1、饿汉式单例\n饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = new MySingleton();\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n以上代码运行结果：\n```\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n```\n从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了\n\n## 2、懒汉式单例\n懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：\n```\npackage org.mlinge.s02;  \n  \npublic class MySingleton {  \n      \n    private static MySingleton instance = null;  \n      \n    private MySingleton(){}  \n      \n    public static MySingleton getInstance() {  \n        try {   \n            if(instance != null){//懒汉式   \n                  \n            }else{  \n                //创建实例之前可能会有一些准备性的耗时工作   \n                Thread.sleep(300);  \n                instance = new MySingleton();  \n            }  \n        } catch (InterruptedException e) {   \n            e.printStackTrace();  \n        }  \n        return instance;  \n    }  \n}  \n```\n这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用\n```\npackage wen.design.singleton.s02;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n5807702\n213274\n```\n## 3、线程安全的懒汉式单例\n要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。\n* （1）方法中声明synchronized关键字\n出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public synchronized static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                instance = new MySingleton();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n\n此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：\n\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n\n从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：\n\n* （2）、 同步代码块实现\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    //public synchronized static MySingleton getInstance() {\n    public static MySingleton getInstance() {\n        try {\n            synchronized (MySingleton.class) {\n                if(instance != null){//懒汉式\n\n                }else{\n                    //创建实例之前可能会有一些准备性的耗时工作\n                    Thread.sleep(300);\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。\n* （3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：\n\n```\npackage wen.design.singleton.s04;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n20358204\n5807702\n```\n\n从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。\n\n* （4）、 Double Check Locking 双检查锁机制（推荐）\n为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：\n\n```\npackage wen.design.singleton.s05;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //使用volatile关键字保其可见性\n    volatile private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    if(instance == null){//二次检查\n                        instance = new MySingleton();\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n从运行结果来看，该中方法保证了多线程并发下的线程安全性。\n这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。\n\n## 4、使用静态内置类实现单例模式\nDCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：\n\n```\npackage wen.design.singleton.s06;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n\n以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：\n\n```\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n```\n从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。\n\n## 5、序列化与反序列化的单例模式实现\n静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。\n代码实现如下：\n\n```\npackage wen.design.singleton.s07;\n\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉\n    protected Object readResolve() throws ObjectStreamException {\n        System.out.println(\"调用了readResolve方法！\");\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n序列化与反序列化测试代码：\n```\npackage wen.design.singleton.s07;\n\nimport java.io.*;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class SaveAndReadForSingleton {\n    public static void main(String[] args) {\n        MySingleton singleton = MySingleton.getInstance();\n\n        File file = new File(\"MySingleton.txt\");\n\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(singleton);\n            fos.close();\n            oos.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            FileInputStream fis = new FileInputStream(file);\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            MySingleton rSingleton = (MySingleton) ois.readObject();\n            fis.close();\n            ois.close();\n            System.out.println(rSingleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n运行上面的测试代码，得到的结果如下：\n```\n19235919\n调用了readResolve方法！\n19235919\n\n```\n从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证\n\n\n## 6、使用static代码块实现单例\n静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton{\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    static{\n        instance = new MySingleton();\n    }\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n\n测试代码如下：\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(MySingleton.getInstance().hashCode());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[3];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n```\n\n## 7、使用枚举数据类型实现单例模式\n\n枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/22.\n */\n\npublic enum EnumFactory{\n\n    singletonFactory;\n\n    private MySingleton instance;\n\n    private EnumFactory(){//枚举类的构造方法在类加载是被实例化\n        instance = new MySingleton();\n    }\n\n    public MySingleton getInstance(){\n        return instance;\n    }\n\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n\n```\n\n测试代码\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n```\n运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。\n## 8、完善使用enum枚举实现单例模式\n不暴露枚举类实现细节的封装代码如下：\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class ClassFactory{\n\n    private enum MyEnumSingleton{\n        singletonFactory;\n\n        private MySingleton instance;\n\n        private MyEnumSingleton(){//枚举类的构造方法在类加载是被实例化\n            instance = new MySingleton();\n        }\n\n        public MySingleton getInstance(){\n            return instance;\n        }\n    }\n\n    public static MySingleton getInstance(){\n        return MyEnumSingleton.singletonFactory.getInstance();\n    }\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n```\n测试代码\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(ClassFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n运行结果\n```\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n```\n验证结果表明，完善后的单例实现更为合理。\n以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！\n\n","source":"_posts/Singleton.md","raw":"title: java 单例模式\ntags:\n  - java\n  - 单例模式\n  - 设计模式\n  - 线程\ncategories:\n  - java\n  - 设计模式\nauthor: wen\ndate: 2017-02-20 10:01:00\n---\n<Excerpt in index | 首页摘要>\n在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<!-- more -->\n<The rest of contents | 余下全文>\n# 什么是单例模式\n在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。\n从概念中体现出了单例的一些特点：\n\n> （1）、在任何情况下，单例类永远只有一个实例存在\n> （2）、单例需要有能力为整个系统提供这一唯一实例  \n\n为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：\n在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。\n\n正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。\n\n## 1、饿汉式单例\n饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = new MySingleton();\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：\n```\npackage wen.design.singleton.s01;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n以上代码运行结果：\n```\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n15779934\n```\n从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了\n\n## 2、懒汉式单例\n懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：\n```\npackage org.mlinge.s02;  \n  \npublic class MySingleton {  \n      \n    private static MySingleton instance = null;  \n      \n    private MySingleton(){}  \n      \n    public static MySingleton getInstance() {  \n        try {   \n            if(instance != null){//懒汉式   \n                  \n            }else{  \n                //创建实例之前可能会有一些准备性的耗时工作   \n                Thread.sleep(300);  \n                instance = new MySingleton();  \n            }  \n        } catch (InterruptedException e) {   \n            e.printStackTrace();  \n        }  \n        return instance;  \n    }  \n}  \n```\n这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用\n```\npackage wen.design.singleton.s02;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(MySingleton.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n5807702\n213274\n```\n## 3、线程安全的懒汉式单例\n要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。\n* （1）方法中声明synchronized关键字\n出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public synchronized static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                instance = new MySingleton();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n\n此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：\n\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n\n从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：\n\n* （2）、 同步代码块实现\n\n\n```\npackage wen.design.singleton.s03;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    //public synchronized static MySingleton getInstance() {\n    public static MySingleton getInstance() {\n        try {\n            synchronized (MySingleton.class) {\n                if(instance != null){//懒汉式\n\n                }else{\n                    //创建实例之前可能会有一些准备性的耗时工作\n                    Thread.sleep(300);\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。\n* （3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：\n\n```\npackage wen.design.singleton.s04;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    instance = new MySingleton();\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：\n```\n30863650\n7408068\n20469344\n28235257\n23191477\n10884088\n23667197\n20358204\n20358204\n5807702\n```\n\n从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。\n\n* （4）、 Double Check Locking 双检查锁机制（推荐）\n为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：\n\n```\npackage wen.design.singleton.s05;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //使用volatile关键字保其可见性\n    volatile private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        try {\n            if(instance != null){//懒汉式\n\n            }else{\n                //创建实例之前可能会有一些准备性的耗时工作\n                Thread.sleep(300);\n                synchronized (MySingleton.class) {\n                    if(instance == null){//二次检查\n                        instance = new MySingleton();\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return instance;\n    }\n}\n\n```\n\n此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下\n```\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n30863650\n```\n从运行结果来看，该中方法保证了多线程并发下的线程安全性。\n这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。\n\n## 4、使用静态内置类实现单例模式\nDCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：\n\n```\npackage wen.design.singleton.s06;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton {\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n\n以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：\n\n```\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n1696092\n```\n从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。\n\n## 5、序列化与反序列化的单例模式实现\n静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。\n代码实现如下：\n\n```\npackage wen.design.singleton.s07;\n\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    //内部类\n    private static class MySingletonHandler{\n        private static MySingleton instance = new MySingleton();\n    }\n\n    private MySingleton(){}\n    public static MySingleton getInstance() {\n        return MySingletonHandler.instance;\n    }\n    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉\n    protected Object readResolve() throws ObjectStreamException {\n        System.out.println(\"调用了readResolve方法！\");\n        return MySingletonHandler.instance;\n    }\n}\n\n```\n序列化与反序列化测试代码：\n```\npackage wen.design.singleton.s07;\n\nimport java.io.*;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class SaveAndReadForSingleton {\n    public static void main(String[] args) {\n        MySingleton singleton = MySingleton.getInstance();\n\n        File file = new File(\"MySingleton.txt\");\n\n        try {\n            FileOutputStream fos = new FileOutputStream(file);\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(singleton);\n            fos.close();\n            oos.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            FileInputStream fis = new FileInputStream(file);\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            MySingleton rSingleton = (MySingleton) ois.readObject();\n            fis.close();\n            ois.close();\n            System.out.println(rSingleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n运行上面的测试代码，得到的结果如下：\n```\n19235919\n调用了readResolve方法！\n19235919\n\n```\n从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证\n\n\n## 6、使用static代码块实现单例\n静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/22.\n */\npublic class MySingleton{\n\n    private static MySingleton instance = null;\n\n    private MySingleton(){}\n\n    static{\n        instance = new MySingleton();\n    }\n\n    public static MySingleton getInstance() {\n        return instance;\n    }\n}\n```\n\n测试代码如下：\n```\npackage wen.design.singleton.s08;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(MySingleton.getInstance().hashCode());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[3];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n27979955\n```\n\n## 7、使用枚举数据类型实现单例模式\n\n枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/22.\n */\n\npublic enum EnumFactory{\n\n    singletonFactory;\n\n    private MySingleton instance;\n\n    private EnumFactory(){//枚举类的构造方法在类加载是被实例化\n        instance = new MySingleton();\n    }\n\n    public MySingleton getInstance(){\n        return instance;\n    }\n\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n\n```\n\n测试代码\n```\npackage wen.design.singleton.s09;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n\n运行结果：\n```\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n15055830\n```\n运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。\n## 8、完善使用enum枚举实现单例模式\n不暴露枚举类实现细节的封装代码如下：\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class ClassFactory{\n\n    private enum MyEnumSingleton{\n        singletonFactory;\n\n        private MySingleton instance;\n\n        private MyEnumSingleton(){//枚举类的构造方法在类加载是被实例化\n            instance = new MySingleton();\n        }\n\n        public MySingleton getInstance(){\n            return instance;\n        }\n    }\n\n    public static MySingleton getInstance(){\n        return MyEnumSingleton.singletonFactory.getInstance();\n    }\n}\n\nclass MySingleton{//需要获实现单例的类，比如数据库连接Connection\n    public MySingleton(){}\n}\n```\n测试代码\n```\npackage wen.design.singleton.s10;\n\n/**\n * Created by dell on 2017/2/23.\n */\npublic class MyThread extends Thread{\n\n    @Override\n    public void run() {\n        System.out.println(ClassFactory.getInstance().hashCode());\n    }\n\n    public static void main(String[] args) {\n\n        MyThread[] mts = new MyThread[10];\n        for(int i = 0 ; i < mts.length ; i++){\n            mts[i] = new MyThread();\n        }\n\n        for (int j = 0; j < mts.length; j++) {\n            mts[j].start();\n        }\n    }\n}\n```\n运行结果\n```\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n25039388\n```\n验证结果表明，完善后的单例实现更为合理。\n以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！\n\n","slug":"Singleton","published":1,"updated":"2017-02-23T10:25:30.038Z","_id":"cizgphdqf0000fcjl9g6cbhc9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<a id=\"more\"></a></excerpt></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。<br>从概念中体现出了单例的一些特点：</p>\n<blockquote>\n<p>（1）、在任何情况下，单例类永远只有一个实例存在<br>（2）、单例需要有能力为整个系统提供这一唯一实例  </p>\n</blockquote>\n<p>为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：<br>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>\n<p>正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。</p>\n<h2 id=\"1、饿汉式单例\"><a href=\"#1、饿汉式单例\" class=\"headerlink\" title=\"1、饿汉式单例\"></a>1、饿汉式单例</h2><p>饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s01;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = new MySingleton();</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s01;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了</p>\n<h2 id=\"2、懒汉式单例\"><a href=\"#2、懒汉式单例\" class=\"headerlink\" title=\"2、懒汉式单例\"></a>2、懒汉式单例</h2><p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.mlinge.s02;  </div><div class=\"line\">  </div><div class=\"line\">public class MySingleton &#123;  </div><div class=\"line\">      </div><div class=\"line\">    private static MySingleton instance = null;  </div><div class=\"line\">      </div><div class=\"line\">    private MySingleton()&#123;&#125;  </div><div class=\"line\">      </div><div class=\"line\">    public static MySingleton getInstance() &#123;  </div><div class=\"line\">        try &#123;   </div><div class=\"line\">            if(instance != null)&#123;//懒汉式   </div><div class=\"line\">                  </div><div class=\"line\">            &#125;else&#123;  </div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作   </div><div class=\"line\">                Thread.sleep(300);  </div><div class=\"line\">                instance = new MySingleton();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;   </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s02;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">7408068</div><div class=\"line\">20469344</div><div class=\"line\">28235257</div><div class=\"line\">23191477</div><div class=\"line\">10884088</div><div class=\"line\">23667197</div><div class=\"line\">20358204</div><div class=\"line\">5807702</div><div class=\"line\">213274</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、线程安全的懒汉式单例\"><a href=\"#3、线程安全的懒汉式单例\" class=\"headerlink\" title=\"3、线程安全的懒汉式单例\"></a>3、线程安全的懒汉式单例</h2><p>要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。</p>\n<ul>\n<li>（1）方法中声明synchronized关键字<br>出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s03;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                instance = new MySingleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div></pre></td></tr></table></figure>\n<p>从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：</p>\n<ul>\n<li>（2）、 同步代码块实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s03;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    //public synchronized static MySingleton getInstance() &#123;</div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            synchronized (MySingleton.class) &#123;</div><div class=\"line\">                if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                    Thread.sleep(300);</div><div class=\"line\">                    instance = new MySingleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。</p>\n<ul>\n<li>（3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s04;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                synchronized (MySingleton.class) &#123;</div><div class=\"line\">                    instance = new MySingleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">7408068</div><div class=\"line\">20469344</div><div class=\"line\">28235257</div><div class=\"line\">23191477</div><div class=\"line\">10884088</div><div class=\"line\">23667197</div><div class=\"line\">20358204</div><div class=\"line\">20358204</div><div class=\"line\">5807702</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。</p>\n<ul>\n<li>（4）、 Double Check Locking 双检查锁机制（推荐）<br>为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s05;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    //使用volatile关键字保其可见性</div><div class=\"line\">    volatile private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                synchronized (MySingleton.class) &#123;</div><div class=\"line\">                    if(instance == null)&#123;//二次检查</div><div class=\"line\">                        instance = new MySingleton();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，该中方法保证了多线程并发下的线程安全性。<br>这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。</p>\n<h2 id=\"4、使用静态内置类实现单例模式\"><a href=\"#4、使用静态内置类实现单例模式\" class=\"headerlink\" title=\"4、使用静态内置类实现单例模式\"></a>4、使用静态内置类实现单例模式</h2><p>DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s06;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    //内部类</div><div class=\"line\">    private static class MySingletonHandler&#123;</div><div class=\"line\">        private static MySingleton instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div></pre></td></tr></table></figure>\n<p>从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。</p>\n<h2 id=\"5、序列化与反序列化的单例模式实现\"><a href=\"#5、序列化与反序列化的单例模式实现\" class=\"headerlink\" title=\"5、序列化与反序列化的单例模式实现\"></a>5、序列化与反序列化的单例模式实现</h2><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。<br>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s07;</div><div class=\"line\"></div><div class=\"line\">import java.io.ObjectStreamException;</div><div class=\"line\">import java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton implements Serializable &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final long serialVersionUID = 1L;</div><div class=\"line\"></div><div class=\"line\">    //内部类</div><div class=\"line\">    private static class MySingletonHandler&#123;</div><div class=\"line\">        private static MySingleton instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉</div><div class=\"line\">    protected Object readResolve() throws ObjectStreamException &#123;</div><div class=\"line\">        System.out.println(&quot;调用了readResolve方法！&quot;);</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>序列化与反序列化测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s07;</div><div class=\"line\"></div><div class=\"line\">import java.io.*;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class SaveAndReadForSingleton &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        MySingleton singleton = MySingleton.getInstance();</div><div class=\"line\"></div><div class=\"line\">        File file = new File(&quot;MySingleton.txt&quot;);</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</div><div class=\"line\">            ObjectOutputStream oos = new ObjectOutputStream(fos);</div><div class=\"line\">            oos.writeObject(singleton);</div><div class=\"line\">            fos.close();</div><div class=\"line\">            oos.close();</div><div class=\"line\">            System.out.println(singleton.hashCode());</div><div class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            FileInputStream fis = new FileInputStream(file);</div><div class=\"line\">            ObjectInputStream ois = new ObjectInputStream(fis);</div><div class=\"line\">            MySingleton rSingleton = (MySingleton) ois.readObject();</div><div class=\"line\">            fis.close();</div><div class=\"line\">            ois.close();</div><div class=\"line\">            System.out.println(rSingleton.hashCode());</div><div class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面的测试代码，得到的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">19235919</div><div class=\"line\">调用了readResolve方法！</div><div class=\"line\">19235919</div></pre></td></tr></table></figure></p>\n<p>从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证</p>\n<h2 id=\"6、使用static代码块实现单例\"><a href=\"#6、使用static代码块实现单例\" class=\"headerlink\" title=\"6、使用static代码块实现单例\"></a>6、使用static代码块实现单例</h2><p>静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s08;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton&#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    static&#123;</div><div class=\"line\">        instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s08;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">            System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[3];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div></pre></td></tr></table></figure></p>\n<h2 id=\"7、使用枚举数据类型实现单例模式\"><a href=\"#7、使用枚举数据类型实现单例模式\" class=\"headerlink\" title=\"7、使用枚举数据类型实现单例模式\"></a>7、使用枚举数据类型实现单例模式</h2><p>枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s09;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public enum EnumFactory&#123;</div><div class=\"line\"></div><div class=\"line\">    singletonFactory;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton instance;</div><div class=\"line\"></div><div class=\"line\">    private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化</div><div class=\"line\">        instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public MySingleton getInstance()&#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class=\"line\">    public MySingleton()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s09;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div></pre></td></tr></table></figure></p>\n<p>运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。</p>\n<h2 id=\"8、完善使用enum枚举实现单例模式\"><a href=\"#8、完善使用enum枚举实现单例模式\" class=\"headerlink\" title=\"8、完善使用enum枚举实现单例模式\"></a>8、完善使用enum枚举实现单例模式</h2><p>不暴露枚举类实现细节的封装代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s10;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class ClassFactory&#123;</div><div class=\"line\"></div><div class=\"line\">    private enum MyEnumSingleton&#123;</div><div class=\"line\">        singletonFactory;</div><div class=\"line\"></div><div class=\"line\">        private MySingleton instance;</div><div class=\"line\"></div><div class=\"line\">        private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化</div><div class=\"line\">            instance = new MySingleton();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public MySingleton getInstance()&#123;</div><div class=\"line\">            return instance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance()&#123;</div><div class=\"line\">        return MyEnumSingleton.singletonFactory.getInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class=\"line\">    public MySingleton()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s10;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(ClassFactory.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div></pre></td></tr></table></figure></p>\n<p>验证结果表明，完善后的单例实现更为合理。<br>以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！</p>\n","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧</Excerpt></p>","more":"<p></p>\n<p><The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></The></p>\n<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。<br>从概念中体现出了单例的一些特点：</p>\n<blockquote>\n<p>（1）、在任何情况下，单例类永远只有一个实例存在<br>（2）、单例需要有能力为整个系统提供这一唯一实例  </p>\n</blockquote>\n<p>为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：<br>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>\n<p>正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。</p>\n<h2 id=\"1、饿汉式单例\"><a href=\"#1、饿汉式单例\" class=\"headerlink\" title=\"1、饿汉式单例\"></a>1、饿汉式单例</h2><p>饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s01;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = new MySingleton();</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s01;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div><div class=\"line\">15779934</div></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了</p>\n<h2 id=\"2、懒汉式单例\"><a href=\"#2、懒汉式单例\" class=\"headerlink\" title=\"2、懒汉式单例\"></a>2、懒汉式单例</h2><p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.mlinge.s02;  </div><div class=\"line\">  </div><div class=\"line\">public class MySingleton &#123;  </div><div class=\"line\">      </div><div class=\"line\">    private static MySingleton instance = null;  </div><div class=\"line\">      </div><div class=\"line\">    private MySingleton()&#123;&#125;  </div><div class=\"line\">      </div><div class=\"line\">    public static MySingleton getInstance() &#123;  </div><div class=\"line\">        try &#123;   </div><div class=\"line\">            if(instance != null)&#123;//懒汉式   </div><div class=\"line\">                  </div><div class=\"line\">            &#125;else&#123;  </div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作   </div><div class=\"line\">                Thread.sleep(300);  </div><div class=\"line\">                instance = new MySingleton();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;   </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s02;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">7408068</div><div class=\"line\">20469344</div><div class=\"line\">28235257</div><div class=\"line\">23191477</div><div class=\"line\">10884088</div><div class=\"line\">23667197</div><div class=\"line\">20358204</div><div class=\"line\">5807702</div><div class=\"line\">213274</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、线程安全的懒汉式单例\"><a href=\"#3、线程安全的懒汉式单例\" class=\"headerlink\" title=\"3、线程安全的懒汉式单例\"></a>3、线程安全的懒汉式单例</h2><p>要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。</p>\n<ul>\n<li>（1）方法中声明synchronized关键字<br>出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s03;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                instance = new MySingleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div></pre></td></tr></table></figure>\n<p>从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：</p>\n<ul>\n<li>（2）、 同步代码块实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s03;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    //public synchronized static MySingleton getInstance() &#123;</div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            synchronized (MySingleton.class) &#123;</div><div class=\"line\">                if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                    Thread.sleep(300);</div><div class=\"line\">                    instance = new MySingleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。</p>\n<ul>\n<li>（3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s04;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                synchronized (MySingleton.class) &#123;</div><div class=\"line\">                    instance = new MySingleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">7408068</div><div class=\"line\">20469344</div><div class=\"line\">28235257</div><div class=\"line\">23191477</div><div class=\"line\">10884088</div><div class=\"line\">23667197</div><div class=\"line\">20358204</div><div class=\"line\">20358204</div><div class=\"line\">5807702</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。</p>\n<ul>\n<li>（4）、 Double Check Locking 双检查锁机制（推荐）<br>为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s05;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    //使用volatile关键字保其可见性</div><div class=\"line\">    volatile private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if(instance != null)&#123;//懒汉式</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                //创建实例之前可能会有一些准备性的耗时工作</div><div class=\"line\">                Thread.sleep(300);</div><div class=\"line\">                synchronized (MySingleton.class) &#123;</div><div class=\"line\">                    if(instance == null)&#123;//二次检查</div><div class=\"line\">                        instance = new MySingleton();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div><div class=\"line\">30863650</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，该中方法保证了多线程并发下的线程安全性。<br>这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。</p>\n<h2 id=\"4、使用静态内置类实现单例模式\"><a href=\"#4、使用静态内置类实现单例模式\" class=\"headerlink\" title=\"4、使用静态内置类实现单例模式\"></a>4、使用静态内置类实现单例模式</h2><p>DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s06;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton &#123;</div><div class=\"line\"></div><div class=\"line\">    //内部类</div><div class=\"line\">    private static class MySingletonHandler&#123;</div><div class=\"line\">        private static MySingleton instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div><div class=\"line\">1696092</div></pre></td></tr></table></figure>\n<p>从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。</p>\n<h2 id=\"5、序列化与反序列化的单例模式实现\"><a href=\"#5、序列化与反序列化的单例模式实现\" class=\"headerlink\" title=\"5、序列化与反序列化的单例模式实现\"></a>5、序列化与反序列化的单例模式实现</h2><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。<br>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s07;</div><div class=\"line\"></div><div class=\"line\">import java.io.ObjectStreamException;</div><div class=\"line\">import java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton implements Serializable &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final long serialVersionUID = 1L;</div><div class=\"line\"></div><div class=\"line\">    //内部类</div><div class=\"line\">    private static class MySingletonHandler&#123;</div><div class=\"line\">        private static MySingleton instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉</div><div class=\"line\">    protected Object readResolve() throws ObjectStreamException &#123;</div><div class=\"line\">        System.out.println(&quot;调用了readResolve方法！&quot;);</div><div class=\"line\">        return MySingletonHandler.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>序列化与反序列化测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s07;</div><div class=\"line\"></div><div class=\"line\">import java.io.*;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class SaveAndReadForSingleton &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        MySingleton singleton = MySingleton.getInstance();</div><div class=\"line\"></div><div class=\"line\">        File file = new File(&quot;MySingleton.txt&quot;);</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</div><div class=\"line\">            ObjectOutputStream oos = new ObjectOutputStream(fos);</div><div class=\"line\">            oos.writeObject(singleton);</div><div class=\"line\">            fos.close();</div><div class=\"line\">            oos.close();</div><div class=\"line\">            System.out.println(singleton.hashCode());</div><div class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            FileInputStream fis = new FileInputStream(file);</div><div class=\"line\">            ObjectInputStream ois = new ObjectInputStream(fis);</div><div class=\"line\">            MySingleton rSingleton = (MySingleton) ois.readObject();</div><div class=\"line\">            fis.close();</div><div class=\"line\">            ois.close();</div><div class=\"line\">            System.out.println(rSingleton.hashCode());</div><div class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面的测试代码，得到的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">19235919</div><div class=\"line\">调用了readResolve方法！</div><div class=\"line\">19235919</div></pre></td></tr></table></figure></p>\n<p>从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证</p>\n<h2 id=\"6、使用static代码块实现单例\"><a href=\"#6、使用static代码块实现单例\" class=\"headerlink\" title=\"6、使用static代码块实现单例\"></a>6、使用static代码块实现单例</h2><p>静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s08;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\">public class MySingleton&#123;</div><div class=\"line\"></div><div class=\"line\">    private static MySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    static&#123;</div><div class=\"line\">        instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance() &#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s08;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">            System.out.println(MySingleton.getInstance().hashCode());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[3];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div><div class=\"line\">27979955</div></pre></td></tr></table></figure></p>\n<h2 id=\"7、使用枚举数据类型实现单例模式\"><a href=\"#7、使用枚举数据类型实现单例模式\" class=\"headerlink\" title=\"7、使用枚举数据类型实现单例模式\"></a>7、使用枚举数据类型实现单例模式</h2><p>枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s09;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/22.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public enum EnumFactory&#123;</div><div class=\"line\"></div><div class=\"line\">    singletonFactory;</div><div class=\"line\"></div><div class=\"line\">    private MySingleton instance;</div><div class=\"line\"></div><div class=\"line\">    private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化</div><div class=\"line\">        instance = new MySingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public MySingleton getInstance()&#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class=\"line\">    public MySingleton()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s09;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div><div class=\"line\">15055830</div></pre></td></tr></table></figure></p>\n<p>运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。</p>\n<h2 id=\"8、完善使用enum枚举实现单例模式\"><a href=\"#8、完善使用enum枚举实现单例模式\" class=\"headerlink\" title=\"8、完善使用enum枚举实现单例模式\"></a>8、完善使用enum枚举实现单例模式</h2><p>不暴露枚举类实现细节的封装代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s10;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class ClassFactory&#123;</div><div class=\"line\"></div><div class=\"line\">    private enum MyEnumSingleton&#123;</div><div class=\"line\">        singletonFactory;</div><div class=\"line\"></div><div class=\"line\">        private MySingleton instance;</div><div class=\"line\"></div><div class=\"line\">        private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化</div><div class=\"line\">            instance = new MySingleton();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public MySingleton getInstance()&#123;</div><div class=\"line\">            return instance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MySingleton getInstance()&#123;</div><div class=\"line\">        return MyEnumSingleton.singletonFactory.getInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class=\"line\">    public MySingleton()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package wen.design.singleton.s10;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by dell on 2017/2/23.</div><div class=\"line\"> */</div><div class=\"line\">public class MyThread extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(ClassFactory.getInstance().hashCode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        MyThread[] mts = new MyThread[10];</div><div class=\"line\">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class=\"line\">            mts[i] = new MyThread();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class=\"line\">            mts[j].start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div><div class=\"line\">25039388</div></pre></td></tr></table></figure></p>\n<p>验证结果表明，完善后的单例实现更为合理。<br>以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！</p>"},{"title":"think in java","author":"wen","date":"2017-02-24T07:13:00.000Z","_content":"# Think in java\n\n* 对象 Object-Oriented programming\n  \n* 万物皆对象\n   * A 程序是对象的集合，它们通过发送消息来告知彼此所要做\n   * B 每个对象都有自己的由其他对象所构成的存储\n   * C 每个对象都拥有类型\n   * D 某一特定类型的所有对象都可以接受同样的消息(可替代性)\n\n* 对象具有状态（数据成员）、行为（方法）和标识（内存地址）\n  类描述了具有特性（数据成员）和行为（功能）的功能集合\n\n* 访问控制 \n\n","source":"_drafts/ink-java.md","raw":"title: think in java\nauthor: wen\ntags:\n  - java\ncategories: []\ndate: 2017-02-24 15:13:00\n---\n# Think in java\n\n* 对象 Object-Oriented programming\n  \n* 万物皆对象\n   * A 程序是对象的集合，它们通过发送消息来告知彼此所要做\n   * B 每个对象都有自己的由其他对象所构成的存储\n   * C 每个对象都拥有类型\n   * D 某一特定类型的所有对象都可以接受同样的消息(可替代性)\n\n* 对象具有状态（数据成员）、行为（方法）和标识（内存地址）\n  类描述了具有特性（数据成员）和行为（功能）的功能集合\n\n* 访问控制 \n\n","slug":"ink-java","published":0,"updated":"2017-02-28T06:54:08.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqdy5rh0000esjlma2mlrha","content":"<h1 id=\"Think-in-java\"><a href=\"#Think-in-java\" class=\"headerlink\" title=\"Think in java\"></a>Think in java</h1><ul>\n<li><p>对象 Object-Oriented programming</p>\n</li>\n<li><p>万物皆对象</p>\n<ul>\n<li>A 程序是对象的集合，它们通过发送消息来告知彼此所要做</li>\n<li>B 每个对象都有自己的由其他对象所构成的存储</li>\n<li>C 每个对象都拥有类型</li>\n<li>D 某一特定类型的所有对象都可以接受同样的消息(可替代性)</li>\n</ul>\n</li>\n<li><p>对象具有状态（数据成员）、行为（方法）和标识（内存地址）<br>类描述了具有特性（数据成员）和行为（功能）的功能集合</p>\n</li>\n<li><p>访问控制 </p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Think-in-java\"><a href=\"#Think-in-java\" class=\"headerlink\" title=\"Think in java\"></a>Think in java</h1><ul>\n<li><p>对象 Object-Oriented programming</p>\n</li>\n<li><p>万物皆对象</p>\n<ul>\n<li>A 程序是对象的集合，它们通过发送消息来告知彼此所要做</li>\n<li>B 每个对象都有自己的由其他对象所构成的存储</li>\n<li>C 每个对象都拥有类型</li>\n<li>D 某一特定类型的所有对象都可以接受同样的消息(可替代性)</li>\n</ul>\n</li>\n<li><p>对象具有状态（数据成员）、行为（方法）和标识（内存地址）<br>类描述了具有特性（数据成员）和行为（功能）的功能集合</p>\n</li>\n<li><p>访问控制 </p>\n</li>\n</ul>\n"},{"title":"用GTmetrix来优化你的网页（集成了YSlow、FireBug的功能）","author":"wen","date":"2017-02-28T06:57:00.000Z","_content":"<Excerpt in index | 首页摘要>\n网址是：http://gtmetrix.com/ ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n![logo](gtmetix/1.jpg)\n一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。\n\n## YSlow的检查项目\n  ### Leverage browser caching  浏览器缓存\n  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。\n      \n  ### Specify a cache validator 指定缓存验证器   \nAll static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。\n\n ### Optimize images 优化图片\nReduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。\n\n### Specify image dimensions 指定图片大小\nSpecifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。\n\n### Enable gzip compression 启用gzip压缩\n\nReduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。\n\n### Minify JavaScript 缩小javascript\nCompacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间\n\n### Minify HTML 缩小HTML\nCompacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。\n\n### Specify a Vary: Accept-Encoding header\n\nBugs in some public proxies may lead to compressed versions of your resources being served to users that don't support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。\n\n### Remove query strings from static resources 从静态资源中删除查询字符串\n\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a \"?\" in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。\n\n### Avoid bad requests 避免不良的请求\nRemoving \"broken links\", or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。\n\n### Avoid landing page redirects 避免着陆页重定向\nRedirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。\n\n### Defer parsing of JavaScript 延迟JavaScript的解析\nIn order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。\n\n### Enable Keep-Alive 启用保持活动\nEnabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。\n\n### Inline small CSS 内联小型外部CSS文件\nInlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。\n\n## PageSpeed的检查项\n\n## Waterfall\n\n## Timings\n\n\n## vedio\n\n## Histroy","source":"_posts/gtmetix.md","raw":"title: 用GTmetrix来优化你的网页（集成了YSlow、FireBug的功能）\nauthor: wen\ntags:\n  - 性能优化\ncategories:\n  - 性能优化\ndate: 2017-02-28 14:57:00\n---\n<Excerpt in index | 首页摘要>\n网址是：http://gtmetrix.com/ ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n![logo](gtmetix/1.jpg)\n一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。\n\n## YSlow的检查项目\n  ### Leverage browser caching  浏览器缓存\n  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。\n      \n  ### Specify a cache validator 指定缓存验证器   \nAll static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。\n\n ### Optimize images 优化图片\nReduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。\n\n### Specify image dimensions 指定图片大小\nSpecifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。\n\n### Enable gzip compression 启用gzip压缩\n\nReduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。\n\n### Minify JavaScript 缩小javascript\nCompacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间\n\n### Minify HTML 缩小HTML\nCompacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。\n\n### Specify a Vary: Accept-Encoding header\n\nBugs in some public proxies may lead to compressed versions of your resources being served to users that don't support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。\n\n### Remove query strings from static resources 从静态资源中删除查询字符串\n\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a \"?\" in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。\n\n### Avoid bad requests 避免不良的请求\nRemoving \"broken links\", or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。\n\n### Avoid landing page redirects 避免着陆页重定向\nRedirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。\n\n### Defer parsing of JavaScript 延迟JavaScript的解析\nIn order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。\n\n### Enable Keep-Alive 启用保持活动\nEnabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。\n\n### Inline small CSS 内联小型外部CSS文件\nInlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。\n\n## PageSpeed的检查项\n\n## Waterfall\n\n## Timings\n\n\n## vedio\n\n## Histroy","slug":"gtmetix","published":1,"updated":"2017-03-01T03:21:37.958Z","_id":"cizqdy5va0002esjls7g07sm6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>网址是：<a href=\"http://gtmetrix.com/\" target=\"_blank\" rel=\"external\">http://gtmetrix.com/</a> ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。<br><a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><img src=\"/2017/02/28/gtmetix/1.jpg\" alt=\"logo\"><br>一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。</p>\n<h2 id=\"YSlow的检查项目\"><a href=\"#YSlow的检查项目\" class=\"headerlink\" title=\"YSlow的检查项目\"></a>YSlow的检查项目</h2><h3 id=\"Leverage-browser-caching-浏览器缓存\"><a href=\"#Leverage-browser-caching-浏览器缓存\" class=\"headerlink\" title=\"Leverage browser caching  浏览器缓存\"></a>Leverage browser caching  浏览器缓存</h3><p>  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。</p>\n<h3 id=\"Specify-a-cache-validator-指定缓存验证器\"><a href=\"#Specify-a-cache-validator-指定缓存验证器\" class=\"headerlink\" title=\"Specify a cache validator 指定缓存验证器\"></a>Specify a cache validator 指定缓存验证器</h3><p>All static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。</p>\n<h3 id=\"Optimize-images-优化图片\"><a href=\"#Optimize-images-优化图片\" class=\"headerlink\" title=\"Optimize images 优化图片\"></a>Optimize images 优化图片</h3><p>Reduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。</p>\n<h3 id=\"Specify-image-dimensions-指定图片大小\"><a href=\"#Specify-image-dimensions-指定图片大小\" class=\"headerlink\" title=\"Specify image dimensions 指定图片大小\"></a>Specify image dimensions 指定图片大小</h3><p>Specifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。</p>\n<h3 id=\"Enable-gzip-compression-启用gzip压缩\"><a href=\"#Enable-gzip-compression-启用gzip压缩\" class=\"headerlink\" title=\"Enable gzip compression 启用gzip压缩\"></a>Enable gzip compression 启用gzip压缩</h3><p>Reduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。</p>\n<h3 id=\"Minify-JavaScript-缩小javascript\"><a href=\"#Minify-JavaScript-缩小javascript\" class=\"headerlink\" title=\"Minify JavaScript 缩小javascript\"></a>Minify JavaScript 缩小javascript</h3><p>Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间</p>\n<h3 id=\"Minify-HTML-缩小HTML\"><a href=\"#Minify-HTML-缩小HTML\" class=\"headerlink\" title=\"Minify HTML 缩小HTML\"></a>Minify HTML 缩小HTML</h3><p>Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。</p>\n<h3 id=\"Specify-a-Vary-Accept-Encoding-header\"><a href=\"#Specify-a-Vary-Accept-Encoding-header\" class=\"headerlink\" title=\"Specify a Vary: Accept-Encoding header\"></a>Specify a Vary: Accept-Encoding header</h3><p>Bugs in some public proxies may lead to compressed versions of your resources being served to users that don’t support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。</p>\n<h3 id=\"Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\"><a href=\"#Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\" class=\"headerlink\" title=\"Remove query strings from static resources 从静态资源中删除查询字符串\"></a>Remove query strings from static resources 从静态资源中删除查询字符串</h3><p>Most proxies, most notably Squid up through version 3.0, do not cache resources with a “?” in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。</p>\n<h3 id=\"Avoid-bad-requests-避免不良的请求\"><a href=\"#Avoid-bad-requests-避免不良的请求\" class=\"headerlink\" title=\"Avoid bad requests 避免不良的请求\"></a>Avoid bad requests 避免不良的请求</h3><p>Removing “broken links”, or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。</p>\n<h3 id=\"Avoid-landing-page-redirects-避免着陆页重定向\"><a href=\"#Avoid-landing-page-redirects-避免着陆页重定向\" class=\"headerlink\" title=\"Avoid landing page redirects 避免着陆页重定向\"></a>Avoid landing page redirects 避免着陆页重定向</h3><p>Redirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。</p>\n<h3 id=\"Defer-parsing-of-JavaScript-延迟JavaScript的解析\"><a href=\"#Defer-parsing-of-JavaScript-延迟JavaScript的解析\" class=\"headerlink\" title=\"Defer parsing of JavaScript 延迟JavaScript的解析\"></a>Defer parsing of JavaScript 延迟JavaScript的解析</h3><p>In order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。</p>\n<h3 id=\"Enable-Keep-Alive-启用保持活动\"><a href=\"#Enable-Keep-Alive-启用保持活动\" class=\"headerlink\" title=\"Enable Keep-Alive 启用保持活动\"></a>Enable Keep-Alive 启用保持活动</h3><p>Enabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。</p>\n<h3 id=\"Inline-small-CSS-内联小型外部CSS文件\"><a href=\"#Inline-small-CSS-内联小型外部CSS文件\" class=\"headerlink\" title=\"Inline small CSS 内联小型外部CSS文件\"></a>Inline small CSS 内联小型外部CSS文件</h3><p>Inlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。</p>\n<h2 id=\"PageSpeed的检查项\"><a href=\"#PageSpeed的检查项\" class=\"headerlink\" title=\"PageSpeed的检查项\"></a>PageSpeed的检查项</h2><h2 id=\"Waterfall\"><a href=\"#Waterfall\" class=\"headerlink\" title=\"Waterfall\"></a>Waterfall</h2><h2 id=\"Timings\"><a href=\"#Timings\" class=\"headerlink\" title=\"Timings\"></a>Timings</h2><h2 id=\"vedio\"><a href=\"#vedio\" class=\"headerlink\" title=\"vedio\"></a>vedio</h2><h2 id=\"Histroy\"><a href=\"#Histroy\" class=\"headerlink\" title=\"Histroy\"></a>Histroy</h2></script></p></the>","excerpt":"<p><Excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>网址是：<a href=\"http://gtmetrix.com/\">http://gtmetrix.com/</a> ，输入自己需要分析的链接，稍微等会儿，有两个得分，一是YSlow的分析得分，二是PageSpeed的分析得分。<br></Excerpt></p>","more":"<p></p>\n<The rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p><img src=\"/2017/02/28/gtmetix/1.jpg\" alt=\"logo\"><br>一般互联网的网站，得分要达到C（包含A和B）以上，最好能达到B。</p>\n<h2 id=\"YSlow的检查项目\"><a href=\"#YSlow的检查项目\" class=\"headerlink\" title=\"YSlow的检查项目\"></a>YSlow的检查项目</h2><h3 id=\"Leverage-browser-caching-浏览器缓存\"><a href=\"#Leverage-browser-caching-浏览器缓存\" class=\"headerlink\" title=\"Leverage browser caching  浏览器缓存\"></a>Leverage browser caching  浏览器缓存</h3><p>  Page load times can be significantly improved by asking visitors to save and reuse the files included in your website. 要求访问者保存和重复使用您网站中包含的文件，可以显着提高页面加载时间。</p>\n<h3 id=\"Specify-a-cache-validator-指定缓存验证器\"><a href=\"#Specify-a-cache-validator-指定缓存验证器\" class=\"headerlink\" title=\"Specify a cache validator 指定缓存验证器\"></a>Specify a cache validator 指定缓存验证器</h3><p>All static resources should have either a Last-Modified or ETag header. This will allow browsers to take advantage of the full benefits of caching.所有静态资源应具有Last-Modified或ETag头。 这将允许浏览器利用缓存的全部好处。</p>\n<h3 id=\"Optimize-images-优化图片\"><a href=\"#Optimize-images-优化图片\" class=\"headerlink\" title=\"Optimize images 优化图片\"></a>Optimize images 优化图片</h3><p>Reduce the load times of pages by loading appropriately sized images.通过加载适当大小的图像减少页面的加载时间。</p>\n<h3 id=\"Specify-image-dimensions-指定图片大小\"><a href=\"#Specify-image-dimensions-指定图片大小\" class=\"headerlink\" title=\"Specify image dimensions 指定图片大小\"></a>Specify image dimensions 指定图片大小</h3><p>Specifying a width and height for all images allows for faster rendering by eliminating the need for unnecessary reflows and repaints.为所有图像指定宽度和高度允许通过消除对不必要的回流和重绘的需要来更快地呈现。</p>\n<h3 id=\"Enable-gzip-compression-启用gzip压缩\"><a href=\"#Enable-gzip-compression-启用gzip压缩\" class=\"headerlink\" title=\"Enable gzip compression 启用gzip压缩\"></a>Enable gzip compression 启用gzip压缩</h3><p>Reduce the size of files sent from your server to increase the speed to which they are transferred to the browser.减少从服务器发送的文件的大小，以提高它们传输到浏览器的速度。</p>\n<h3 id=\"Minify-JavaScript-缩小javascript\"><a href=\"#Minify-JavaScript-缩小javascript\" class=\"headerlink\" title=\"Minify JavaScript 缩小javascript\"></a>Minify JavaScript 缩小javascript</h3><p>Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time.压缩JavaScript代码可以节省大量数据字节，并加快下载，解析和执行时间</p>\n<h3 id=\"Minify-HTML-缩小HTML\"><a href=\"#Minify-HTML-缩小HTML\" class=\"headerlink\" title=\"Minify HTML 缩小HTML\"></a>Minify HTML 缩小HTML</h3><p>Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up downloading, parsing, and execution time.压缩HTML代码，包括其中包含的任何内联JavaScript和CSS，可以节省许多字节的数据，加快下载，解析和执行时间。</p>\n<h3 id=\"Specify-a-Vary-Accept-Encoding-header\"><a href=\"#Specify-a-Vary-Accept-Encoding-header\" class=\"headerlink\" title=\"Specify a Vary: Accept-Encoding header\"></a>Specify a Vary: Accept-Encoding header</h3><p>Bugs in some public proxies may lead to compressed versions of your resources being served to users that don’t support compression. Specifying the Vary: Accept-Encoding header instructs the proxy to store both a compressed and uncompressed version of the resource.一些公共代理中的错误可能导致向不支持压缩的用户提供资源的压缩版本。 指定Vary：Accept-Encoding标头指示代理存储资源的压缩和未压缩版本。</p>\n<h3 id=\"Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\"><a href=\"#Remove-query-strings-from-static-resources-从静态资源中删除查询字符串\" class=\"headerlink\" title=\"Remove query strings from static resources 从静态资源中删除查询字符串\"></a>Remove query strings from static resources 从静态资源中删除查询字符串</h3><p>Most proxies, most notably Squid up through version 3.0, do not cache resources with a “?” in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves.大多数代理，最引人注目的是Squid通过3.0版本，不缓存资源与“？ 即使在响应中存在Cache-control：public标头，也可以在其URL中查找。 要为这些资源启用代理缓存，请从静态资源引用中删除查询字符串，而不是将参数编入文件名本身。</p>\n<h3 id=\"Avoid-bad-requests-避免不良的请求\"><a href=\"#Avoid-bad-requests-避免不良的请求\" class=\"headerlink\" title=\"Avoid bad requests 避免不良的请求\"></a>Avoid bad requests 避免不良的请求</h3><p>Removing “broken links”, or requests that result in 404/410 errors, avoids wasteful requests.删除“损坏的链接”或导致404/410错误的请求，可避免浪费的请求。</p>\n<h3 id=\"Avoid-landing-page-redirects-避免着陆页重定向\"><a href=\"#Avoid-landing-page-redirects-避免着陆页重定向\" class=\"headerlink\" title=\"Avoid landing page redirects 避免着陆页重定向\"></a>Avoid landing page redirects 避免着陆页重定向</h3><p>Redirections on landing pages add delays to the page load and while the redirections are occurring, nothing is shown to the client. In many cases, redirections can be eliminated without changing the function of a page.着陆页的重定向会增加页面加载的延迟，并且当重定向发生时，客户端不会显示任何内容。 在许多情况下，可以消除重定向而不改变页面的功能。</p>\n<h3 id=\"Defer-parsing-of-JavaScript-延迟JavaScript的解析\"><a href=\"#Defer-parsing-of-JavaScript-延迟JavaScript的解析\" class=\"headerlink\" title=\"Defer parsing of JavaScript 延迟JavaScript的解析\"></a>Defer parsing of JavaScript 延迟JavaScript的解析</h3><p>In order to load a page, the browser must parse the contents of all <script> tags, which adds additional time to the page load. By minimizing the amount of JavaScript needed to render the page, and deferring parsing of unneeded JavaScript until it needs to be executed, you can reduce the initial load time of your page.为了加载页面，浏览器必须解析所有<script>标签的内容，这会给页面加载增加额外的时间。 通过最小化呈现页面所需的JavaScript量，并推迟对不需要的JavaScript进行解析，直到需要执行它，您可以减少页面的初始加载时间。</p>\n<h3 id=\"Enable-Keep-Alive-启用保持活动\"><a href=\"#Enable-Keep-Alive-启用保持活动\" class=\"headerlink\" title=\"Enable Keep-Alive 启用保持活动\"></a>Enable Keep-Alive 启用保持活动</h3><p>Enabling HTTP Keep-Alive or HTTP persistent connections allow the same TCP connection to send and receive multiple HTTP requests, thus reducing the latency for subsequent requests.启用HTTP Keep-Alive或HTTP持久连接允许同一TCP连接发送和接收多个HTTP请求，从而减少后续请求的延迟。</p>\n<h3 id=\"Inline-small-CSS-内联小型外部CSS文件\"><a href=\"#Inline-small-CSS-内联小型外部CSS文件\" class=\"headerlink\" title=\"Inline small CSS 内联小型外部CSS文件\"></a>Inline small CSS 内联小型外部CSS文件</h3><p>Inlining small external CSS files can save the overhead of fetching these small files. A good alternative to inline CSS is to combine the external CSS files.内联小型外部CSS文件可以节省获取这些小文件的开销。 内联CSS的一个好的替代方法是组合外部CSS文件。</p>\n<h2 id=\"PageSpeed的检查项\"><a href=\"#PageSpeed的检查项\" class=\"headerlink\" title=\"PageSpeed的检查项\"></a>PageSpeed的检查项</h2><h2 id=\"Waterfall\"><a href=\"#Waterfall\" class=\"headerlink\" title=\"Waterfall\"></a>Waterfall</h2><h2 id=\"Timings\"><a href=\"#Timings\" class=\"headerlink\" title=\"Timings\"></a>Timings</h2><h2 id=\"vedio\"><a href=\"#vedio\" class=\"headerlink\" title=\"vedio\"></a>vedio</h2><h2 id=\"Histroy\"><a href=\"#Histroy\" class=\"headerlink\" title=\"Histroy\"></a>Histroy</h2></script></p></The>"}],"PostAsset":[{"_id":"source/_posts/hexo git/4.png","slug":"4.png","post":"cizgjv7li0001fwjlt66b71mu","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/1.jpeg","slug":"1.jpeg","post":"cizgjv7li0001fwjlt66b71mu","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/2.png","slug":"2.png","post":"cizgjv7li0001fwjlt66b71mu","modified":0,"renderable":0},{"_id":"source/_posts/hexo git/3.png","slug":"3.png","post":"cizgjv7li0001fwjlt66b71mu","modified":0,"renderable":0},{"_id":"source/_posts/gtmetix/1.jpg","slug":"1.jpg","post":"cizqdy5va0002esjls7g07sm6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cizgjv7li0001fwjlt66b71mu","category_id":"cizgjv7ls0003fwjlznpztzlu","_id":"cizgjv7m00008fwjlziodi1x7"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","category_id":"cizgphdqm0001fcjlmal2yxur","_id":"cizgphdqr0004fcjllczd73ml"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","category_id":"cizi5c02i0001p0jlgebcjfz6","_id":"cizi5c02n0003p0jlaq5wodzi"},{"post_id":"cizqdy5va0002esjls7g07sm6","category_id":"cizxs85u00000p8jl66eiih9q","_id":"cizxs85u60003p8jlusm5lqbd"}],"PostTag":[{"post_id":"cizgjv7li0001fwjlt66b71mu","tag_id":"cizgjv7lt0004fwjlzuepzq7k","_id":"cizgjv7m4000afwjl9pg935au"},{"post_id":"cizgjv7li0001fwjlt66b71mu","tag_id":"cizgjv7lz0007fwjl0pkj17yp","_id":"cizgjv7m4000bfwjlxkni7wns"},{"post_id":"cizgjv7li0001fwjlt66b71mu","tag_id":"cizgjv7m10009fwjl557xrn23","_id":"cizgjv7m5000cfwjl6n8q3yjc"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","tag_id":"cizgphdqo0002fcjlxdbgqtll","_id":"cizgphdqu0006fcjlt0lvcihb"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","tag_id":"cizgphdqq0003fcjlyo7vhu25","_id":"cizgphdqu0007fcjli9aw2qem"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","tag_id":"cizgphdqs0005fcjl413j4b3b","_id":"cizgphdqv0008fcjl8wvutg92"},{"post_id":"cizgphdqf0000fcjl9g6cbhc9","tag_id":"cizi5c02g0000p0jlgb66zig4","_id":"cizi5c02m0002p0jlaec1z30c"},{"post_id":"cizqdy5rh0000esjlma2mlrha","tag_id":"cizgphdqo0002fcjlxdbgqtll","_id":"cizqdy5sq0001esjlm08tg6a8"},{"post_id":"cizqdy5va0002esjls7g07sm6","tag_id":"cizxs85u40001p8jlx37czbu7","_id":"cizxs85u60002p8jlv1tf0a07"}],"Tag":[{"name":"hexo","_id":"cizgjv7lt0004fwjlzuepzq7k"},{"name":"githubpage","_id":"cizgjv7lz0007fwjl0pkj17yp"},{"name":"hexo-admin","_id":"cizgjv7m10009fwjl557xrn23"},{"name":"java","_id":"cizgphdqo0002fcjlxdbgqtll"},{"name":"单例模式","_id":"cizgphdqq0003fcjlyo7vhu25"},{"name":"设计模式","_id":"cizgphdqs0005fcjl413j4b3b"},{"name":"线程","_id":"cizi5c02g0000p0jlgb66zig4"},{"name":"性能优化","_id":"cizxs85u40001p8jlx37czbu7"}]}}