<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wen blog</title>
  
  <subtitle>tanyanwen的技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yanwentan.xyz/"/>
  <updated>2020-08-09T08:45:20.575Z</updated>
  <id>https://blog.yanwentan.xyz/</id>
  
  <author>
    <name>wen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring体系结构</title>
    <link href="https://blog.yanwentan.xyz/2020/08/09/Spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://blog.yanwentan.xyz/2020/08/09/Spring体系结构/</id>
    <published>2020-08-09T08:13:00.000Z</published>
    <updated>2020-08-09T08:45:20.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h1><p><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p><h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><p>Spring是一个轻量级Java开发框架，最早有Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。</p><h2 id="Spring优点："><a href="#Spring优点：" class="headerlink" title="Spring优点："></a>Spring优点：</h2><p>Spring的优点:</p><ul><li>（1）方便解耦，简化开发</li></ul><p>Spring就是一个大工厂，可以将所有对象创建和依赖的关系维护，交给Spring管理。</p><ul><li>（2）AOP编程的支持</li></ul><p>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p><ul><li>（3）声明式事务的支持</li></ul><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p><ul><li>（4）方便程序的测试</li></ul><p>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</p><p>*（5）方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</p><p>*（6）降低JavaEE API的使用难度</p><p>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</p><h1 id="spring-项目"><a href="#spring-项目" class="headerlink" title="spring 项目"></a>spring 项目</h1><p>在官网点击project 菜单 就见到spring很多项目<br><img src="/2020/08/09/Spring体系结构/1.png" alt="spring project"></p><h2 id="springFramework"><a href="#springFramework" class="headerlink" title="springFramework"></a>springFramework</h2><p>这是一个Spring的基础框架，提供了Spring 的核心功能，比如依赖注入、事务管理、面向方面编程等等<br>体系结构<br><img src="/2020/08/09/Spring体系结构/3.png" alt="spring project"><br>Spring的核心容器是其他模块建立的基础，有Spring-core、Spring-beans、Spring-context、Spring-context-support和Spring-expression（String表达式语言）等模块组成。</p><ul><li>Spring-core模块：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。</li><li>Spring-beans模块：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。</li><li>Spring-context模块：建立在Core和Beans模块的基础之上，提供一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的焦点。</li><li>Spring-context-support模块：支持整合第三方库到Spring应用程序上下文，特别是用于高速缓存（EhCache、JCache）和任务调度（CommonJ、Quartz）的支持。</li><li>Spring-expression模块：提供了强大的表达式语言去支持运行时查询和操作对象图。这是对JSP2.1规范中规定的统一表达式语言（Unified EL）的扩展。该语言支持设置和获取属性值、属性分配、方法调用、访问数组、集合和索引器的内容、逻辑和算术运算、变量命名以及从Spring的IOC容器中以名称检索对象。它还支持列表投影、选择以及常用的列表聚合。</li><li>Spring-aop模块：提供了一个符合AOP要求的面向切面的编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以便干净地解耦。</li><li>Spring-aspects模块：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的AOP框架。</li><li>Spring-jdbc模块：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析。</li><li>Spring-orm模块：为流行的对象关系映射（Object-Relational Mapping）API提供集成层，包括JPA和Hibernate。使用Spring-orm模块可以将这些O/R映射框架与Spring提供的所有其他功能结合使用，例如声明式事务管理功能。</li><li>Spring-oxm模块：提供了一个支持对象/XML映射的抽象层实现，例如JAXB、Castor、JiBX和XStream。</li><li>Spring-jms模块（Java Messaging Service）：指Java消息传递服务，包含用于生产和使用消息的功能。自Spring4.1以后，提供了与Spring-messaging模块的集成。</li><li>Spring-tx模块（事务模块）：支持用于实现特殊接口和所有POJO（普通Java对象）类的编程和声明式事务管理</li><li>Spring-web模块：提供了基本的Web开发集成功能，例如多文件上传功能、使用Servlet监听器初始化一个IOC容器以及Web应用上下文。</li><li>Spring-webmvc模块：也称为Web-Servlet模块，包含用于web应用程序的Spring MVC和REST Web Services实现。Spring MVC框架提供了领域模型代码和Web表单之间的清晰分离，并与Spring Framework的所有其他功能集成。</li><li>Spring-websocket模块：Spring4.0以后新增的模块，它提供了WebSocket和SocketJS的实现。</li><li>Portlet模块：类似于Servlet模块的功能，提供了Portlet环境下的MVC实现</li><li>Spring-test模块支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</li></ul><h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p>我们原来运行Spring程序，需要在Maven或者Gradle中添加一些Spring的依赖，然后再通过这些构建工具提供的服务器来运行程序。使用Spring Boot，则可以免去这些繁复的工作。Spring Boot提供了一系列功能可以自动搜索、配置Spring程序。Spring Boot会将项目打包为一个可执行的jar文件，内部包含有tomcat这样的服务器，让我们可以直接以命令行的方式运行Spring程序。Spring Boot官方介绍说，它可以让你尽可能快的运行起Spring程序</p><h2 id="Springcloud"><a href="#Springcloud" class="headerlink" title="Springcloud"></a>Springcloud</h2><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><ul><li>Spring Cloud Netflix<br>　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。</li><li>Spring Cloud Config<br>　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件</li><li>Spring Cloud Bus<br>　　分布式消息队列，是对Kafka, MQ的封装</li><li>Spring Cloud Security<br>　　对Spring Security的封装，并能配合Netflix使用</li><li>Spring Cloud Zookeeper<br>　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用</li><li>Spring Cloud Eureka<br>Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次封装，主要负责完成微服务架构中的服务治理功能。<br>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当年Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。<h2 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h2>这是Spring关于处理数据的框架，其中包含了多个模块，可以让我们使用JPA操作数据、在Redis等非SQL数据库上存取数据等很多功能<h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2>Spring的安全框架，支持在程序中设置安全权限，限制未授权的用户访问某些页面，也提供了一些加密功能方便地加密数据<h2 id="Spring-Session"><a href="#Spring-Session" class="headerlink" title="Spring Session"></a>Spring Session</h2>提供了一个Session的实现，帮助我们管理用户会话。<h2 id="Spring-Integration"><a href="#Spring-Integration" class="headerlink" title="Spring Integration"></a>Spring Integration</h2>这个框架用来将Spring和其他框架、协议、服务集成起来，这些服务包括但不限于控制总线、FTP服务器、Web服务，社交服务、套接字、消息队列、邮件系统……Spring Integration提供了一些适配器，可以方便的和这些服务进行集成。<h2 id="Spring-AMQP"><a href="#Spring-AMQP" class="headerlink" title="Spring AMQP"></a>Spring AMQP</h2>用于开发AMQP的解决方案</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;官网：&quot;&gt;&lt;a href=&quot;#官网：&quot; class=&quot;headerlink&quot; title=&quot;官网：&quot;&gt;&lt;/a&gt;官网：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
      <category term="spring" scheme="https://blog.yanwentan.xyz/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>springFramework源码--IOC 容器</title>
    <link href="https://blog.yanwentan.xyz/2020/08/08/spring%E6%BA%90%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://blog.yanwentan.xyz/2020/08/08/spring源码（一）/</id>
    <published>2020-08-08T06:45:00.000Z</published>
    <updated>2020-08-09T12:26:47.958Z</updated>
    
    <content type="html"><![CDATA[<p>Spring framework是一个Spring的基础框架，提供了Spring 的核心功能，比如依赖注入、事务管理、面向方面编程等等</p><p>IOC容器（ Inversion of Control ）是Spring Framework 最核心部分，它管理着Spring应用中bean的创建、 配置和管理，也叫依赖注入（dependency injection ）</p><h1 id="什么是IOC容器"><a href="#什么是IOC容器" class="headerlink" title="什么是IOC容器"></a>什么是IOC容器</h1><h2 id="没有IOC容器"><a href="#没有IOC容器" class="headerlink" title="没有IOC容器"></a>没有IOC容器</h2><p>按照传统的做法，每个对象负责管理与自己相互协作的对象<br>（即它所依赖的对象）的引用，这将会导致高度耦合和难以测试的代 码。</p><p>我们假定一个在线书店，通过BookService获取书籍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123;</span><br><span class="line">    private HikariConfig config = new HikariConfig();</span><br><span class="line">    private DataSource dataSource = new HikariDataSource(config);</span><br><span class="line"></span><br><span class="line">    public Book getBook(long bookId) &#123;</span><br><span class="line">        try (Connection conn = dataSource.getConnection()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            return book;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>这种方式使用new的方式创建对象，</li><li><p>若测试BookService，是复杂的，因为必须要在真实的数据库环境下执行。</p></li><li><p>从上面的例子可以看出，如果一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。</p></li></ul><h2 id="有IOC容器"><a href="#有IOC容器" class="headerlink" title="有IOC容器"></a>有IOC容器</h2><p>核心问题是：</p><ul><li>谁负责创建组件？</li><li>谁负责根据依赖关系组装组件？</li><li>销毁时，如何按依赖顺序正确销毁？<br>解决这一问题的核心方案就是IoC。</li></ul><p>传统的应用程序中，控制权在程序本身，程序的控制流程完全由开发者控制，例如：</p><p>在创建BookService的过程中，又创建了DataSource组件。这种模式的缺点是，一个组件如果要使用另一个组件，必须先知道如何正确地创建它。</p><p>在IoC模式下，控制权发生了反转，即从应用程序转移到了IoC容器，所有组件不再由应用程序自己创建和配置，而是由IoC容器负责，这样，应用程序只需要直接使用已经创建好并且配置好的组件。为了能让组件在IoC容器中被“装配”出来，需要某种“注入”机制，<br>例如，BookService自己并不会创建DataSource，而是等待外部通过setDataSource()方法来注入一个DataSource：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123; </span><br><span class="line">      private DataSource dataSource;</span><br><span class="line">    public BookService(DataSource dataSource)&#123;</span><br><span class="line">      this.DataSource=dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不直接new一个DataSource，而是注入一个DataSource，这个小小的改动虽然简单，却带来了一系列好处：</p><ul><li>BookService不再关心如何创建DataSource，因此，不必编写读取数据库配置之类的代码；</li><li>测试BookService更容易，因为注入的是DataSource，可以使用内存数据库，而不是真实的MySQL配置。</li></ul><p>因此，IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p><p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系.<br>以下这种通过在JavaConfig中进行显式配置bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public Class JavaBean&#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line"> public HikariConfig hikariConfig()&#123;</span><br><span class="line">  return new HikariConfig();</span><br><span class="line"> &#125;</span><br><span class="line"> @Bean</span><br><span class="line"> public DataSource dataSource(HikariConfig config)&#123;</span><br><span class="line"> return new HikariDataSource(config);</span><br><span class="line"> &#125;</span><br><span class="line"> @Bean</span><br><span class="line"> public BookService bookService(DataSource dataSource)&#123;</span><br><span class="line"> return new BookService(dataSource);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean。</p><h1 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h1><ul><li>通过构造方法注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123; </span><br><span class="line">      private DataSource dataSource;</span><br><span class="line">      @Autowired</span><br><span class="line">    public BookService(DataSource dataSource)&#123;</span><br><span class="line">      this.DataSource=dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过方法注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123; </span><br><span class="line">      private DataSource dataSource;</span><br><span class="line">      @Autowired</span><br><span class="line">    public void setDataSource(DataSource dataSource)&#123;</span><br><span class="line">      this.DataSource=dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有匹配的bean，那么在应用上下文创建的时候，Spring会抛出<br>一个异常。为了避免异常的出现，你可以将@Autowired的<br>required属性设置为false：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123; </span><br><span class="line">      private DataSource dataSource;</span><br><span class="line">      @Autowired（required=false）</span><br><span class="line">    public void setDataSource(DataSource dataSource)&#123;</span><br><span class="line">      this.DataSource=dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将required属性设置为false时，Spring会尝试执行自动装配，但<br>是如果没有匹配的bean的话，Spring将会让这个bean处于未装配的状<br>态。但是，把required属性设置为false时，你需要谨慎对待。如<br>果在你的代码中没有进行null检查的话，这个处于未装配状态的属性<br>有可能会出现NullPointerException。</p><p>如果有多个bean都能满足依赖关系的话，Spring将会抛出一个异常，<br>表明没有明确指定要选择哪个bean进行自动装配</p><ul><li>接口注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123; </span><br><span class="line"> @Autowired</span><br><span class="line">      private DataSource dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spring容器"><a href="#spring容器" class="headerlink" title="spring容器"></a>spring容器</h1><h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p>从一个或多个<br>基于Java的配置类中加载Spring应用上下文。<br>你想从Java配置中加载应用上下文，那么可以使<br>用AnnotationConfigApplicationContext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class AppConfig &#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">      AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应用上下文准备就绪之后，我们就可以调用上下文的getBean()方<br>法从Spring容器中获取bean。</p><h2 id="AnnotationConfigWebApplicationContext"><a href="#AnnotationConfigWebApplicationContext" class="headerlink" title="AnnotationConfigWebApplicationContext"></a>AnnotationConfigWebApplicationContext</h2><p>从一个或<br>多个基于Java的配置类中加载Spring Web应用上下文。 </p><h2 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h2><p>从类路径下的一个或<br>多个XML配置文件中加载上下文定义，把应用上下文的定义文件<br>作为类资源。 </p><h2 id="FileSystemXmlapplicationcontext"><a href="#FileSystemXmlapplicationcontext" class="headerlink" title="FileSystemXmlapplicationcontext"></a>FileSystemXmlapplicationcontext</h2><p>从文件系统下的一<br>个或多个XML配置文件中加载上下文定义。 </p><h2 id="XmlWebApplicationContext：从Web应用下的一个或多个"><a href="#XmlWebApplicationContext：从Web应用下的一个或多个" class="headerlink" title="XmlWebApplicationContext：从Web应用下的一个或多个"></a>XmlWebApplicationContext：从Web应用下的一个或多个</h2><p>XML配置文件中加载上下文定义。</p><h1 id="javaConfig"><a href="#javaConfig" class="headerlink" title="javaConfig"></a>javaConfig</h1><p>java config是指基于java配置的spring。传统的Spring一般都是基本xml配置的，后来spring3.0新增了许多java config的注解，特别是spring boot，基本都是清一色的java config。<br>使用Annotation配合自动扫描能大幅简化Spring的配置</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>在类上打上这一标签，表示这个类是配置类</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 <a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>。</p><ul><li><p>指定包扫描,主要扫描该包下@Controller @Service @Respsitory @Component四个注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(value=&quot;com.songzixian&quot;)</span><br></pre></td></tr></table></figure></li><li><p>指定排除要扫描的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(value=&quot;com.songzixian&quot;,excludeFilters =&#123;@ComponentScan.Filter (type= FilterType.ANNOTATION,classes =&#123;Component.class,Repository.class,Controller.class,Service.class&#125;)&#125; )</span><br></pre></td></tr></table></figure></li><li><p>指定要扫描的包<br>useDefaultFilters = false默认是true,需要改为false该类才生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(value=&quot;com.songzixian&quot;,includeFilters =&#123;@ComponentScan.Filter (type= FilterType.ANNOTATION,classes =&#123;Component.class,Repository.class,Controller.class,Service.class&#125;)&#125;,useDefaultFilters = false)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p> 注解对自动装配何时何处被实现提供了更多细粒度的控制</p><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>自动装配，如果容器中某个bean有多个实例，想要获取指定的的实例，可以用@Qualifier</p><h2 id="scope"><a href="#scope" class="headerlink" title="@scope"></a>@scope</h2><p>  用来配置 spring bean 的作用域，它标识 bean 的作用域。默认值是单例</p><ul><li><p>1、singleton:单例模式,全局有且仅有一个实例</p></li><li><p>2、prototype:原型模式,每次获取Bean的时候会有一个新的实例</p></li><li><p>3、request:request表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效</p></li><li><p>4、session:session作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效</p></li><li><p>5、global session:只在portal应用中有用，给每一个 global http session 新建一个Bean实例。</p></li></ul><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h2><p> 容器启动不创建对象，调用的时候创建对象</p><h2 id="Conditional（-WindowConditional-class-）"><a href="#Conditional（-WindowConditional-class-）" class="headerlink" title="@Conditional（{WindowConditional.class}）"></a>@Conditional（{WindowConditional.class}）</h2><p>WindowConditional 实现condition接口，返回true</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>初始化 注解在初始化的方法上面</p><h2 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h2><p>销毁 在容器销毁bean之前调用</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>标识一个该类是Spring MVC controller处理器，用来创建处理http请求的对象.</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>用于标注业务层组件，说白了就是加入你有一个用注解的方式把这个类注入到spring配置中</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>@Resource的作用相当于@Autowired<br>只不过@Autowired按byType自动注入，<br>而@Resource默认按 byName自动注入<br>@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。</p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>类定义处: 提供初步的请求映射信息，相对于 WEB 应用的根目录。<br>方法处: 提供进一步的细分映射信息，相对于类定义处的 URL。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>用于将请求参数区数据映射到功能处理方法的参数上</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>用于标注数据访问组件，即DAO组件</p><h2 id="Required"><a href="#Required" class="headerlink" title="@Required"></a>@Required</h2><p>适用于bean属性setter方法，并表示受影响的bean属性必须在XML配置文件在配置时进行填充。否则，容器会抛出一个BeanInitializationException异常。</p><h1 id="无侵入容器"><a href="#无侵入容器" class="headerlink" title="无侵入容器"></a>无侵入容器</h1><p>在设计上，Spring的IoC容器是一个高度可扩展的无侵入容器。所谓无侵入，是指应用程序的组件无需实现Spring的特定接口，或者说，组件根本不知道自己在Spring的容器中运行。这种无侵入的设计有以下好处：</p><ul><li>应用程序组件既可以在Spring的IoC容器中运行，也可以自己编写代码自行组装配置；</li><li>测试的时候并不依赖Spring容器，可单独进行测试，大大提高了开发效率。</li></ul><h1 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h1><p><a href="https://docs.spring.io/spring/docs/5.0.18.RELEASE/spring-framework-reference/core.html#spring-core" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.18.RELEASE/spring-framework-reference/core.html#spring-core</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring framework是一个Spring的基础框架，提供了Spring 的核心功能，比如依赖注入、事务管理、面向方面编程等等&lt;/p&gt;
&lt;p&gt;IOC容器（ Inversion of Control ）是Spring Framework 最核心部分，它管理着Sprin
      
    
    </summary>
    
      <category term="spring" scheme="https://blog.yanwentan.xyz/categories/spring/"/>
    
      <category term="SpringFramework" scheme="https://blog.yanwentan.xyz/categories/spring/SpringFramework/"/>
    
    
      <category term="IOC容器" scheme="https://blog.yanwentan.xyz/tags/IOC%E5%AE%B9%E5%99%A8/"/>
    
      <category term="依赖注入" scheme="https://blog.yanwentan.xyz/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="DI" scheme="https://blog.yanwentan.xyz/tags/DI/"/>
    
      <category term="Inversion of Control" scheme="https://blog.yanwentan.xyz/tags/Inversion-of-Control/"/>
    
  </entry>
  
  <entry>
    <title>springFramework源码编译</title>
    <link href="https://blog.yanwentan.xyz/2020/08/07/spring%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://blog.yanwentan.xyz/2020/08/07/spring源码编译/</id>
    <published>2020-08-07T08:02:00.000Z</published>
    <updated>2020-08-09T09:21:35.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装环境配套"><a href="#安装环境配套" class="headerlink" title="安装环境配套"></a>安装环境配套</h1><p>Gradle 5.6.2 +java version “1.8.0_251”+idea+spring framework5.1.x</p><ul><li>Spring framework下载：<a href="https://github.com/spring-projects/spring-framework/tree/5.1.x" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework/tree/5.1.x</a></li><li>Gradle 6.5.1下载:<a href="https://gradle.org/next-steps/?version=5.6.2&amp;format=bin" target="_blank" rel="noopener">https://gradle.org/next-steps/?version=5.6.2&amp;format=bin</a></li></ul><h1 id="配置gradle环境"><a href="#配置gradle环境" class="headerlink" title="配置gradle环境"></a>配置gradle环境</h1><p>  配置gradle环境变量 新建GRADLE_HOME，path中增加%GRADLE_HOME%/bin;即可<br>  <img src="/2020/08/07/spring源码编译/1.png" alt="gradle"><br>  <img src="/2020/08/07/spring源码编译/2.png" alt="gradle"><br>  配置完成以后win+r，输入cmd进入dos界面，键入命令gradle -v，若如下图正确输出版本信息即可<br>    <img src="/2020/08/07/spring源码编译/3.png" alt="gradle"><br>  配置gradle默认的本地仓库，gradle和maven类似，工作时也需要一个本地仓库，管理工程jar包，可做如下配置，新增GRADLE_USER_HOME<br>     <img src="/2020/08/07/spring源码编译/4.png" alt="gradle"></p><h1 id="Git-下载代码"><a href="#Git-下载代码" class="headerlink" title="Git 下载代码"></a>Git 下载代码</h1><p>Gi地址：<a href="https://github.com/spring-projects/spring-framework.git" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework.git</a><br> <img src="/2020/08/07/spring源码编译/5.png" alt="gradle"><br> 下载完成切换分支5.1.x<br>  <img src="/2020/08/07/spring源码编译/6.png" alt="gradle"><br>  在import-into-idea.md 你编译spring work源码之前你需要spring-core和spring-oxm<br>  <img src="/2020/08/07/spring源码编译/7.png" alt="gradle"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>  注意几点：</p><ul><li>a，因为其他项目需要依赖spring-core和spring-oxm，所以我们导入后需要先编译这两个包 （在cmd 命令下执行gradle build -x test ）,需要<br>等候一定时间(我这边花了1小时时间)，保证网络稳定<br><img src="/2020/08/07/spring源码编译/8.png" alt="gradle"><br><img src="/2020/08/07/spring源码编译/9.png" alt="gradle"></li></ul><p>成功截图： 显示Build successful<br> <img src="/2020/08/07/spring源码编译/10.png" alt="gradle"></p><ul><li><p>b，spring-aspects需要依赖三方jar（精通aop的应该知道spring-aop和aspectj的关系，在使用注解方式实现spring-aop的时候，需要导入aspectj的jar，有兴趣的可以去查阅下官方文档aop相关文档），这里编译可能会报错，不影响我们编译使用，我们先不处理</p></li><li><p>c，使用工具编译时，可能会出现内存溢出情况，这里我们编译时需要增加相关参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">         -XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m</span><br></pre></td></tr></table></figure></li><li><p>d) 以上工作完成之后，我们可以开始导入编辑编译配置了，如下图（需要注意的地方已在图中标注）</p></li></ul><h1 id="idea使用导入springframework项目"><a href="#idea使用导入springframework项目" class="headerlink" title="idea使用导入springframework项目"></a>idea使用导入springframework项目</h1><p> <img src="/2020/08/07/spring源码编译/11.png" alt="gradle"><br> 点击 import project<br><img src="/2020/08/07/spring源码编译/12.png" alt="gradle"><br>使用gradle导入项目<br><img src="/2020/08/07/spring源码编译/13.png" alt="gradle"><br>最后点击finish （需要从gradle仓库下载所需依赖包 这个过程可能比较久 决定因素是 网络环境及机器环境 ）</p><p>导入成功：<br><img src="/2020/08/07/spring源码编译/15.png" alt="gradle"></p><h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><ul><li>导入项目的时候还需要下载gradle 软件<br>Setting–》gradle 选择gradle软件目录</li></ul><p><img src="/2020/08/07/spring源码编译/16.png" alt="gradle"></p><ul><li>可能由于网络原因构建失败 在gradle窗口选择spring项目右击 菜单选择refreshGradle dependencies</li></ul><p><img src="/2020/08/07/spring源码编译/17.png" alt="gradle"></p><h1 id="新建Model"><a href="#新建Model" class="headerlink" title="新建Model"></a>新建Model</h1><p><img src="/2020/08/07/spring源码编译/18.png" alt="gradle"><br>选择Gradle项目 next</p><p><img src="/2020/08/07/spring源码编译/19.png" alt="gradle"><br>输入项目名称<br><img src="/2020/08/07/spring源码编译/20.png" alt="gradle"><br>确认项目存储路径 最后点击finish<br><img src="/2020/08/07/spring源码编译/21.png" alt="gradle"><br>新建完成：<br><img src="/2020/08/07/spring源码编译/22.png" alt="gradle"><br>编辑build.gradle<br>compile(project(“:spring-context”))<br><img src="/2020/08/07/spring源码编译/23.png" alt="gradle"></p><p>新增AppConfig.java和MemberService<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.yanwen.springTest;</span><br><span class="line"></span><br><span class="line">import com.yanwen.springTest.service.MemberService;</span><br><span class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@ComponentScan(&quot;com.yanwen.springTest&quot;)</span><br><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">      AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">      System.out.println(annotationConfigApplicationContext.getBean(MemberService.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.yanwen.springTest.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class MemberService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行Appconfig main方法</p><p><img src="/2020/08/07/spring源码编译/25.png" alt="gradle"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装环境配套&quot;&gt;&lt;a href=&quot;#安装环境配套&quot; class=&quot;headerlink&quot; title=&quot;安装环境配套&quot;&gt;&lt;/a&gt;安装环境配套&lt;/h1&gt;&lt;p&gt;Gradle 5.6.2 +java version “1.8.0_251”+idea+spring fra
      
    
    </summary>
    
      <category term="spring" scheme="https://blog.yanwentan.xyz/categories/spring/"/>
    
      <category term="springFramework" scheme="https://blog.yanwentan.xyz/categories/spring/springFramework/"/>
    
    
      <category term="源码" scheme="https://blog.yanwentan.xyz/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>tomcat 三种部署方式</title>
    <link href="https://blog.yanwentan.xyz/2020/01/03/omcat-%E4%B8%89%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
    <id>https://blog.yanwentan.xyz/2020/01/03/omcat-三种部署方式/</id>
    <published>2020-01-03T02:26:00.000Z</published>
    <updated>2020-08-08T01:59:28.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一Tomcat自动部署："><a href="#一Tomcat自动部署：" class="headerlink" title="一Tomcat自动部署："></a>一Tomcat自动部署：</h1><p>只要将一个Web应用的WebContent级的AppName直接扔进%Tomcat_Home%\webapps文件夹下，系统会把该web应用直接部署到Tomcat中<br>因为:</p><h1 id="二增加自定义的Web部署文件"><a href="#二增加自定义的Web部署文件" class="headerlink" title="二增加自定义的Web部署文件"></a>二增加自定义的Web部署文件</h1><p>我们需要在%Tomcat_Home%\conf路径下新建一个文件夹catalina——再在其中新建一个localhost文件夹——最后再新建一个XML文件，即增加两层目录并新增XML文件：%Tomcat_Home%\conf\Catalina\localhost\web应用配置文件.xml ，该文件就是部署Web应用的配置文件。例如，我们新建一个%Tomcat_Home%\conf\Catalina\localhost\XXX.xml，  该文件的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=&quot;/XXX&quot; reloadable=&quot;true&quot; docBase=&quot;D:\workspace\WebApp\AppName&quot; workDir=&quot;D:\workspace\WebApp\work&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h1 id="手动修改-Tomcat-Home-conf-server-xml文件来部署web应用"><a href="#手动修改-Tomcat-Home-conf-server-xml文件来部署web应用" class="headerlink" title="手动修改%Tomcat_Home%\conf\server.xml文件来部署web应用"></a>手动修改%Tomcat_Home%\conf\server.xml文件来部署web应用</h1><p>打开%Tomcat_Home%\conf\server.xml文件并在其中增加以下元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Context docBase=&quot;D:\workspace\WebApp\AppName&quot; path=&quot;/XXX&quot; debug=&quot;0&quot; reloadable=&quot;false&quot; /&gt;</span><br></pre></td></tr></table></figure><p>总结：第一种和第二种：<br>tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一Tomcat自动部署：&quot;&gt;&lt;a href=&quot;#一Tomcat自动部署：&quot; class=&quot;headerlink&quot; title=&quot;一Tomcat自动部署：&quot;&gt;&lt;/a&gt;一Tomcat自动部署：&lt;/h1&gt;&lt;p&gt;只要将一个Web应用的WebContent级的AppName
      
    
    </summary>
    
    
      <category term="tomcat" scheme="https://blog.yanwentan.xyz/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq</title>
    <link href="https://blog.yanwentan.xyz/2019/11/22/bbitMq/"/>
    <id>https://blog.yanwentan.xyz/2019/11/22/bbitMq/</id>
    <published>2019-11-22T08:13:00.000Z</published>
    <updated>2020-02-17T15:08:47.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思考问题：为什么要使用消息队列"><a href="#思考问题：为什么要使用消息队列" class="headerlink" title="思考问题：为什么要使用消息队列"></a>思考问题：为什么要使用消息队列</h1><p> 一个系统需要调用多个系统或者模块，互相之间调用很复杂，维护起来很麻烦。</p><h2 id="情景1–未使用队列前"><a href="#情景1–未使用队列前" class="headerlink" title="情景1–未使用队列前"></a>情景1–未使用队列前</h2><p><img src="/2019/11/22/bbitMq/1.png" alt="logo"><br>如果现在新增e系统，就需要a系统的开发改系统；<br>如果现在D不需要A系统调用接口，就需要A系统的开发改系统<br>……</p><h2 id="消息队列优点–解耦"><a href="#消息队列优点–解耦" class="headerlink" title="消息队列优点–解耦"></a>消息队列优点–解耦</h2><p><img src="/2019/11/22/bbitMq/2.png" alt="logo"><br>哪个系统需要数据，自己去MQ里消费数据</p><h2 id="情景2-未使用队列"><a href="#情景2-未使用队列" class="headerlink" title="情景2-未使用队列"></a>情景2-未使用队列</h2><p><img src="/2019/11/22/bbitMq/3.png" alt="logo"><br>这样，系统调用太多接口，影响用户体验</p><h2 id="消息队列优点–异步"><a href="#消息队列优点–异步" class="headerlink" title="消息队列优点–异步"></a>消息队列优点–异步</h2><p><img src="/2019/11/22/bbitMq/4.png" alt="logo"></p><h1 id="思考：引入消息队列会存在哪些问题"><a href="#思考：引入消息队列会存在哪些问题" class="headerlink" title="思考：引入消息队列会存在哪些问题"></a>思考：引入消息队列会存在哪些问题</h1><h2 id="消息队列存在问题："><a href="#消息队列存在问题：" class="headerlink" title="消息队列存在问题："></a>消息队列存在问题：</h2><ul><li>1 系统可用性降低</li></ul><p>系统引入的外部依赖越多，越容易挂掉，本来你就是A系统调用BCD三个系统的接口就好，ABCD四个系统好哈的，没啥问题，<br>现在改为MQ,若MQ挂了怎么办</p><ul><li>系统复杂性提高</li></ul><p>例如：现在使用了MQ,你需要考虑消息是否重复消费？ 怎么处理消息丢失情况？问题大一堆，很痛苦吧</p><ul><li>系统一致性问题</li></ul><p>使用MQ后，BD系统写库成功，结果c系统写库失败，现在怎么办？</p><h2 id="RabbitMq可靠性–镜像集群模式"><a href="#RabbitMq可靠性–镜像集群模式" class="headerlink" title="RabbitMq可靠性–镜像集群模式"></a>RabbitMq可靠性–镜像集群模式</h2><p><img src="/2019/11/22/bbitMq/5.png" alt="logo"></p><h2 id="数据丢失怎么办"><a href="#数据丢失怎么办" class="headerlink" title="数据丢失怎么办"></a>数据丢失怎么办</h2><p><img src="/2019/11/22/bbitMq/7.png" alt="logo"><br>生产者</p><ul><li>1 设置channel 设置成confirm的模式</li><li>2 发送一个消息</li><li>3  RabbitMq如果接收到了这条消息的话，<br>就会回调你系统里一个接口，通知消息已经收到了；<br>如果接收消息失败，也通知你消息接收失败，<br>此时候你可以进行重推</li></ul><p>RabbitMq:</p><ul><li>rabbitmq:持久化磁盘（queue 持久化，发送消息，deliveryMode=2）</li></ul><p>消费者：</p><ul><li>auto ack机制，消费到了一条消息</li></ul><h2 id="数据丢失处理方案图"><a href="#数据丢失处理方案图" class="headerlink" title="数据丢失处理方案图"></a>数据丢失处理方案图</h2><p><img src="/2019/11/22/bbitMq/6.png" alt="logo"></p><h2 id="关于重复消费"><a href="#关于重复消费" class="headerlink" title="关于重复消费"></a>关于重复消费</h2><p>解决方案：每个消息都有一个唯一id，如果已经处理过无需再次处理</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li><p>1 ）如果Mq数据挤压怎么办<br>解决方案：<br>第一步修复consumer故障</p><p>第二步 临时部署多一些consumer应用进行消费</p></li><li>2）rabbitmq设置了消息过期时间，导致数据丢失了，怎么办<br>解决方案：生产者消息重发</li><li>3）mq数据挤压，磁盘满了怎么办？<br>解决方案：临时写一个程序把消费一个放弃一个；在进行重推消息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;思考问题：为什么要使用消息队列&quot;&gt;&lt;a href=&quot;#思考问题：为什么要使用消息队列&quot; class=&quot;headerlink&quot; title=&quot;思考问题：为什么要使用消息队列&quot;&gt;&lt;/a&gt;思考问题：为什么要使用消息队列&lt;/h1&gt;&lt;p&gt; 一个系统需要调用多个系统或者模块，
      
    
    </summary>
    
      <category term="RabbitMq" scheme="https://blog.yanwentan.xyz/categories/RabbitMq/"/>
    
      <category term="消息队列" scheme="https://blog.yanwentan.xyz/categories/RabbitMq/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMq" scheme="https://blog.yanwentan.xyz/tags/RabbitMq/"/>
    
      <category term="消息队列" scheme="https://blog.yanwentan.xyz/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>SpringSession源码（二）</title>
    <link href="https://blog.yanwentan.xyz/2019/11/22/pringSession%E6%BA%90%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://blog.yanwentan.xyz/2019/11/22/pringSession源码（二）/</id>
    <published>2019-11-22T07:25:00.000Z</published>
    <updated>2020-02-17T15:08:47.570Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://smallwenzi.github.io/2019/11/13/ring-session%EF%BC%881%EF%BC%89/">如何使用spring session</a><br>上一篇文章中介绍了Spring-Session的核心原理，Filter，Session，Repository等等，传送门：<a href="https://smallwenzi.github.io/2019/11/21/SpringSession%E6%BA%90%E7%A0%81/">SpringSession源码</a></p><p>这篇继上一篇的原理逐渐深入Spring-Session中的事件机制原理的探索。众所周知，Servlet规范中有对HttpSession的事件的处理，如：HttpSessionEvent/HttpSessionIdListener/HttpSessionListener，可以查看Package javax.servlet</p><p>在Spring-Session中也有相应的Session事件机制实现，包括Session创建/过期/删除事件。<br>本文主要从以下方面探索Spring-Session中事件机制</p><ul><li>Session事件的抽象</li><li>事件的触发机制<h1 id="Session事件的抽象"><a href="#Session事件的抽象" class="headerlink" title="Session事件的抽象"></a>Session事件的抽象</h1>先来看下Session事件抽象UML类图，整体掌握事件之间的依赖关系。<br><img src="/2019/11/22/pringSession源码（二）/1.png" alt="Session事件的抽象"><br>Session Event最顶层是ApplicationEvent，即Spring上下文事件对象。由此可以看出Spring-Session的事件机制是基于Spring上下文事件实现。</li></ul><p>抽象的AbstractSessionEvent事件对象提供了获取Session（这里的是指Spring Session的对象）和SessionId。   </p><p>基于事件的类型，分类为：</p><ul><li>Session创建事件</li><li>Session删除事件</li><li>Session过期事件<br>事件对象只是对事件本身的抽象，描述事件的属性，如：</li></ul><p>获取事件产生的源：getSource获取事件产生源<br>获取相应事件特性：getSession/getSessoinId获取时间关联的Session<br>下面再深入探索以上的Session事件是如何触发，从事件源到事件监听器的链路分析事件流转过程。</p><h1 id="二-事件的触发机制"><a href="#二-事件的触发机制" class="headerlink" title="二.事件的触发机制"></a>二.事件的触发机制</h1><p>介绍Session Event事件基于Spring的ApplicationEvent实现。先简单认识spring上下文事件机制：<br><img src="/2019/11/22/pringSession源码（二）/2.png" alt="Session事件的抽象"></p><ul><li>ApplicationEventPublisher实现用于发布Spring上下文事件ApplicationEvent</li><li>ApplicationListener实现用于监听Spring上下文事件ApplicationEvent</li><li>ApplicationEvent抽象上下文事件</li></ul><p>那么在Spring-Session中必然包含事件发布者ApplicationEventPublisher发布Session事件和ApplicationListener监听Session事件。</p><p>可以看出ApplicationEventPublisher发布一个事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface ApplicationEventPublisher &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Notify all &lt;strong&gt;matching&lt;/strong&gt; listeners registered with this</span><br><span class="line">     * application of an application event. Events may be framework events</span><br><span class="line">     * (such as RequestHandledEvent) or application-specific events.</span><br><span class="line">     * @param event the event to publish</span><br><span class="line">     * @see org.springframework.web.context.support.RequestHandledEvent</span><br><span class="line">     */</span><br><span class="line">    default void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">        publishEvent((Object) event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Notify all &lt;strong&gt;matching&lt;/strong&gt; listeners registered with this</span><br><span class="line">     * application of an event.</span><br><span class="line">     * &lt;p&gt;If the specified &#123;@code event&#125; is not an &#123;@link ApplicationEvent&#125;,</span><br><span class="line">     * it is wrapped in a &#123;@link PayloadApplicationEvent&#125;.</span><br><span class="line">     * @param event the event to publish</span><br><span class="line">     * @since 4.2</span><br><span class="line">     * @see PayloadApplicationEvent</span><br><span class="line">     */</span><br><span class="line">    void publishEvent(Object event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ApplicationListener用于监听相应的事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface ApplicationListener&lt;E extends ApplicationEvent&gt; extends EventListener &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Handle an application event.</span><br><span class="line">     * @param event the event to respond to</span><br><span class="line">     */</span><br><span class="line">    void onApplicationEvent(E event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Session事件的流程实现如下：<br><img src="/2019/11/22/pringSession源码（二）/3.png" alt="Session事件的抽象"><br>RedisMessageListenerContainer初始化时会启动一个线程SubscriptionTask进行订阅redis信息</p><p>上图展示了Spring-Session事件流程图，事件源来自于Redis键空间通知，在spring-data-redis项目中抽象MessageListener监听Redis事件源，然后将其传播至spring应用上下文发布者，由发布者发布事件。在spring上下文中的监听器Listener即可监听到Session事件。</p><p>因为两者是Spring框架提供的对Spring的ApplicationEvent的支持。Session Event基于ApplicationEvent实现，必然也有其相应发布者和监听器的的实现。</p><p>Spring-Session中的RedisSession的SessionRepository是RedisOperationSessionRepository。所有关于RedisSession的管理操作都是由其实现，所以Session的产生源是RedisOperationSessionRepository。</p><p>在RedisOperationSessionRepository中持有ApplicationEventPublisher对象用于发布Session事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private ApplicationEventPublisher eventPublisher = new ApplicationEventPublisher() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void publishEvent(Object event) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>但是该ApplicationEventPublisher是空实现，实际实现是在应用启动时由Spring-Session自动配置。在spring-session-data-redis模块中RedisHttpSessionConfiguration中有关于创建RedisOperationSessionRepository Bean时将调用set方法将ApplicationEventPublisher配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class RedisHttpSessionConfiguration extends SpringHttpSessionConfiguration</span><br><span class="line">        implements BeanClassLoaderAware, EmbeddedValueResolverAware, ImportAware,</span><br><span class="line">        SchedulingConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    private ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisOperationsSessionRepository sessionRepository() &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = createRedisTemplate();</span><br><span class="line">        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(</span><br><span class="line">                redisTemplate);</span><br><span class="line">        // 注入依赖</span><br><span class="line">        sessionRepository.setApplicationEventPublisher(this.applicationEventPublisher);</span><br><span class="line">        if (this.defaultRedisSerializer != null) &#123;</span><br><span class="line">            sessionRepository.setDefaultSerializer(this.defaultRedisSerializer);</span><br><span class="line">        &#125;</span><br><span class="line">        sessionRepository</span><br><span class="line">                .setDefaultMaxInactiveInterval(this.maxInactiveIntervalInSeconds);</span><br><span class="line">        if (StringUtils.hasText(this.redisNamespace)) &#123;</span><br><span class="line">            sessionRepository.setRedisKeyNamespace(this.redisNamespace);</span><br><span class="line">        &#125;</span><br><span class="line">        sessionRepository.setRedisFlushMode(this.redisFlushMode);</span><br><span class="line">        return sessionRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 注入上下文中的ApplicationEventPublisher Bean</span><br><span class="line">    @Autowired</span><br><span class="line">    public void setApplicationEventPublisher(</span><br><span class="line">            ApplicationEventPublisher applicationEventPublisher) &#123;</span><br><span class="line">        this.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在进行自动配置时，将上下文中的ApplicationEventPublisher的注入，实际上即ApplicationContext对象。<br>对于ApplicationListener是由应用开发者自行实现，注册成Bean即可。当有Session Event发布时，即可监听。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * session事件监听器</span><br><span class="line"> *</span><br><span class="line"> * @author huaijin</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SessionEventListener implements ApplicationListener&lt;SessionDeletedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final String CURRENT_USER = &quot;currentUser&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(SessionDeletedEvent event) &#123;</span><br><span class="line">        Session session = event.getSession();</span><br><span class="line">        UserVo userVo = session.getAttribute(CURRENT_USER);</span><br><span class="line">        System.out.println(&quot;Current session&apos;s user:&quot; + userVo.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上部分探索了Session事件的发布者和监听者，但是核心事件的触发发布则是由Redis的键空间通知机制触发，当有Session创建/删除/过期时，Redis键空间会通知Spring-Session应用。</p><p>RedisOperationsSessionRepository实现spring-data-redis中的MessageListener接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Listener of messages published in Redis.</span><br><span class="line"> *</span><br><span class="line"> * @author Costin Leau</span><br><span class="line"> * @author Christoph Strobl</span><br><span class="line"> */</span><br><span class="line">public interface MessageListener &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Callback for processing received objects through Redis.</span><br><span class="line">     *</span><br><span class="line">     * @param message message must not be &#123;@literal null&#125;.</span><br><span class="line">     * @param pattern pattern matching the channel (if specified) - can be &#123;@literal null&#125;.</span><br><span class="line">     */</span><br><span class="line">    void onMessage(Message message, @Nullable byte[] pattern);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该监听器即用来监听redis发布的消息。RedisOperationsSessionRepositorys实现了该Redis键空间消息通知监听器接口，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public class RedisOperationsSessionRepository implements</span><br><span class="line">        FindByIndexNameSessionRepository&lt;RedisOperationsSessionRepository.RedisSession&gt;,</span><br><span class="line">        MessageListener &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void onMessage(Message message, byte[] pattern) &#123;</span><br><span class="line">        // 获取该消息发布的redis通道channel</span><br><span class="line">        byte[] messageChannel = message.getChannel();</span><br><span class="line">        // 获取消息体内容</span><br><span class="line">        byte[] messageBody = message.getBody();</span><br><span class="line"></span><br><span class="line">        String channel = new String(messageChannel);</span><br><span class="line"></span><br><span class="line">        // 如果是由Session创建通道发布的消息，则是Session创建事件</span><br><span class="line">        if (channel.startsWith(getSessionCreatedChannelPrefix())) &#123;</span><br><span class="line">            // 从消息体中载入Session</span><br><span class="line">            Map&lt;Object, Object&gt; loaded = (Map&lt;Object, Object&gt;) this.defaultSerializer</span><br><span class="line">                    .deserialize(message.getBody());</span><br><span class="line">            // 发布创建事件</span><br><span class="line">            handleCreated(loaded, channel);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果消息体不是以过期键前缀，直接返回。因为spring-session在redis中的key命名规则：</span><br><span class="line">        // &quot;$&#123;namespace&#125;:sessions:expires:$&#123;sessionId&#125;&quot;，如：</span><br><span class="line">        // session.example:sessions:expires:a5236a19-7325-4783-b1f0-db9d4442db9a</span><br><span class="line">        // 所以判断过期或者删除的键是否为spring-session的过期键。如果不是，可能是应用中其他的键的操作，所以直接return</span><br><span class="line">        String body = new String(messageBody);</span><br><span class="line">        if (!body.startsWith(getExpiredKeyPrefix())) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 根据channel判断键空间的事件类型del或者expire时间</span><br><span class="line">        boolean isDeleted = channel.endsWith(&quot;:del&quot;);</span><br><span class="line">        if (isDeleted || channel.endsWith(&quot;:expired&quot;)) &#123;</span><br><span class="line">            int beginIndex = body.lastIndexOf(&quot;:&quot;) + 1;</span><br><span class="line">            int endIndex = body.length();</span><br><span class="line">            // Redis键空间消息通知内容即操作的键，spring-session键中命名规则：</span><br><span class="line">            // &quot;$&#123;namespace&#125;:sessions:expires:$&#123;sessionId&#125;&quot;，以下是根据规则解析sessionId</span><br><span class="line">            String sessionId = body.substring(beginIndex, endIndex);</span><br><span class="line"></span><br><span class="line">            // 根据sessionId加载session</span><br><span class="line">            RedisSession session = getSession(sessionId, true);</span><br><span class="line"></span><br><span class="line">            if (session == null) &#123;</span><br><span class="line">                logger.warn(&quot;Unable to publish SessionDestroyedEvent for session &quot;</span><br><span class="line">                        + sessionId);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Publishing SessionDestroyedEvent for session &quot; + sessionId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cleanupPrincipalIndex(session);</span><br><span class="line"></span><br><span class="line">            // 发布Session delete事件</span><br><span class="line">            if (isDeleted) &#123;</span><br><span class="line">                handleDeleted(session);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                // 否则发布Session expire事件</span><br><span class="line">                handleExpired(session);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下续再深入每种事件产生的前世今生。</p><h2 id="Session创建事件的触发"><a href="#Session创建事件的触发" class="headerlink" title="Session创建事件的触发"></a>Session创建事件的触发</h2><p><img src="/2019/11/22/pringSession源码（二）/4.png" alt="Session事件的抽象"></p><ul><li>由RedisOperationSessionRepository向Redis指定通道${namespace}:event:created:${sessionId}发布一个message</li><li>MessageListener的实现RedisOperationSessionRepository监听到Redis指定通道${namespace}:event:created:${sessionId}的消息</li><li>将其传播至ApplicationEventPublisher</li><li>ApplicationEventPublisher发布SessionCreateEvent</li><li>ApplicationListener监听SessionCreateEvent，执行相应逻辑</li></ul><p>RedisOperationSessionRepository中保存一个Session时，判断Session是否新创建。<br>如果新创建，则向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void save(RedisSession session) &#123;</span><br><span class="line">    session.saveDelta();</span><br><span class="line">    // 判断是否为新创建的session</span><br><span class="line">    if (session.isNew()) &#123;</span><br><span class="line">        // 获取redis指定的channel：$&#123;namespace&#125;:event:created:$&#123;sessionId&#125;，</span><br><span class="line">        // 如：session.example:event:created:82sdd-4123-o244-ps123</span><br><span class="line">        String sessionCreatedKey = getSessionCreatedChannel(session.getId());</span><br><span class="line">        // 向该通道发布session数据</span><br><span class="line">        this.sessionRedisOperations.convertAndSend(sessionCreatedKey, session.delta);</span><br><span class="line">        // 设置session为非新创建</span><br><span class="line">        session.setNew(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该save方法的调用是由HttpServletResponse提交时——即返回客户端响应调用，上篇文章已经详解，这里不再赘述。关于RedisOperationSessionRepository实现MessageListener上述已经介绍，这里同样不再赘述。</p><h2 id="Session删除事件的触发"><a href="#Session删除事件的触发" class="headerlink" title="Session删除事件的触发"></a>Session删除事件的触发</h2><p>删除事件中使用到了Redis KeySpace Notification，建议先了解该技术。</p><p><img src="/2019/11/22/pringSession源码（二）/5.png" alt="Session事件的抽象"></p><ul><li>由RedisOperationSessionRepository删除Redis键空间中的指定Session的过期键，Redis键空间会向<strong>__keyevent@*:del</strong>的channel发布删除事件消息</li><li>MessageListener的实现RedisOperationSessionRepository监听到Redis指定通道<strong>__keyevent@*:del</strong>的消息</li><li>将其传播至ApplicationEventPublisher</li><li>ApplicationEventPublisher发布SessionDeleteEvent</li><li>ApplicationListener监听SessionDeleteEvent，执行相应逻辑<br>当调用HttpSession的invalidate方法让Session失效时，即会调用RedisOperationSessionRepository的deleteById方法删除Session的过期键。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Allows creating an HttpSession from a Session instance.</span><br><span class="line"> *</span><br><span class="line"> * @author Rob Winch</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">private final class HttpSessionWrapper extends HttpSessionAdapter&lt;S&gt; &#123;</span><br><span class="line">    HttpSessionWrapper(S session, ServletContext servletContext) &#123;</span><br><span class="line">        super(session, servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void invalidate() &#123;</span><br><span class="line">        super.invalidate();</span><br><span class="line">        SessionRepositoryRequestWrapper.this.requestedSessionInvalidated = true;</span><br><span class="line">        setCurrentSession(null);</span><br><span class="line">        clearRequestedSessionCache();</span><br><span class="line">        // 调用删除方法</span><br><span class="line">        SessionRepositoryFilter.this.sessionRepository.deleteById(getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上篇中介绍了包装Spring Session为HttpSession，这里不再赘述。这里重点分析deleteById内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void deleteById(String sessionId) &#123;</span><br><span class="line">    // 如果session为空则返回</span><br><span class="line">    RedisSession session = getSession(sessionId, true);</span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cleanupPrincipalIndex(session);</span><br><span class="line">    this.expirationPolicy.onDelete(session);</span><br><span class="line">    // 获取session的过期键</span><br><span class="line">    String expireKey = getExpiredKey(session.getId());</span><br><span class="line">    // 删除过期键，redis键空间产生del事件消息，被MessageListener即</span><br><span class="line">    // RedisOperationSessionRepository监听</span><br><span class="line">    this.sessionRedisOperations.delete(expireKey);</span><br><span class="line">    session.setMaxInactiveInterval(Duration.ZERO);</span><br><span class="line">    save(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后续流程同SessionCreateEvent流程。</p><h2 id="Session失效事件的触发"><a href="#Session失效事件的触发" class="headerlink" title="Session失效事件的触发"></a>Session失效事件的触发</h2><p>Session的过期事件流程比较特殊，因为Redis的键空间通知的特殊性，Redis键空间通知不能保证过期键的通知的及时性。<br><img src="/2019/11/22/pringSession源码（二）/6.png" alt="Session事件的抽象"></p><ul><li>RedisOperationsSessionRepository中有个定时任务方法每整分运行访问整分Session过期键集合中的过期sessionId，如：spring:session:expirations:1439245080000。触发Redis键空间会向<strong>__keyevent@*:expired</strong>的channel发布过期事件消息</li><li>MessageListener的实现RedisOperationSessionRepository监听到Redis指定通道<strong>__keyevent@*:expired</strong>的消息</li><li>将其传播至ApplicationEventPublisher</li><li>ApplicationEventPublisher发布SessionDeleteEvent</li><li>ApplicationListener监听SessionDeleteEvent，执行相应逻辑</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scheduled(cron = &quot;0 * * * * *&quot;)</span><br><span class="line">public void cleanupExpiredSessions() &#123;</span><br><span class="line">    this.expirationPolicy.cleanExpiredSessions();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时任务每整分运行，执行cleanExpiredSessions方法。expirationPolicy是RedisSessionExpirationPolicy实例，是RedisSession过期策略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void cleanExpiredSessions() &#123;</span><br><span class="line">    // 获取当前时间戳</span><br><span class="line">    long now = System.currentTimeMillis();</span><br><span class="line">    // 时间滚动至整分，去掉秒和毫秒部分</span><br><span class="line">    long prevMin = roundDownMinute(now);</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Cleaning up sessions expiring at &quot; + new Date(prevMin));</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据整分时间获取过期键集合，如：spring:session:expirations:1439245080000</span><br><span class="line">    String expirationKey = getExpirationKey(prevMin);</span><br><span class="line">    // 获取所有的所有的过期session</span><br><span class="line">    Set&lt;Object&gt; sessionsToExpire = this.redis.boundSetOps(expirationKey).members();</span><br><span class="line">    // 删除过期Session键集合</span><br><span class="line">    this.redis.delete(expirationKey);</span><br><span class="line">    // touch访问所有已经过期的session，触发Redis键空间通知消息</span><br><span class="line">    for (Object session : sessionsToExpire) &#123;</span><br><span class="line">        String sessionKey = getSessionKey((String) session);</span><br><span class="line">        touch(sessionKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将时间戳滚动至整分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static long roundDownMinute(long timeInMs) &#123;</span><br><span class="line">    Calendar date = Calendar.getInstance();</span><br><span class="line">    date.setTimeInMillis(timeInMs);</span><br><span class="line">    // 清理时间错的秒位和毫秒位</span><br><span class="line">    date.clear(Calendar.SECOND);</span><br><span class="line">    date.clear(Calendar.MILLISECOND);</span><br><span class="line">    return date.getTimeInMillis();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取过期Session的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String getExpirationKey(long expires) &#123;</span><br><span class="line">    return this.redisSession.getExpirationsKey(expires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如：spring:session:expirations:1439245080000</span><br><span class="line">String getExpirationsKey(long expiration) &#123;</span><br><span class="line">    return this.keyPrefix + &quot;expirations:&quot; + expiration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用Redis的Exists命令，访问过期Session键，触发Redis键空间消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * By trying to access the session we only trigger a deletion if it the TTL is</span><br><span class="line"> * expired. This is done to handle</span><br><span class="line"> * https://github.com/spring-projects/spring-session/issues/93</span><br><span class="line"> *</span><br><span class="line"> * @param key the key</span><br><span class="line"> */</span><br><span class="line">private void touch(String key) &#123;</span><br><span class="line">    this.redis.hasKey(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结<br>至此Spring-Session的Session事件通知模块就已经很清晰：</p><ul><li>Redis键空间Session事件源：Session创建通道/Session删除通道/Session过期通道</li><li>Spring-Session中的RedisOperationsSessionRepository消息监听器监听Redis的事件类型</li><li>RedisOperationsSessionRepository负责将其传播至ApplicationEventPublisher</li><li>ApplicationEventPublisher将其包装成ApplicationEvent类型的Session Event发布</li><li>ApplicationListener监听Session Event，处理相应逻辑</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://smallwenzi.github.io/2019/11/13/ring-session%EF%BC%881%EF%BC%89/&quot;&gt;如何使用spring session&lt;/a&gt;&lt;br&gt;上一篇文章中介绍了Spring-Session的核心原理
      
    
    </summary>
    
      <category term="springsession" scheme="https://blog.yanwentan.xyz/categories/springsession/"/>
    
    
      <category term="springsession" scheme="https://blog.yanwentan.xyz/tags/springsession/"/>
    
  </entry>
  
  <entry>
    <title>SpringSession源码</title>
    <link href="https://blog.yanwentan.xyz/2019/11/21/SpringSession%E6%BA%90%E7%A0%81/"/>
    <id>https://blog.yanwentan.xyz/2019/11/21/SpringSession源码/</id>
    <published>2019-11-21T08:34:00.000Z</published>
    <updated>2020-02-17T15:08:47.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://smallwenzi.github.io/2019/11/13/ring-session%EF%BC%881%EF%BC%89/">可参考spring 引入 session代码</a></p><p>再详细阅读源码之前先来看张图，介绍下spring-session中的核心模块以及之间的交互。<br><img src="/2019/11/21/SpringSession源码/2.png" alt="springSesion模块"></p><h1 id="spring-session分为以下核心模块："><a href="#spring-session分为以下核心模块：" class="headerlink" title="spring-session分为以下核心模块："></a>spring-session分为以下核心模块：</h1><ul><li>SessionRepositoryFilter：Servlet规范中Filter的实现，用来切换HttpSession至Spring Session，包装HttpServletRequest和HttpServletResponse</li><li>HttpServerletRequest/HttpServletResponse/HttpSessionWrapper包装器：包装原有的HttpServletRequest、HttpServletResponse和Spring Session，实现切换Session和透明继承HttpSession的关键之所在</li><li>Session：Spring Session模块</li><li>SessionRepository：管理Spring Session的模块</li><li>HttpSessionStrategy：映射HttpRequst和HttpResponse到Session的策略<h2 id="1-SessionRepositoryFilter"><a href="#1-SessionRepositoryFilter" class="headerlink" title="1. SessionRepositoryFilter"></a>1. SessionRepositoryFilter</h2>SessionRepositoryFilter是一个Filter过滤器，符合Servlet的规范定义，用来修改包装请求和响应。这里负责包装切换HttpSession至Spring Session的请求和响应。<br>SpringHttpSessionConfiguration 类定义SessionRepositoryFilter Bean,而在spring项目DelegatingFilterProxy代理装配SessionRepositoryFilter<a href="https://smallwenzi.github.io/2019/11/13/ring-session%EF%BC%881%EF%BC%89/">可参考spring 引入 session代码</a>，<br>而spring boot项目为何自动装配SessionRepositoryFilter 待补充)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doFilterInternal(HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response, FilterChain filterChain)</span><br><span class="line">                throws ServletException, IOException &#123;</span><br><span class="line">    // 设置SessionRepository至Request的属性中</span><br><span class="line">    request.setAttribute(SESSION_REPOSITORY_ATTR, this.sessionRepository);</span><br><span class="line">    // 包装原始HttpServletRequest至SessionRepositoryRequestWrapper</span><br><span class="line">    SessionRepositoryRequestWrapper wrappedRequest = new SessionRepositoryRequestWrapper(</span><br><span class="line">            request, response, this.servletContext);</span><br><span class="line">    // 包装原始HttpServletResponse响应至SessionRepositoryResponseWrapper</span><br><span class="line">    SessionRepositoryResponseWrapper wrappedResponse = new SessionRepositoryResponseWrapper(</span><br><span class="line">            wrappedRequest, response);</span><br><span class="line">    // 设置当前请求的HttpSessionStrategy策略</span><br><span class="line">    HttpServletRequest strategyRequest = this.httpSessionStrategy</span><br><span class="line">            .wrapRequest(wrappedRequest, wrappedResponse);</span><br><span class="line">    // 设置当前响应的HttpSessionStrategy策略</span><br><span class="line">    HttpServletResponse strategyResponse = this.httpSessionStrategy</span><br><span class="line">            .wrapResponse(wrappedRequest, wrappedResponse);</span><br><span class="line">    try &#123;</span><br><span class="line">        filterChain.doFilter(strategyRequest, strategyResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">        // 提交session</span><br><span class="line">        wrappedRequest.commitSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上是SessionRepositoryFilter的核心操作，每个HttpRequest进入，都会被该Filter包装成切换Session的请求很响应对象。</p><h2 id="SessionRepositoryRequestWrapper"><a href="#SessionRepositoryRequestWrapper" class="headerlink" title="SessionRepositoryRequestWrapper"></a>SessionRepositoryRequestWrapper</h2><p>对于developers获取HttpSession的api<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ...;</span><br><span class="line">HttpSession session = request.getSession(true);</span><br></pre></td></tr></table></figure></p><p>在spring session中request的实际类型SessionRepositoryRequestWrapper。调用SessionRepositoryRequestWrapper的getSession方法会触发创建spring session，而非web容器的HttpSession。</p><p>SessionRepositoryRequestWrapper用来包装原始的HttpServletRequest实现HttpSession切换至Spring Session。是透明Spring Session透明集成HttpSession的关键。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private final class SessionRepositoryRequestWrapper</span><br><span class="line">            extends HttpServletRequestWrapper &#123;</span><br><span class="line"></span><br><span class="line">    private final String CURRENT_SESSION_ATTR = HttpServletRequestWrapper.class</span><br><span class="line">                .getName();</span><br><span class="line"></span><br><span class="line">    // 当前请求sessionId有效</span><br><span class="line">    private Boolean requestedSessionIdValid;</span><br><span class="line">    // 当前请求sessionId无效</span><br><span class="line">    private boolean requestedSessionInvalidated;</span><br><span class="line">    private final HttpServletResponse response;</span><br><span class="line">    private final ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    private SessionRepositoryRequestWrapper(HttpServletRequest request,</span><br><span class="line">            HttpServletResponse response, ServletContext servletContext) &#123;</span><br><span class="line">        // 调用HttpServletRequestWrapper构造方法，实现包装</span><br><span class="line">        super(request);</span><br><span class="line">        this.response = response;</span><br><span class="line">        this.servletContext = servletContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SessionRepositoryRequestWrapper继承Servlet规范中定义的包装器HttpServletRequestWrapper。HttpServletRequestWrapper是Servlet规范api提供的用于扩展HttpServletRequest的扩张点——即装饰器模式，可以通过重写一些api达到功能点的增强和自定义。</p><p>HttpServletRequestWrapper中持有一个HttpServletRequest对象，然后实现HttpServletRequest接口的所有方法，所有方法实现中都是调用持有的HttpServletRequest对象的相应的方法。继承HttpServletRequestWrapper 可以对其重写。SessionRepositoryRequestWrapper继承HttpServletRequestWrapper，在构造方法中将原有的HttpServletRequest通过调用super完成对HttpServletRequestWrapper中持有的HttpServletRequest初始化赋值，然后重写和session相关的方法。这样就保证SessionRepositoryRequestWrapper的其他方法调用都是使用原有的HttpServletRequest的数据，只有session相关的是重写的逻辑。</p><p>这里的设计是否很精妙！一切都多亏与Servlet规范设计的的巧妙啊！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public HttpSessionWrapper getSession() &#123;</span><br><span class="line">    return getSession(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写HttpServletRequest的getSession()方法，调用有参数getSession(arg)方法，默认为true，表示当前reques没有session时创建session。继续看下有参数getSession(arg)的重写逻辑.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public HttpSessionWrapper getSession(boolean create) &#123;</span><br><span class="line">    // 从当前请求的attribute中获取session，如果有直接返回</span><br><span class="line">    HttpSessionWrapper currentSession = getCurrentSession();</span><br><span class="line">    if (currentSession != null) &#123;</span><br><span class="line">        return currentSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取当前request的sessionId，这里使用了HttpSessionStrategy</span><br><span class="line">    // 决定怎样将Request映射至Session，默认使用Cookie策略，即从cookies中解析sessionId</span><br><span class="line">    String requestedSessionId = getRequestedSessionId();</span><br><span class="line">    // 请求的如果sessionId存在且当前request的attribute中的没有session失效属性</span><br><span class="line">    // 则根据sessionId获取spring session</span><br><span class="line">    if (requestedSessionId != null</span><br><span class="line">            &amp;&amp; getAttribute(INVALID_SESSION_ID_ATTR) == null) &#123;</span><br><span class="line">        S session = getSession(requestedSessionId);</span><br><span class="line">        // 如果spring session不为空，则将spring session包装成HttpSession并</span><br><span class="line">        // 设置到当前Request的attribute中，防止同一个request getsession时频繁的到存储器</span><br><span class="line">        //中获取session，提高性能</span><br><span class="line">        if (session != null) &#123;</span><br><span class="line">            this.requestedSessionIdValid = true;</span><br><span class="line">            currentSession = new HttpSessionWrapper(session, getServletContext());</span><br><span class="line">            currentSession.setNew(false);</span><br><span class="line">            setCurrentSession(currentSession);</span><br><span class="line">            return currentSession;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果根据sessionId，没有获取到session，则设置当前request属性，此sessionId无效</span><br><span class="line">        // 同一个请求中获取session，直接返回无效</span><br><span class="line">        else &#123;</span><br><span class="line">            // This is an invalid session id. No need to ask again if</span><br><span class="line">            // request.getSession is invoked for the duration of this request</span><br><span class="line">            if (SESSION_LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">                SESSION_LOGGER.debug(</span><br><span class="line">                        &quot;No session found by id: Caching result for getSession(false) for this HttpServletRequest.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            setAttribute(INVALID_SESSION_ID_ATTR, &quot;true&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断是否创建session</span><br><span class="line">    if (!create) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (SESSION_LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        SESSION_LOGGER.debug(</span><br><span class="line">                &quot;A new session was created. To help you troubleshoot where the session was created we provided a StackTrace (this is not an error). You can prevent this from appearing by disabling DEBUG logging for &quot;</span><br><span class="line">                        + SESSION_LOGGER_NAME,</span><br><span class="line">                new RuntimeException(</span><br><span class="line">                        &quot;For debugging purposes only (not an error)&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据sessionRepository创建spring session</span><br><span class="line">    S session = SessionRepositoryFilter.this.sessionRepository.createSession();</span><br><span class="line">    // 设置session的最新访问时间</span><br><span class="line">    session.setLastAccessedTime(System.currentTimeMillis());</span><br><span class="line">    // 包装成HttpSession透明化集成</span><br><span class="line">    currentSession = new HttpSessionWrapper(session, getServletContext());</span><br><span class="line">    // 设置session至Requset的attribute中，提高同一个request访问session的性能</span><br><span class="line">    setCurrentSession(currentSession);</span><br><span class="line">    return currentSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来看下spring session的持久化。上述SessionRepositoryFilter在包装HttpServletRequest后，执行FilterChain中使用finally保证请求的Session始终session会被提交，此提交操作中将sesionId设置到response的head中并将session持久化至存储器中。</p><p>持久化只持久spring session，并不是将spring session包装后的HttpSession持久化，因为HttpSession不过是包装器，持久化没有意义。</p><p>再来看下包装的响应SessionRepositoryResponseWrapper。</p><h2 id="SessionRepositoryResponseWrapper"><a href="#SessionRepositoryResponseWrapper" class="headerlink" title="SessionRepositoryResponseWrapper"></a>SessionRepositoryResponseWrapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Allows ensuring that the session is saved if the response is committed.</span><br><span class="line"> *</span><br><span class="line"> * @author Rob Winch</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">private final class SessionRepositoryResponseWrapper</span><br><span class="line">        extends OnCommittedResponseWrapper &#123;</span><br><span class="line">    private final SessionRepositoryRequestWrapper request;</span><br><span class="line">    /**</span><br><span class="line">     * Create a new &#123;@link SessionRepositoryResponseWrapper&#125;.</span><br><span class="line">     * @param request the request to be wrapped</span><br><span class="line">     * @param response the response to be wrapped</span><br><span class="line">     */</span><br><span class="line">    SessionRepositoryResponseWrapper(SessionRepositoryRequestWrapper request,</span><br><span class="line">            HttpServletResponse response) &#123;</span><br><span class="line">        super(response);</span><br><span class="line">        if (request == null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;request cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.request = request;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onResponseCommitted() &#123;</span><br><span class="line">        this.request.commitSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的注释已经非常详细，这里不再赘述。这里只讲述为什么需要包装原始的响应。从注释上可以看出包装响应时为了：确保如果响应被提交session能够被保存。</p><p>这里我有点疑惑：在上述的SessionRepositoryFilter.doFilterInternal方法中不是已经request.commitSession()了吗，FilterChain执行完或者异常后都会执行Finally中的request.commitSession。为什么这里仍然需要包装响应，为了确保session能够保存，包装器中的onResponseCommitted方法可以看出也是做了一次request.commitSession()</p><p>原因：一旦response执行flushBuffer方法，迫使Response中在Buffer中任何数据都会被返回至client端。这个方法自动提交响应中的status code和head。那么如果不包装请求，监听flushBuffer事件在提交response前，将session写入response和持久化session，将导致作者说的无法追踪session。（来源网上）</p><p>SessionRepositoryResponseWrapper继承父类OnCommittedResponseWrapper，其中flushBuffer方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Makes sure &#123;@link OnCommittedResponseWrapper#onResponseCommitted()&#125; is invoked</span><br><span class="line"> * before calling the superclass &lt;code&gt;flushBuffer()&lt;/code&gt;.</span><br><span class="line"> * @throws IOException if an input or output exception occurred</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void flushBuffer() throws IOException &#123;</span><br><span class="line">    doOnResponseCommitted();</span><br><span class="line">    super.flushBuffer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Calls &lt;code&gt;onResponseCommmitted()&lt;/code&gt; with the current contents as long as</span><br><span class="line"> * &#123;@link #disableOnResponseCommitted()&#125; was not invoked.</span><br><span class="line"> */</span><br><span class="line">private void doOnResponseCommitted() &#123;</span><br><span class="line">    if (!this.disableOnCommitted) &#123;</span><br><span class="line">        onResponseCommitted();</span><br><span class="line">        disableOnResponseCommitted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写HttpServletResponse方法，监听response commit，当发生response commit时，可以在commit之前写session至response中并持久化session</p><p>再看SessionRepository之前，先来看下spring session中的session接口。</p><h2 id="Session接口"><a href="#Session接口" class="headerlink" title="Session接口"></a>Session接口</h2><p>spring-session和tomcat中的Session的实现模式上有很大不同，tomcat中直接对HttpSession接口进行实现，而spring-session中则抽象出单独的Session层接口，让后再使用适配器模式将Session适配层Servlet规范中的HttpSession。spring-sesion中关于session的实现和适配整个UML类图如下：</p><p><img src="/2019/11/21/SpringSession源码/3.png" alt="springSesion模块"></p><p>Session是spring-session对session的抽象，主要是为了鉴定用户，为Http请求和响应提供上下文过程，该Session可以被HttpSession、WebSocket Session，非WebSession等使用。定义了Session的基本行为：</p><ul><li>getId：获取sessionId</li><li>setAttribute：设置session属性</li><li>getAttribte：获取session属性</li></ul><p>ExipringSession：提供Session额外的过期特性。定义了以下关于过期的行为：</p><ul><li>setLastAccessedTime：设置最近Session会话过程中最近的访问时间</li><li>getLastAccessedTime：获取最近的访问时间</li><li>setMaxInactiveIntervalInSeconds：设置Session的最大闲置时间</li><li>getMaxInactiveIntervalInSeconds：获取最大闲置时间</li><li>isExpired：判断Session是否过期</li></ul><p>MapSession：基于java.util.Map的ExpiringSession的实现</p><p>RedisSession：基于MapSession和Redis的ExpiringSession实现，提供Session的持久化能力</p><p>先来看下MapSession的代码源码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final class MapSession implements ExpiringSession, Serializable &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Default &#123;@link #setMaxInactiveIntervalInSeconds(int)&#125; (30 minutes).</span><br><span class="line">     */</span><br><span class="line">    public static final int DEFAULT_MAX_INACTIVE_INTERVAL_SECONDS = 1800;</span><br><span class="line"></span><br><span class="line">    private String id;</span><br><span class="line">    private Map&lt;String, Object&gt; sessionAttrs = new HashMap&lt;String, Object&gt;();</span><br><span class="line">    private long creationTime = System.currentTimeMillis();</span><br><span class="line">    private long lastAccessedTime = this.creationTime;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Defaults to 30 minutes.</span><br><span class="line">     */</span><br><span class="line">    private int maxInactiveInterval = DEFAULT_MAX_INACTIVE_INTERVAL_SECONDS;</span><br></pre></td></tr></table></figure></p><p>MapSession中持有HashMap类型的变量sessionAtts用于存储Session设置属性，比如调用的setAttribute方法的k-v就存储在该HashMap中。这个和tomcat内部实现HttpSession的方式类似，tomcat中使用了ConcurrentHashMap存储。</p><p>其中lastAccessedTime用于记录最近的一次访问时间，maxInactiveInterval用于记录Session的最大闲置时间（过期时间-针对没有Request活跃的情况下的最大时间，即相对于最近一次访问后的最大闲置时间）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void setAttribute(String attributeName, Object attributeValue) &#123;</span><br><span class="line">    if (attributeValue == null) &#123;</span><br><span class="line">        removeAttribute(attributeName);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        this.sessionAttrs.put(attributeName, attributeValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>setAttribute方法极其简单，null时就移除attributeName，否则put存储。</p><p>重点熟悉RedisSession如何实现Session的行为：setAttribute、persistence等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A custom implementation of &#123;@link Session&#125; that uses a &#123;@link MapSession&#125; as the</span><br><span class="line"> * basis for its mapping. It keeps track of any attributes that have changed. When</span><br><span class="line"> * &#123;@link org.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession#saveDelta()&#125;</span><br><span class="line"> * is invoked all the attributes that have been changed will be persisted.</span><br><span class="line"> *</span><br><span class="line"> * @author Rob Winch</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">final class RedisSession implements ExpiringSession &#123;</span><br><span class="line">    private final MapSession cached;</span><br><span class="line">    private Long originalLastAccessTime;</span><br><span class="line">    private Map&lt;String, Object&gt; delta = new HashMap&lt;String, Object&gt;();</span><br><span class="line">    private boolean isNew;</span><br><span class="line">    private String originalPrincipalName;</span><br></pre></td></tr></table></figure></p><p>首先看javadocs，对于阅读源码，学会看javadocs非常重要！</p><p>基于MapSession的基本映射实现的Session，能够追踪发生变化的所有属性，当调用saveDelta方法后，变化的属性将被持久化！</p><p>在RedisSession中有两个非常重要的成员属性：</p><ul><li>cached：实际上是一个MapSession实例，用于做本地缓存，每次在getAttribute时无需从Redis中获取，主要为了improve性能</li><li>delta：用于跟踪变化数据，做持久化<br>再来看下RedisSession中最为重要的行为saveDelta——持久化Session至Redis中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Saves any attributes that have been changed and updates the expiration of this</span><br><span class="line"> * session.</span><br><span class="line"> */</span><br><span class="line">private void saveDelta() &#123;</span><br><span class="line">    // 如果delta为空，则Session中没有任何数据需要存储</span><br><span class="line">    if (this.delta.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    String sessionId = getId();</span><br><span class="line">    // 使用spring data redis将delta中的数据保存至Redis中</span><br><span class="line">    getSessionBoundHashOperations(sessionId).putAll(this.delta);</span><br><span class="line">    String principalSessionKey = getSessionAttrNameKey(</span><br><span class="line">            FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME);</span><br><span class="line">    String securityPrincipalSessionKey = getSessionAttrNameKey(</span><br><span class="line">            SPRING_SECURITY_CONTEXT);</span><br><span class="line">    if (this.delta.containsKey(principalSessionKey)</span><br><span class="line">            || this.delta.containsKey(securityPrincipalSessionKey)) &#123;</span><br><span class="line">        if (this.originalPrincipalName != null) &#123;</span><br><span class="line">            String originalPrincipalRedisKey = getPrincipalKey(</span><br><span class="line">                    this.originalPrincipalName);</span><br><span class="line">            RedisOperationsSessionRepository.this.sessionRedisOperations</span><br><span class="line">                    .boundSetOps(originalPrincipalRedisKey).remove(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        String principal = PRINCIPAL_NAME_RESOLVER.resolvePrincipal(this);</span><br><span class="line">        this.originalPrincipalName = principal;</span><br><span class="line">        if (principal != null) &#123;</span><br><span class="line">            String principalRedisKey = getPrincipalKey(principal);</span><br><span class="line">            RedisOperationsSessionRepository.this.sessionRedisOperations</span><br><span class="line">                    .boundSetOps(principalRedisKey).add(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    // 清空delta，代表没有任何需要持久化的数据。同时保证</span><br><span class="line">    //SessionRepositoryFilter和SessionRepositoryResponseWrapper的onResponseCommitted</span><br><span class="line">    //只会持久化一次Session至Redis中，解决前面提到的疑问</span><br><span class="line">    this.delta = new HashMap&lt;String, Object&gt;(this.delta.size());  </span><br><span class="line">    // 更新过期时间，滚动至下一个过期时间间隔的时刻</span><br><span class="line">    Long originalExpiration = this.originalLastAccessTime == null ? null</span><br><span class="line">            : this.originalLastAccessTime + TimeUnit.SECONDS</span><br><span class="line">                    .toMillis(getMaxInactiveIntervalInSeconds());</span><br><span class="line">    RedisOperationsSessionRepository.this.expirationPolicy</span><br><span class="line">            .onExpirationUpdated(originalExpiration, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从javadoc中可以看出，saveDelta用于存储Session的属性：</p><ul><li>保存Session中的属性数据至Redis中</li><li>清空delta中数据，防止重复提交Session中的数据</li><li>更新过期时间至下一个过期时间间隔的时刻</li></ul><p>再看下RedisSession中的其他行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 设置session的存活时间，即最大过期时间。先保存至本地缓存，然后再保存至delta</span><br><span class="line">public void setMaxInactiveIntervalInSeconds(int interval) &#123;</span><br><span class="line">    this.cached.setMaxInactiveIntervalInSeconds(interval);</span><br><span class="line">    this.delta.put(MAX_INACTIVE_ATTR, getMaxInactiveIntervalInSeconds());</span><br><span class="line">    flushImmediateIfNecessary();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 直接从本地缓存获取过期时间</span><br><span class="line">public int getMaxInactiveIntervalInSeconds() &#123;</span><br><span class="line">    return this.cached.getMaxInactiveIntervalInSeconds();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 直接从本地缓存中获取Session中的属性</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public Object getAttribute(String attributeName) &#123;</span><br><span class="line">    return this.cached.getAttribute(attributeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 保存Session属性至本地缓存和delta中</span><br><span class="line">public void setAttribute(String attributeName, Object attributeValue) &#123;</span><br><span class="line">    this.cached.setAttribute(attributeName, attributeValue);</span><br><span class="line">    this.delta.put(getSessionAttrNameKey(attributeName), attributeValue);</span><br><span class="line">    flushImmediateIfNecessary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了MapSession和RedisSession还有JdbcSession、MongoExpiringSession，感兴趣的读者可以自行阅读。</p><p>下面看SessionRepository的逻辑。SessionRepository是spring session中用于管理spring session的核心组件。</p><h2 id="SessionRepository"><a href="#SessionRepository" class="headerlink" title="SessionRepository"></a>SessionRepository</h2><p>javadoc中描述SessionRepository为管理spring-session的接口实例。抽象出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S createSession();</span><br><span class="line">void save(S session);</span><br><span class="line">S getSession(String id);</span><br><span class="line">void delete(String id);</span><br></pre></td></tr></table></figure></p><p>创建、保存、获取、删除Session的接口行为。根据Session的不同，分为很多种Session操作仓库。<br><img src="/2019/11/21/SpringSession源码/4.png" alt="springSesion模块"></p><p>这里重点介绍下RedisOperationsSessionRepository。在详细介绍其之前，了解下RedisOperationsSessionRepository的数据存储细节。</p><p>当创建一个RedisSession，然后存储在Redis中时，RedisSession的存储细节如下：</p><p>spring:session:sessions:33fdd1b6-b496-4b33-9f7d-df96679d32fe<br>spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe<br>spring:session:expirations:1439245080000</p><p>Redis会为每个RedisSession存储三个k-v。</p><ul><li>第一个k-v用来存储Session的详细信息，包括Session的过期时间间隔、最近的访问时间、attributes等等。这个k的过期时间为Session的最大过期时间 + 5分钟。如果默认的最大过期时间为30分钟，则这个k的过期时间为35分钟</li><li>第二个k-v用来表示Session在Redis中的过期，这个k-v不存储任何有用数据，只是表示Session过期而设置。这个k在Redis中的过期时间即为Session的过期时间间隔</li><li>第三个k-v存储这个Session的id，是一个Set类型的Redis数据结构。这个k中的最后的1439245080000值是一个时间戳，根据这个Session过期时刻滚动至下一分钟而计算得出。<br>简单描述下，为什么RedisSession的存储用到了三个Key，而非一个Redis过期Key。<br>对于Session的实现，需要支持HttpSessionEvent，即Session创建、过期、销毁等事件。当应用用监听器设置监听相应事件，Session发生上述行为时，监听器能够做出相应的处理。<br>Redis的强大之处在于支持KeySpace Notifiction——键空间通知。即可以监视某个key的变化，如删除、更新、过期。</li></ul><p>但是Redis中带有过期的key有两种方式：</p><ul><li>当访问时发现其过期</li><li>Redis后台逐步查找过期键<br>当访问时发现其过期，会产生过期事件，但是无法保证key的过期时间抵达后立即生成过期事件。<br>spring-session为了能够及时的产生Session的过期时的过期事件，所以增加了：</li></ul><p>spring:session:sessions:expires:33fdd1b6-b496-4b33-9f7d-df96679d32fe<br>spring:session:expirations:1439245080000</p><p>spring-session中有个定时任务，每个整分钟都会查询相应的spring:session:expirations:整分钟的时间戳中的过期SessionId，然后再访问一次这个SessionId，即spring:session:sessions:expires:SessionId，以便能够让Redis及时的产生key过期事件——即Session过期事件。</p><p>接下来再看下RedisOperationsSessionRepository中的具体实现原理</p><h3 id="createSession方法："><a href="#createSession方法：" class="headerlink" title="createSession方法："></a>createSession方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public RedisSession createSession() &#123;</span><br><span class="line">    // new一个RedisSession实例</span><br><span class="line">    RedisSession redisSession = new RedisSession();</span><br><span class="line">    // 如果设置的最大过期时间不为空，则设置RedisSession的过期时间</span><br><span class="line">    if (this.defaultMaxInactiveInterval != null) &#123;</span><br><span class="line">        redisSession.setMaxInactiveIntervalInSeconds(this.defaultMaxInactiveInterval);</span><br><span class="line">    &#125;</span><br><span class="line">    return redisSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看下RedisSession的构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Creates a new instance ensuring to mark all of the new attributes to be</span><br><span class="line"> * persisted in the next save operation.</span><br><span class="line"> */</span><br><span class="line">RedisSession() &#123;</span><br><span class="line">    // 设置本地缓存为MapSession</span><br><span class="line">    this(new MapSession());</span><br><span class="line">    // 设置Session的基本属性</span><br><span class="line">    this.delta.put(CREATION_TIME_ATTR, getCreationTime());</span><br><span class="line">    this.delta.put(MAX_INACTIVE_ATTR, getMaxInactiveIntervalInSeconds());</span><br><span class="line">    this.delta.put(LAST_ACCESSED_ATTR, getLastAccessedTime());</span><br><span class="line">    // 标记Session的是否为新创建</span><br><span class="line">    this.isNew = true;</span><br><span class="line">    // 持久化</span><br><span class="line">    flushImmediateIfNecessary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="save方法："><a href="#save方法：" class="headerlink" title="save方法："></a>save方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void save(RedisSession session) &#123;</span><br><span class="line">    // 调用RedisSession的saveDelta持久化Session</span><br><span class="line">    session.saveDelta();</span><br><span class="line">    // 如果Session为新创建，则发布一个Session创建的事件</span><br><span class="line">    if (session.isNew()) &#123;</span><br><span class="line">        String sessionCreatedKey = getSessionCreatedChannel(session.getId());</span><br><span class="line">        this.sessionRedisOperations.convertAndSend(sessionCreatedKey, session.delta);</span><br><span class="line">        session.setNew(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getSession方法："><a href="#getSession方法：" class="headerlink" title="getSession方法："></a>getSession方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根据SessionId获取Session，这里的false代表的参数</span><br><span class="line">// 指：如果Session已经过期，是否仍然获取返回</span><br><span class="line">public RedisSession getSession(String id) &#123;</span><br><span class="line">    return getSession(id, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有些情况下，Session过期，仍然需要能够获取到Session。这里先来看下getSession(String id, boolean allowExpired)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private RedisSession getSession(String id, boolean allowExpired) &#123;</span><br><span class="line">    // 根据SessionId，从Redis获取到持久化的Session信息</span><br><span class="line">    Map&lt;Object, Object&gt; entries = getSessionBoundHashOperations(id).entries();</span><br><span class="line">    // 如果Redis中没有，则返回null</span><br><span class="line">    if (entries.isEmpty()) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据Session信息，加载创建一个MapSession对象</span><br><span class="line">    MapSession loaded = loadSession(id, entries);</span><br><span class="line">    //  判断是否允许过期获取和Session是否过期</span><br><span class="line">    if (!allowExpired &amp;&amp; loaded.isExpired()) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据MapSession new一个信息的RedisSession，此时isNew为false</span><br><span class="line">    RedisSession result = new RedisSession(loaded);</span><br><span class="line">    // 设置最新的访问时间</span><br><span class="line">    result.originalLastAccessTime = loaded.getLastAccessedTime();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里需要注意的是loaded.isExpired()和loadSession。loaded.isExpired判断Session是否过期，如果过期返回null：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean isExpired() &#123;</span><br><span class="line">    // 根据当前时间判断是否过期</span><br><span class="line">    return isExpired(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line">boolean isExpired(long now) &#123;</span><br><span class="line">    // 如果maxInactiveInterval小于0，表示Session永不过期</span><br><span class="line">    if (this.maxInactiveInterval &lt; 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 最大过期时间单位转换为毫秒</span><br><span class="line">    // 当前时间减去Session的最大有效期间隔以获取理论上有效的上一次访问时间</span><br><span class="line">    // 然后在与实际的上一次访问时间进行比较</span><br><span class="line">    // 如果大于，表示理论上的时间已经在实际的访问时间之后，那么表示Session已经过期</span><br><span class="line">    return now - TimeUnit.SECONDS</span><br><span class="line">            .toMillis(this.maxInactiveInterval) &gt;= this.lastAccessedTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>loadSession中，将Redis中存储的Session信息转换为MapSession对象，以便从Session中获取属性时能够从内存直接获取提高性能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private MapSession loadSession(String id, Map&lt;Object, Object&gt; entries) &#123;</span><br><span class="line">    MapSession loaded = new MapSession(id);</span><br><span class="line">    for (Map.Entry&lt;Object, Object&gt; entry : entries.entrySet()) &#123;</span><br><span class="line">        String key = (String) entry.getKey();</span><br><span class="line">        if (CREATION_TIME_ATTR.equals(key)) &#123;</span><br><span class="line">            loaded.setCreationTime((Long) entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        else if (MAX_INACTIVE_ATTR.equals(key)) &#123;</span><br><span class="line">            loaded.setMaxInactiveIntervalInSeconds((Integer) entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        else if (LAST_ACCESSED_ATTR.equals(key)) &#123;</span><br><span class="line">            loaded.setLastAccessedTime((Long) entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        else if (key.startsWith(SESSION_ATTR_PREFIX)) &#123;</span><br><span class="line">            loaded.setAttribute(key.substring(SESSION_ATTR_PREFIX.length()),</span><br><span class="line">                    entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return loaded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，可以看出spring-session中request.getSession(false)的过期实现原理。</p><h3 id="delete方法："><a href="#delete方法：" class="headerlink" title="delete方法："></a>delete方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void delete(String sessionId) &#123;</span><br><span class="line">    // 获取Session</span><br><span class="line">    RedisSession session = getSession(sessionId, true);</span><br><span class="line">    if (session == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    cleanupPrincipalIndex(session);</span><br><span class="line">    // 从过期集合中移除sessionId</span><br><span class="line">    this.expirationPolicy.onDelete(session);</span><br><span class="line">    String expireKey = getExpiredKey(session.getId());</span><br><span class="line">    // 删除session的过期键</span><br><span class="line">    this.sessionRedisOperations.delete(expireKey);</span><br><span class="line">    // 设置session过期</span><br><span class="line">    session.setMaxInactiveIntervalInSeconds(0);</span><br><span class="line">    save(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此RedisOperationsSessionRepository的核心原理就介绍完毕。但是RedisOperationsSessionRepository中还包括关于Session事件的处理和清理Session的定时任务。这部分内容在后述的SessionEvent部分介绍。</p><h2 id="HttpSessionStrategy"><a href="#HttpSessionStrategy" class="headerlink" title="HttpSessionStrategy"></a>HttpSessionStrategy</h2><p>从javadoc中可以看出，HttpSessionStrategy是建立Request/Response和Session之间的映射关系的策略。<br>该策略接口中定义一套策略行为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 根据请求获取SessionId，即建立请求至Session的映射关系</span><br><span class="line">String getRequestedSessionId(HttpServletRequest request);</span><br><span class="line">// 对于新创建的Session，通知客户端</span><br><span class="line">void onNewSession(Session session, HttpServletRequest request,</span><br><span class="line">            HttpServletResponse response);</span><br><span class="line">// 对于session无效，通知客户端</span><br><span class="line">void onInvalidateSession(HttpServletRequest request, HttpServletResponse response);</span><br></pre></td></tr></table></figure></p><p>如下UML类图：<br><img src="/2019/11/21/SpringSession源码/5.png" alt="springSesion模块"></p><p>这里主要介绍CookieHttpSessionStrategy，这个也是默认的策略，可以查看spring-session中类SpringHttpSessionConfiguration，在注册SessionRepositoryFilter Bean时默认采用CookieHttpSessionStrategy：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public &lt;S extends ExpiringSession&gt; SessionRepositoryFilter&lt;? extends ExpiringSession&gt; springSessionRepositoryFilter(</span><br><span class="line">        SessionRepository&lt;S&gt; sessionRepository) &#123;</span><br><span class="line">    SessionRepositoryFilter&lt;S&gt; sessionRepositoryFilter = new SessionRepositoryFilter&lt;S&gt;(</span><br><span class="line">            sessionRepository);</span><br><span class="line">    sessionRepositoryFilter.setServletContext(this.servletContext);</span><br><span class="line">    if (this.httpSessionStrategy instanceof MultiHttpSessionStrategy) &#123;</span><br><span class="line">        sessionRepositoryFilter.setHttpSessionStrategy(</span><br><span class="line">                (MultiHttpSessionStrategy) this.httpSessionStrategy);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        sessionRepositoryFilter.setHttpSessionStrategy(this.httpSessionStrategy);</span><br><span class="line">    &#125;</span><br><span class="line">    return sessionRepositoryFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面来分析CookieHttpSessionStrategy的原理。该策略使用Cookie来映射Request/Response至Session。即request/requset的head中cookie存储SessionId，当请求至web服务器，可以解析请求head中的cookie，然后获取sessionId，根据sessionId获取spring-session。当创建新的session或者session过期，将相应的sessionId写入response的set-cookie或者从respose中移除sessionId。</p><h3 id="getRequestedSessionId方法"><a href="#getRequestedSessionId方法" class="headerlink" title="getRequestedSessionId方法"></a>getRequestedSessionId方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public String getRequestedSessionId(HttpServletRequest request) &#123;</span><br><span class="line">    // 获取当前请求的sessionId：session别名和sessionId映射</span><br><span class="line">    Map&lt;String, String&gt; sessionIds = getSessionIds(request);</span><br><span class="line">    // 获取当前请求的Session别名</span><br><span class="line">    String sessionAlias = getCurrentSessionAlias(request);</span><br><span class="line">    // 获取相应别名的sessionId</span><br><span class="line">    return sessionIds.get(sessionAlias);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看下具体获取SessionIds的具体过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public String getRequestedSessionId(HttpServletRequest request) &#123;</span><br><span class="line">    // 获取当前请求的sessionId：session别名和sessionId映射</span><br><span class="line">    Map&lt;String, String&gt; sessionIds = getSessionIds(request);</span><br><span class="line">    // 获取当前请求的Session别名</span><br><span class="line">    String sessionAlias = getCurrentSessionAlias(request);</span><br><span class="line">    // 获取相应别名的sessionId</span><br><span class="line">    return sessionIds.get(sessionAlias);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Map&lt;String, String&gt; getSessionIds(HttpServletRequest request) &#123;</span><br><span class="line">    // 解析request中的cookie值</span><br><span class="line">    List&lt;String&gt; cookieValues = this.cookieSerializer.readCookieValues(request);</span><br><span class="line">    // 获取sessionId</span><br><span class="line">    String sessionCookieValue = cookieValues.isEmpty() ? &quot;&quot;</span><br><span class="line">            : cookieValues.iterator().next();</span><br><span class="line">    Map&lt;String, String&gt; result = new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">    // 根据分词器对sessionId进行分割，因为spring-session支持多session。默认情况只有一个session</span><br><span class="line">    StringTokenizer tokens = new StringTokenizer(sessionCookieValue, this.deserializationDelimiter);</span><br><span class="line">    // 如果只有一个session，则设置默认别名为0</span><br><span class="line">    if (tokens.countTokens() == 1) &#123;</span><br><span class="line">        result.put(DEFAULT_ALIAS, tokens.nextToken());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果有多个session，则建立别名和sessionId的映射</span><br><span class="line">    while (tokens.hasMoreTokens()) &#123;</span><br><span class="line">        String alias = tokens.nextToken();</span><br><span class="line">        if (!tokens.hasMoreTokens()) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        String id = tokens.nextToken();</span><br><span class="line">        result.put(alias, id);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public List&lt;String&gt; readCookieValues(HttpServletRequest request) &#123;</span><br><span class="line">    // 获取request的cookie</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    List&lt;String&gt; matchingCookieValues = new ArrayList&lt;String&gt;();</span><br><span class="line">    if (cookies != null) &#123;</span><br><span class="line">        for (Cookie cookie : cookies) &#123;</span><br><span class="line">            // 如果是以SESSION开头，则表示是SessionId，毕竟cookie不只有sessionId，还有可能存储其他内容</span><br><span class="line">            if (this.cookieName.equals(cookie.getName())) &#123;</span><br><span class="line">                // 决策是否需要base64 decode</span><br><span class="line">                String sessionId = this.useBase64Encoding</span><br><span class="line">                        ? base64Decode(cookie.getValue()) : cookie.getValue();</span><br><span class="line">                if (sessionId == null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if (this.jvmRoute != null &amp;&amp; sessionId.endsWith(this.jvmRoute)) &#123;</span><br><span class="line">                    sessionId = sessionId.substring(0,</span><br><span class="line">                            sessionId.length() - this.jvmRoute.length());</span><br><span class="line">                &#125;</span><br><span class="line">                // 存入list中</span><br><span class="line">                matchingCookieValues.add(sessionId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return matchingCookieValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来看下获取当前request对应的Session的别名方法getCurrentSessionAlias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public String getCurrentSessionAlias(HttpServletRequest request) &#123;</span><br><span class="line">    // 如果session参数为空，则返回默认session别名</span><br><span class="line">    if (this.sessionParam == null) &#123;</span><br><span class="line">        return DEFAULT_ALIAS;</span><br><span class="line">    &#125;</span><br><span class="line">    // 从request中获取session别名，如果为空则返回默认别名</span><br><span class="line">    String u = request.getParameter(this.sessionParam);</span><br><span class="line">    if (u == null) &#123;</span><br><span class="line">        return DEFAULT_ALIAS;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!ALIAS_PATTERN.matcher(u).matches()) &#123;</span><br><span class="line">        return DEFAULT_ALIAS;</span><br><span class="line">    &#125;</span><br><span class="line">    return u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>spring-session为了支持多session，才弄出多个session别名。当时一般应用场景都是一个session，都是默认的session别名0。</p><p>上述获取sessionId和别名映射关系中，也是默认别名0。这里返回别名0，所以返回当前请求对应的sessionId。</p><h3 id="onNewSession方法"><a href="#onNewSession方法" class="headerlink" title="onNewSession方法"></a>onNewSession方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void onNewSession(Session session, HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response) &#123;</span><br><span class="line">    // 从当前request中获取已经写入Cookie的sessionId集合</span><br><span class="line">    Set&lt;String&gt; sessionIdsWritten = getSessionIdsWritten(request);</span><br><span class="line">    // 判断是否包含，如果包含，表示该sessionId已经写入过cookie中，则直接返回</span><br><span class="line">    if (sessionIdsWritten.contains(session.getId())) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果没有写入，则加入集合，后续再写入</span><br><span class="line">    sessionIdsWritten.add(session.getId());</span><br><span class="line">    Map&lt;String, String&gt; sessionIds = getSessionIds(request);</span><br><span class="line">    String sessionAlias = getCurrentSessionAlias(request);</span><br><span class="line">    sessionIds.put(sessionAlias, session.getId());</span><br><span class="line">    // 获取cookieValue</span><br><span class="line">    String cookieValue = createSessionCookieValue(sessionIds);</span><br><span class="line">    //将cookieValue写入Cookie中</span><br><span class="line">    this.cookieSerializer</span><br><span class="line">            .writeCookieValue(new CookieValue(request, response, cookieValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sessionIdsWritten主要是用来记录已经写入Cookie的SessionId，防止SessionId重复写入Cookie中。</p><h3 id="onInvalidateSession方法"><a href="#onInvalidateSession方法" class="headerlink" title="onInvalidateSession方法"></a>onInvalidateSession方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void onInvalidateSession(HttpServletRequest request,</span><br><span class="line">        HttpServletResponse response) &#123;</span><br><span class="line">    // 从当前request中获取sessionId和别名映射</span><br><span class="line">    Map&lt;String, String&gt; sessionIds = getSessionIds(request);</span><br><span class="line">    // 获取别名</span><br><span class="line">    String requestedAlias = getCurrentSessionAlias(request);</span><br><span class="line">    // 移除sessionId</span><br><span class="line">    sessionIds.remove(requestedAlias);</span><br><span class="line">    String cookieValue = createSessionCookieValue(sessionIds);</span><br><span class="line">    // 写入移除后的sessionId</span><br><span class="line">    this.cookieSerializer</span><br><span class="line">            .writeCookieValue(new CookieValue(request, response, cookieValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看下具体的写入writeCookieValue原理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void writeCookieValue(CookieValue cookieValue) &#123;</span><br><span class="line">    // 获取request/respose和cookie值</span><br><span class="line">    HttpServletRequest request = cookieValue.getRequest();</span><br><span class="line">    HttpServletResponse response = cookieValue.getResponse();</span><br><span class="line">    String requestedCookieValue = cookieValue.getCookieValue();</span><br><span class="line">    String actualCookieValue = this.jvmRoute == null ? requestedCookieValue</span><br><span class="line">            : requestedCookieValue + this.jvmRoute;</span><br><span class="line">    // 构造servlet规范中的Cookie对象，注意这里cookieName为：SESSION，表示为Session，</span><br><span class="line">    // 上述的从Cookie中读取SessionId，也是使用该cookieName</span><br><span class="line">    Cookie sessionCookie = new Cookie(this.cookieName, this.useBase64Encoding</span><br><span class="line">            ? base64Encode(actualCookieValue) : actualCookieValue);</span><br><span class="line">    // 设置cookie的属性：secure、path、domain、httpOnly</span><br><span class="line">    sessionCookie.setSecure(isSecureCookie(request));</span><br><span class="line">    sessionCookie.setPath(getCookiePath(request));</span><br><span class="line">    String domainName = getDomainName(request);</span><br><span class="line">    if (domainName != null) &#123;</span><br><span class="line">        sessionCookie.setDomain(domainName);</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.useHttpOnlyCookie) &#123;</span><br><span class="line">        sessionCookie.setHttpOnly(true);</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果cookie值为空，则失效</span><br><span class="line">    if (&quot;&quot;.equals(requestedCookieValue)) &#123;</span><br><span class="line">        sessionCookie.setMaxAge(0);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        sessionCookie.setMaxAge(this.cookieMaxAge);</span><br><span class="line">    &#125;</span><br><span class="line">    // 写入cookie到response中</span><br><span class="line">    response.addCookie(sessionCookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，CookieHttpSessionStrategy介绍结束。</p><p>由于篇幅过长，关于spring-session event和RedisOperationSessionRepository清理session并且产生过期事件的部分后续文章介绍。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>spring-session提供集群环境下HttpSession的透明集成。spring-session的优势在于开箱即用，具有较强的设计模式。且支持多种持久化方式，其中RedisSession较为成熟，与spring-data-redis整合，可谓威力无穷。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://smallwenzi.github.io/2019/11/13/ring-session%EF%BC%881%EF%BC%89/&quot;&gt;可参考spring 引入 session代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再详细阅读源码之前先来看张图，介绍下sp
      
    
    </summary>
    
      <category term="spring" scheme="https://blog.yanwentan.xyz/categories/spring/"/>
    
      <category term="spring boot" scheme="https://blog.yanwentan.xyz/categories/spring/spring-boot/"/>
    
    
      <category term="springsession" scheme="https://blog.yanwentan.xyz/tags/springsession/"/>
    
      <category term="session" scheme="https://blog.yanwentan.xyz/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>nutch 坑</title>
    <link href="https://blog.yanwentan.xyz/2019/11/21/tch-%E5%9D%91/"/>
    <id>https://blog.yanwentan.xyz/2019/11/21/tch-坑/</id>
    <published>2019-11-21T02:05:00.000Z</published>
    <updated>2020-02-17T15:08:47.571Z</updated>
    
    <content type="html"><![CDATA[<p>每次运行nutch都会在/tmp/hadoop-aaws/mapred/staging产生一个临时目录，若不定时清理，很容易inode(在同一个路径下，一级子目录的个数是有限制的)</p><h1 id="统计当前文件夹下目录的个数"><a href="#统计当前文件夹下目录的个数" class="headerlink" title="统计当前文件夹下目录的个数:"></a>统计当前文件夹下目录的个数:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l |grep &quot;^d&quot;|wc -l</span><br></pre></td></tr></table></figure><h1 id="统计当前文件夹下文件的个数"><a href="#统计当前文件夹下文件的个数" class="headerlink" title="统计当前文件夹下文件的个数:"></a>统计当前文件夹下文件的个数:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l |grep &quot;^-&quot;|wc -l</span><br></pre></td></tr></table></figure><h1 id="统计当前文件夹下文件的个数，包括子文件夹里的"><a href="#统计当前文件夹下文件的个数，包括子文件夹里的" class="headerlink" title="统计当前文件夹下文件的个数，包括子文件夹里的 :"></a>统计当前文件夹下文件的个数，包括子文件夹里的 :</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR|grep &quot;^-&quot;|wc -l</span><br></pre></td></tr></table></figure><h1 id="统计文件夹下目录的个数，包括子文件夹里的"><a href="#统计文件夹下目录的个数，包括子文件夹里的" class="headerlink" title="统计文件夹下目录的个数，包括子文件夹里的:"></a>统计文件夹下目录的个数，包括子文件夹里的:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR|grep &quot;^d&quot;|wc -l</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次运行nutch都会在/tmp/hadoop-aaws/mapred/staging产生一个临时目录，若不定时清理，很容易inode(在同一个路径下，一级子目录的个数是有限制的)&lt;/p&gt;
&lt;h1 id=&quot;统计当前文件夹下目录的个数&quot;&gt;&lt;a href=&quot;#统计当前文件夹下目
      
    
    </summary>
    
    
      <category term="nutch" scheme="https://blog.yanwentan.xyz/tags/nutch/"/>
    
  </entry>
  
  <entry>
    <title>apacheHttpd日志说明</title>
    <link href="https://blog.yanwentan.xyz/2019/11/21/acheHttpd%E6%97%A5%E5%BF%97%E8%AF%B4%E6%98%8E/"/>
    <id>https://blog.yanwentan.xyz/2019/11/21/acheHttpd日志说明/</id>
    <published>2019-11-21T02:00:00.000Z</published>
    <updated>2020-02-17T15:08:47.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a>日志目录</h1><ul><li>1,首先，你要确定你的apache工作路径:ps -aux</li><li>2,其次，你可查看httpd.conf,看是否有特定的设置，一般logs文件夹与conf文件夹在同一个父目录下；</li><li>3，访问日志为access_log，错误日志为error_log；</li><li>4，如果上面的尝试都失败，那你再在/var/log/messages看看</li></ul><h2 id="access-log-访问日志"><a href="#access-log-访问日志" class="headerlink" title="access_log 访问日志"></a>access_log 访问日志</h2><p>access_log为访问日志,记录所有对apache服务器进行请求的访问,它的位置和内容由CustomLog指令控制,LogFormat指令可以用来简化该日志的内容和格式 </p><h2 id="error-log-错误日志"><a href="#error-log-错误日志" class="headerlink" title="error_log 错误日志"></a>error_log 错误日志</h2><p>error_log为错误日志,记录下任何错误的处理请求,它的位置和内容由ErrorLog指令控制,通常服务器出现什么错误,首先对它进行查阅,是一个最重要的日志文件。</p><p>看一条典型的access_log的日志记录：<br>61.155.149.20 - - [13/Jan/2017:15:42:47 +0800] “GET /category/db/ HTTP/1.1” 200 23225</p><p>1).61.155.149.20<br>这是一个请求到apache服务器的客户端ip,默认的情况下,第一项信息只是远程主机的ip地址,但我们如果需要apache查出主机的名字,可以将 HostnameLookups设置为on,不推荐使用，会大大降低网站速度。</p><p>2). -<br>这一项是空白,使用”-“来代替,用于记录浏览者的标识，对于大多数浏览器，这项都是空。</p><p>3). -<br>也为空，记录浏览者进行身份验证时提供的名字，大多数这项也为空。</p><p>4). [13/Jan/2017:15:42:47 +0800]<br>第四项是记录请求的时间,格式为[day/month/year:hour:minute:second zone],最后的+0800表示服务器所处的时区为东八区</p><p>5). “GET /category/db/ HTTP/1.1”<br>这一项最有用,首先,它告诉我们的服务器收到的是一个GET请求,其次,是客户端请求的资源路径,第三,客户端使用的协议时HTTP/1.1,整个格式为”%m %U%q %H”,即”请求方法/访问路径/协议”</p><p>6). 200<br>这是一个状态码,由服务器端发送回客户端,它告诉我们客户端的请求是否成功,或者是重定向,或者是碰到了什么样的错误,这项值为200，表示服务器已经成 功的响应了客户端的请求,一般来说,这项值以2开头的表示请求成功,以3开头的表示重定向,以4开头的标示客户端存在某些的错误,以5开头的标示服务器端 存在某些错误。</p><p>7).23225<br>这项表示服务器向客户端发送了多少的字节,在日志分析统计的时侯,把这些字节加起来就可以得知服务器在某点时间内总的发送数据量是多少</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志目录&quot;&gt;&lt;a href=&quot;#日志目录&quot; class=&quot;headerlink&quot; title=&quot;日志目录&quot;&gt;&lt;/a&gt;日志目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1,首先，你要确定你的apache工作路径:ps -aux&lt;/li&gt;
&lt;li&gt;2,其次，你可查看httpd.co
      
    
    </summary>
    
      <category term="apache" scheme="https://blog.yanwentan.xyz/categories/apache/"/>
    
    
      <category term="httpd" scheme="https://blog.yanwentan.xyz/tags/httpd/"/>
    
  </entry>
  
  <entry>
    <title>spring session（1）</title>
    <link href="https://blog.yanwentan.xyz/2019/11/13/ring-session%EF%BC%881%EF%BC%89/"/>
    <id>https://blog.yanwentan.xyz/2019/11/13/ring-session（1）/</id>
    <published>2019-11-13T03:54:00.000Z</published>
    <updated>2020-02-17T15:08:47.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始spring-session揭秘之前，先做下热脑（活动活动脑子）运动。主要从以下三个方面进行热脑：</p><ul><li>为什么要spring-session</li><li>比较traditional-session方案和spring-session方案</li><li>JSR340规范与spring-session的透明继承<h1 id="一-为什么要spring-session"><a href="#一-为什么要spring-session" class="headerlink" title="一.为什么要spring-session"></a>一.为什么要spring-session</h1>在传统单机web应用中，一般使用tomcat/jetty等web容器时，用户的session都是由容器管理。浏览器使用cookie中记录sessionId，容器根据sessionId判断用户是否存在会话session。这里的限制是，session存储在web容器中，被单台服务器容器管理。</li></ul><p>但是网站主键演变，分布式应用和集群是趋势（提高性能）。此时用户的请求可能被负载分发至不同的服务器，此时传统的web容器管理用户会话session的方式即行不通。除非集群或者分布式web应用能够共享session，尽管tomcat等支持这样做。但是这样存在以下两点问题：</p><ul><li>需要侵入web容器，提高问题的复杂</li><li>web容器之间共享session，集群机器之间势必要交互耦合<br>基于这些，必须提供新的可靠的集群分布式/集群session的解决方案，突破traditional-session单机限制（即web容器session方式，下面简称traditional-session），spring-session应用而生。</li></ul><h1 id="二-比较traditional-session方案和spring-session方案"><a href="#二-比较traditional-session方案和spring-session方案" class="headerlink" title="二.比较traditional-session方案和spring-session方案"></a>二.比较traditional-session方案和spring-session方案</h1><p>下图展示了traditional-session和spring-session的区别</p><p><img src="/2019/11/13/ring-session（1）/1.png" alt="logo"><br>传统模式中，当request进入web容器，根据reqest获取session时，如果web容器中存在session则返回，如果不存在，web容器则创建一个session。然后返回response时，将sessonId作为response的head一并返回给客户端或者浏览器。</p><p>但是上节中说明了traditional-session的局限性在于：单机session。在此限制的相反面，即将session从web容器中抽出来，形成独立的模块，以便分布式应用或者集群都能共享，即能解决。</p><p>spring-session的核心思想在于此：将session从web容器中剥离，存储在独立的存储服务器中。目前支持多种形式的session存储器：Redis、Database、MogonDB等。session的管理责任委托给spring-session承担。当request进入web容器，根据request获取session时，由spring-session负责存存储器中获取session，如果存在则返回，如果不存在则创建并持久化至存储器中。</p><h1 id="JSR340规范与spring-session的透明继承"><a href="#JSR340规范与spring-session的透明继承" class="headerlink" title="JSR340规范与spring-session的透明继承"></a>JSR340规范与spring-session的透明继承</h1><p>JSR340是Java Servlet 3.1的规范提案，其中定义了大量的api，包括：servlet、servletRequest/HttpServletRequest/HttpServletRequestWrapper、servletResponse/HttpServletResponse/HttpServletResponseWrapper、Filter、Session等，是标准的web容器需要遵循的规约，如tomcat/jetty/weblogic等等。</p><p>在日常的应用开发中，develpers也在频繁的使用servlet-api，比如：</p><p>以下的方式获取请求的session：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ...</span><br><span class="line">HttpSession session = request.getSession(false);</span><br></pre></td></tr></table></figure></p><p>其中HttpServletRequest和HttpSession都是servlet规范中定义的接口，web容器实现的标准。那如果引入spring-session，要如何获取session？</p><ul><li>遵循servlet规范，同样方式获取session，对应用代码无侵入且对于developers透明化</li><li>全新实现一套session规范，定义一套新的api和session管理机制<br>两种方案都可以实现，但是显然第一种更友好，且具有兼容性。spring-session正是第一种方案的实现。</li></ul><p>实现第一种方案的关键点在于做到透明和兼容</p><p>接口适配：仍然使用HttpServletRequest获取session，获取到的session仍然是HttpSession类型——适配器模式<br>类型包装增强：Session不能存储在web容器内，要外化存储——装饰模式<br>让人兴奋的是，以上的需求在Servlet规范中的扩展性都是予以支持！Servlet规范中定义一系列的接口都是支持扩展，同时提供Filter支撑扩展点。</p><h1 id="spring-session入门"><a href="#spring-session入门" class="headerlink" title="spring session入门"></a>spring session入门</h1><p>主要从以下两个方面来说spring-session：</p><ul><li>特点</li><li><p>工作原理</p><h2 id="一-特点"><a href="#一-特点" class="headerlink" title="一.特点"></a>一.特点</h2><p>spring-session在无需绑定web容器的情况下提供对集群session的支持。并提供对以下情况的透明集成：</p></li><li><p>HttpSession：容许替换web容器的HttpSession</p></li><li>WebSocket：使用WebSocket通信时，提供Session的活跃</li><li>WebSession：容许以应用中立的方式替换webflux的webSession</li></ul><p>下面以项目接入spring session redis为例</p><h1 id="spring-项目"><a href="#spring-项目" class="headerlink" title="spring 项目"></a>spring 项目</h1><p>引入spring session的jar<br>代码：<a href="https://github.com/smallwenzi/testSpringSession" target="_blank" rel="noopener">https://github.com/smallwenzi/testSpringSession</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入:"></a>引入:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">         &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Spring session redis 依赖start --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h2><p>applicationContext.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;   </span><br><span class="line"> &lt;bean id=&quot;jedisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;hostName&quot; value=&quot;$&#123;redis.hostName&#125;&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;port&quot; value=&quot;$&#123;redis.port&#125;&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;password&quot; value=&quot;$&#123;redis.password&#125;&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;usePool&quot; value=&quot;$&#123;redis.usePool&#125;&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;timeout&quot; value=&quot;$&#123;redis.timeout&#125;&quot; /&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>redis.properties（自行更改redis 配置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis.hostName=localhost</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.password=</span><br><span class="line">redis.usePool=true</span><br><span class="line">redis.timeout=10000</span><br></pre></td></tr></table></figure></p><h2 id="开启spring-session"><a href="#开启spring-session" class="headerlink" title="开启spring session"></a>开启spring session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">//redisNamespace区分每个项目spring session key唯一</span><br><span class="line">@EnableRedisHttpSession(redisNamespace = &quot;testSpringSession&quot;)</span><br><span class="line">public class SpringSessionHttpConfig &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(SpringSessionHttpConfig.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.corepoolsize&#125;&quot;)</span><br><span class="line">    private String corepoolsize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.maxpoolsize&#125;&quot;)</span><br><span class="line">    private String maxpoolsize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.keepaliveseconds&#125;&quot;)</span><br><span class="line">    private String keepaliveseconds;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.queuecapacity&#125;&quot;)</span><br><span class="line">    private String queuecapacity;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.threadnameprefix&#125;&quot;)</span><br><span class="line">    private String threadnameprefix;</span><br><span class="line"></span><br><span class="line">//控制springsession 线程池 否则线程会无限制创建 导致oom 线程配置详细看看项目里test.properties</span><br><span class="line">    @Bean</span><br><span class="line">    public ThreadPoolTaskExecutor springSessionRedisTaskExecutor() &#123;</span><br><span class="line">        logger.info(&quot;JedisPool注入成功！！&quot;);</span><br><span class="line">        ThreadPoolTaskExecutor springSessionRedisTaskExecutor = new ThreadPoolTaskExecutor();</span><br><span class="line">        springSessionRedisTaskExecutor.setCorePoolSize(getRedisTaskexecutorStrToInt(this.corepoolsize, 16));</span><br><span class="line">        springSessionRedisTaskExecutor.setMaxPoolSize(getRedisTaskexecutorStrToInt(this.maxpoolsize, 300));</span><br><span class="line">        springSessionRedisTaskExecutor.setKeepAliveSeconds(getRedisTaskexecutorStrToInt(this.keepaliveseconds, 30));</span><br><span class="line">        springSessionRedisTaskExecutor.setQueueCapacity(getRedisTaskexecutorStrToInt(this.queuecapacity, 500));</span><br><span class="line">        springSessionRedisTaskExecutor.setThreadNamePrefix(this.threadnameprefix);</span><br><span class="line">        return springSessionRedisTaskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getRedisTaskexecutorStrToInt(String size, int defaultSize) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int sizeInt = Integer.parseInt(size);</span><br><span class="line">            return sizeInt;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return defaultSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;filter&gt;</span><br><span class="line"> &lt;!-- 必须这样命名 SpringHttpSessionConfiguration类中定义了springSessionRepositoryFilter类 --&gt;</span><br><span class="line">&lt;filter-name&gt;springSessionRepositoryFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class="line"> &lt;/filter&gt;</span><br><span class="line"> &lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;springSessionRepositoryFilter&lt;/filter-name&gt;</span><br><span class="line">   &lt;!-- 需要spring session的访问路径 --&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt; </span><br><span class="line"> &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>本地分别部署tomcat 进行测试<a href="http://localhost:8082/testSpringSession/testSession.do" target="_blank" rel="noopener">http://localhost:8082/testSpringSession/testSession.do</a><br><a href="http://localhost:8080/testSpringSession/testSession.do" target="_blank" rel="noopener">http://localhost:8080/testSpringSession/testSession.do</a><br>输出的session id是否一致<br>若一致则spring session成功</p><h1 id="spring-boot项目"><a href="#spring-boot项目" class="headerlink" title="spring boot项目"></a>spring boot项目</h1><p>项目：<a href="https://github.com/smallwenzi/testSpringBootSession" target="_blank" rel="noopener">https://github.com/smallwenzi/testSpringBootSession</a></p><h2 id="引入jar"><a href="#引入jar" class="headerlink" title="引入jar"></a>引入jar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="开启springsession"><a href="#开启springsession" class="headerlink" title="开启springsession"></a>开启springsession</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//redisNamespace区分每个项目spring session key唯一</span><br><span class="line">@EnableRedisHttpSession(redisNamespace = &quot;testSpringBootSession&quot;)</span><br><span class="line">public class SpringSessionHttpConfig &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(SpringSessionHttpConfig.class);</span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.corepoolsize&#125;&quot;)</span><br><span class="line">    private String corepoolsize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.maxpoolsize&#125;&quot;)</span><br><span class="line">    private String maxpoolsize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.keepaliveseconds&#125;&quot;)</span><br><span class="line">    private String keepaliveseconds;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.queuecapacity&#125;&quot;)</span><br><span class="line">    private String queuecapacity;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;redis.taskexecutor.threadnameprefix&#125;&quot;)</span><br><span class="line">    private String threadnameprefix;</span><br><span class="line"></span><br><span class="line">//控制springsession 线程池 否则线程会无限制创建 导致oom 线程配置详细看看项目里application.properties</span><br><span class="line">    @Bean</span><br><span class="line">    public ThreadPoolTaskExecutor springSessionRedisTaskExecutor() &#123;</span><br><span class="line">        logger.info(&quot;JedisPool注入成功！！&quot;);</span><br><span class="line">        ThreadPoolTaskExecutor springSessionRedisTaskExecutor = new ThreadPoolTaskExecutor();</span><br><span class="line">        springSessionRedisTaskExecutor.setCorePoolSize(getRedisTaskexecutorStrToInt(this.corepoolsize, 16));</span><br><span class="line">        springSessionRedisTaskExecutor.setMaxPoolSize(getRedisTaskexecutorStrToInt(this.maxpoolsize, 300));</span><br><span class="line">        springSessionRedisTaskExecutor.setKeepAliveSeconds(getRedisTaskexecutorStrToInt(this.keepaliveseconds, 30));</span><br><span class="line">        springSessionRedisTaskExecutor.setQueueCapacity(getRedisTaskexecutorStrToInt(this.queuecapacity, 500));</span><br><span class="line">        springSessionRedisTaskExecutor.setThreadNamePrefix(this.threadnameprefix);</span><br><span class="line">        return springSessionRedisTaskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getRedisTaskexecutorStrToInt(String size, int defaultSize) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int sizeInt = Integer.parseInt(size);</span><br><span class="line">            return sizeInt;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return defaultSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#本地测试设置随机端口 （自行更改redis 配置）</span><br><span class="line">server.port=0</span><br><span class="line"># redis start</span><br><span class="line">#spring.redis.database=0</span><br><span class="line">spring.redis.password=</span><br><span class="line">spring.redis.pool.max-idle=10</span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line">spring.redis.pool.max-active=100</span><br><span class="line">spring.redis.pool.max-wait=1000</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis\u670D\u52A1\u5668\u5730\u5740</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># Redis\u670D\u52A1\u5668\u8FDE\u63A5\u7AEF\u53E3</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"></span><br><span class="line"># redis end</span><br><span class="line">#spring session\u4f7f\u7528\u5b58\u50a8\u7c7b\u578b</span><br><span class="line">spring.session.store-type=redis</span><br><span class="line"></span><br><span class="line">##spring-session redis \u7ebf\u7a0b\u6c60\u914d\u7f6e</span><br><span class="line">redis.taskexecutor.corepoolsize=16</span><br><span class="line">redis.taskexecutor.maxpoolsize=300</span><br><span class="line">redis.taskexecutor.keepaliveseconds=30</span><br><span class="line">redis.taskexecutor.queuecapacity=500</span><br><span class="line">redis.taskexecutor.threadnameprefix=testSpringBootSession-spring-session-redis-executor-thread:</span><br></pre></td></tr></table></figure><p>本地分别启动 WebApplication进行测试<a href="http://localhost:port/testSession" target="_blank" rel="noopener">http://localhost:port/testSession</a><br><a href="http://localhost:port/" target="_blank" rel="noopener">http://localhost:port/</a><br>testSession<br>输出的session id是否一致<br>若一致则spring session成功</p><p>有兴趣可以读<a href="https://smallwenzi.github.io/2019/11/21/SpringSession%E6%BA%90%E7%A0%81/" title="《spring sesson源码》">《spring sesson源码》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在开始spring-session揭秘之前，先做下热脑（活动活动脑子）运动。主要从以下三个方面进行热脑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要
      
    
    </summary>
    
      <category term="Spring" scheme="https://blog.yanwentan.xyz/categories/Spring/"/>
    
      <category term="Spring boot" scheme="https://blog.yanwentan.xyz/categories/Spring/Spring-boot/"/>
    
    
      <category term="session" scheme="https://blog.yanwentan.xyz/tags/session/"/>
    
      <category term="spring" scheme="https://blog.yanwentan.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>工具集</title>
    <link href="https://blog.yanwentan.xyz/2019/11/13/%E5%85%B7%E9%9B%86/"/>
    <id>https://blog.yanwentan.xyz/2019/11/13/具集/</id>
    <published>2019-11-13T03:31:00.000Z</published>
    <updated>2020-02-17T15:08:47.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GC分析工具"><a href="#GC分析工具" class="headerlink" title="GC分析工具"></a>GC分析工具</h1><p><a href="https://gceasy.io/" target="_blank" rel="noopener">https://gceasy.io/</a><br>上传java gc文件，进行分析<br><img src="/2019/11/13/具集/2.png" alt="logo"></p><h1 id="json转换"><a href="#json转换" class="headerlink" title="json转换"></a>json转换</h1><p><a href="http://www.bejson.com/jsonviewernew/" target="_blank" rel="noopener">http://www.bejson.com/jsonviewernew/</a><br><img src="/2019/11/13/具集/1.png" alt="logo"></p><h1 id="MemoryAnalyzer"><a href="#MemoryAnalyzer" class="headerlink" title="MemoryAnalyzer"></a>MemoryAnalyzer</h1><p><a href="https://www.eclipse.org/mat/" target="_blank" rel="noopener">https://www.eclipse.org/mat/</a><br>分析java dump<br><img src="/2019/11/13/具集/3.png" alt="logo"></p><h1 id="性能测试jmeter"><a href="#性能测试jmeter" class="headerlink" title="性能测试jmeter"></a>性能测试jmeter</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GC分析工具&quot;&gt;&lt;a href=&quot;#GC分析工具&quot; class=&quot;headerlink&quot; title=&quot;GC分析工具&quot;&gt;&lt;/a&gt;GC分析工具&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gceasy.io/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="tools" scheme="https://blog.yanwentan.xyz/categories/tools/"/>
    
    
      <category term="工具" scheme="https://blog.yanwentan.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>[Java] 查看占用 CPU 最高的线程</title>
    <link href="https://blog.yanwentan.xyz/2019/11/13/ava-%E6%9F%A5%E7%9C%8B%E5%8D%A0%E7%94%A8-CPU-%E6%9C%80%E9%AB%98%E7%9A%84%E7%BA%BF%E7%A8%8B/"/>
    <id>https://blog.yanwentan.xyz/2019/11/13/ava-查看占用-CPU-最高的线程/</id>
    <published>2019-11-13T03:15:00.000Z</published>
    <updated>2020-02-17T15:08:47.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li>top 命令找出应用 pid-app</li><li>top -Hp <pid-app> 命令找出线程 pid-thread</pid-app></li><li>printf ‘%x\n’ <pid-thread> 命令将线程 pid 转换成 16 进制 pid-thread-hex</pid-thread></li><li>jstack <pid-app> | grep ‘pid-thread-hex’ 命令查看线程信息<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1></pid-app></li><li>1.top 命令找出应用 pid-app<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/1.png" alt="logo"></li></ul><p>应用 pid 为8790</p><ul><li>top -Hp <pid-app> 命令找出线程 pid-thread<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/2.png" alt="logo"></pid-app></li></ul><p>线程 pid 为9702</p><ul><li><p>printf ‘%x\n’ <pid-thread> 命令将线程 pid 转换成 16 进制 pid-thread-hex<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/3.png" alt="logo"></pid-thread></p></li><li><p>jstack <pid-app> | grep ‘pid-thread-hex’ 命令查看线程信息</pid-app></p></li></ul><p><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/4.png" alt="logo"></p><ul><li><p>查看整个JVM内存状态<br>jmap -heap [pid]<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/5.png" alt="logo"></p></li><li><p>导出整个JVM 中内存信息，可以利用其它工具打开dump文件分析，例如jdk自带的visualvm工具<br>jmap -dump:file=文件名.dump [pid]</p></li></ul><p>使用MemoryAnalyzer.exe 分析dump<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/6.png" alt="logo"></p><ul><li>打印java线程数<br>jcmd pid Thread.print&gt; thread.txt<br><img src="/2019/11/13/ava-查看占用-CPU-最高的线程/7.png" alt="logo"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;top 命令找出应用 pid-app&lt;/li&gt;
&lt;li&gt;top -Hp &lt;pid-app&gt; 命令找出线程 pid-thread&lt;
      
    
    </summary>
    
      <category term="java" scheme="https://blog.yanwentan.xyz/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.yanwentan.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring config bus</title>
    <link href="https://blog.yanwentan.xyz/2019/05/29/ring-config-bus/"/>
    <id>https://blog.yanwentan.xyz/2019/05/29/ring-config-bus/</id>
    <published>2019-05-29T09:06:00.000Z</published>
    <updated>2019-06-09T15:13:13.727Z</updated>
    
    <content type="html"><![CDATA[<p>config pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br></pre></td></tr></table></figure></p><p>/configuration/src/main/resources/application-native.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.bus.enabled=true</span><br><span class="line">spring.cloud.bus.trace.enabled=true</span><br><span class="line">spring.rabbitmq.addresses=$&#123;RABBITMQ_ADDRESS&#125;</span><br><span class="line">spring.rabbitmq.username=$&#123;RABBITMQ_USERNAME&#125;</span><br><span class="line">spring.rabbitmq.password=$&#123;RABBITMQ_PASSWORD&#125;</span><br><span class="line">spring.rabbitmq.virtual-host=$&#123;RABBITMQ_VIRTUAL_HOST&#125;</span><br><span class="line">## \u5237\u65B0\u65F6\uFF0C\u5173\u95ED\u5B89\u5168\u9A8C\u8BC1</span><br><span class="line">management.security.enabled=false</span><br><span class="line">management.endpoints.web.exposure.include=bus-refresh</span><br></pre></td></tr></table></figure></p><p>刷新链接：<br><a href="http://ip:6081/actuator/bus-refresh" target="_blank" rel="noopener">http://ip:6081/actuator/bus-refresh</a></p><p>客户端<br>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>HelloController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RefreshScope</span><br><span class="line">// 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中。</span><br><span class="line">class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;business.wx.appid&#125;&quot;)</span><br><span class="line">    private String hello;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String from() &#123;</span><br><span class="line">        return this.hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">######## bus-amqp</span><br><span class="line">## 刷新时，关闭安全验证</span><br><span class="line">management.security.enabled=false</span><br><span class="line">management.endpoints.web.exposure.include=bus-refresh</span><br><span class="line">## 开启消息跟踪</span><br><span class="line">spring.cloud.bus.enabled=true</span><br><span class="line">spring.cloud.bus.trace.enabled=true</span><br><span class="line">#mq的地址</span><br><span class="line">spring.rabbitmq.addresses=</span><br><span class="line">#mq的用户名</span><br><span class="line">spring.rabbitmq.username=</span><br><span class="line">#mq的密码</span><br><span class="line">spring.rabbitmq.password=</span><br><span class="line">spring.rabbitmq.publisherConfirms=false</span><br><span class="line">spring.rabbitmq.publisherReturns=false</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br></pre></td></tr></table></figure></p><p>测试连接<br>测试入口：<a href="http://ip:port/hello" target="_blank" rel="noopener">http://ip:port/hello</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;config pom.xml&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/tags/spring-cloud/"/>
    
      <category term="spring config" scheme="https://blog.yanwentan.xyz/tags/spring-config/"/>
    
  </entry>
  
  <entry>
    <title>spring admin配置</title>
    <link href="https://blog.yanwentan.xyz/2019/05/29/pring-admin%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.yanwentan.xyz/2019/05/29/pring-admin配置/</id>
    <published>2019-05-29T08:54:00.000Z</published>
    <updated>2019-06-09T15:13:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>spring admin 接入 eureka</p><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.test.springcloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springamdinserver&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">   &lt;name&gt;基础设施:springamdinserver&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">     &lt;!-- 源码格式 --&gt;</span><br><span class="line">            &lt;plugin&gt;  </span><br><span class="line">                &lt;groupId&gt;com.googlecode.maven-java-formatter-plugin&lt;/groupId&gt;  </span><br><span class="line">                &lt;artifactId&gt;maven-java-formatter-plugin&lt;/artifactId&gt;  </span><br><span class="line">                &lt;version&gt;0.4&lt;/version&gt;  </span><br><span class="line">                &lt;configuration&gt;  </span><br><span class="line">                    &lt;configFile&gt;$&#123;project.basedir&#125;/code-style.xml&lt;/configFile&gt;  </span><br><span class="line">                &lt;/configuration&gt;  </span><br><span class="line">                &lt;executions&gt;  </span><br><span class="line">                    &lt;!--                 &lt;execution&gt;   --&gt;</span><br><span class="line">                    &lt;!--                     &lt;goals&gt;   --&gt;</span><br><span class="line">                    &lt;!--                         &lt;goal&gt;format&lt;/goal&gt;   --&gt;</span><br><span class="line">                    &lt;!--                         &lt;/goals&gt;   --&gt;</span><br><span class="line">                    &lt;!--                     &lt;/execution&gt;   --&gt;</span><br><span class="line">                &lt;/executions&gt;  </span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!-- 单元测试与覆盖率 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.22.1&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;2.21.0&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;skip&gt;true&lt;/skip&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.21.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;includes&gt;</span><br><span class="line">                        &lt;include&gt;**/*Test.java&lt;/include&gt;</span><br><span class="line">                    &lt;/includes&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;  </span><br><span class="line">                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;  </span><br><span class="line">                &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;  </span><br><span class="line">                &lt;version&gt;2.7&lt;/version&gt; </span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;formats&gt;</span><br><span class="line">                        &lt;format&gt;html&lt;/format&gt;</span><br><span class="line">                        &lt;format&gt;xml&lt;/format&gt;</span><br><span class="line">                    &lt;/formats&gt;</span><br><span class="line">                &lt;/configuration&gt; </span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!--编译--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.8.0&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!-- javadoc文档 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.0.1&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;aggregate&gt;true&lt;/aggregate&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!-- spring boot --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.8&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;copy-lib-src-webapps&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;target&gt;</span><br><span class="line">                                &lt;copy todir=&quot;$&#123;project.basedir&#125;/docker&quot;&gt;</span><br><span class="line">                                    &lt;fileset dir=&quot;$&#123;project.basedir&#125;/target&quot;&gt;</span><br><span class="line">                                        &lt;include name=&quot;*.jar&quot; /&gt;</span><br><span class="line">                                    &lt;/fileset&gt;</span><br><span class="line">                                &lt;/copy&gt;</span><br><span class="line">                            &lt;/target&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;run&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- imageName必须全为小写 --&gt;</span><br><span class="line">                    &lt;imageName&gt;springboot-unit-test:1.0&lt;/imageName&gt;</span><br><span class="line">                    &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/docker&lt;/dockerDirectory&gt;</span><br><span class="line">                    &lt;resources&gt;</span><br><span class="line">                        &lt;resource&gt;</span><br><span class="line">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">                        &lt;/resource&gt;</span><br><span class="line">                    &lt;/resources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springadminserver</span><br><span class="line">server.port=8080</span><br><span class="line">#using the info endpoint</span><br><span class="line">info.tags.environment=test</span><br><span class="line">#配置eureka</span><br><span class="line">eureka.client.serviceUrl.defaultZone=$&#123;EUREKA_SERVICEURL&#125;</span><br><span class="line">eureka.instance.prefer-ip-address=true</span><br><span class="line">spring.cloud.inetutils.preferredNetworks=$&#123;PREFERRED_IP_PATTERN:.*&#125;</span><br><span class="line">eureka.instance.preferIpAddress=true</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">eureka.instance.leaseRenewalIntervalInSeconds=10</span><br><span class="line">eureka.instance.health-check-url-path=/actuator/health</span><br><span class="line">eureka.client.registryFetchIntervalSeconds=5</span><br><span class="line">#公开的站点</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.health.show-details=ALWAYS</span><br><span class="line"># 安全密码</span><br><span class="line">spring.security.user.name=user</span><br><span class="line">spring.security.user.password=123456</span><br></pre></td></tr></table></figure><p>SpringBootAdminApplication<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.springamdinserver;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">import de.codecentric.boot.admin.server.config.AdminServerProperties;</span><br><span class="line">import de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@EnableAdminServer</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class SpringBootAdminApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">        private final String adminContextPath;</span><br><span class="line"></span><br><span class="line">        public SecurityPermitAllConfig(AdminServerProperties adminServerProperties) &#123;</span><br><span class="line">            this.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">            // @formatter:off</span><br><span class="line">            SavedRequestAwareAuthenticationSuccessHandler successHandler =</span><br><span class="line">                    new SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">            successHandler.setTargetUrlParameter(&quot;redirectTo&quot;);</span><br><span class="line"></span><br><span class="line">            http.authorizeRequests().antMatchers(adminContextPath + &quot;/assets/**&quot;).permitAll()</span><br><span class="line">                    .antMatchers(adminContextPath + &quot;/login&quot;).permitAll().anyRequest().authenticated().and()</span><br><span class="line">                    .formLogin().loginPage(adminContextPath + &quot;/login&quot;).successHandler(successHandler).and().logout()</span><br><span class="line">                    .logoutUrl(adminContextPath + &quot;/logout&quot;).and().httpBasic().and().csrf().disable();</span><br><span class="line">            // @formatter:on</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.health.show-details=ALWAYS</span><br><span class="line">##日志路径</span><br><span class="line">logging.path=/applog/logincenterWxBindingService</span><br></pre></td></tr></table></figure></p><p>重启服务</p><p>控制台：<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br><img src="/2019/05/29/pring-admin配置/1.png" alt="logo"><br>eurka上服务<br><img src="/2019/05/29/pring-admin配置/2.png" alt="logo"><br>每个服务 内存情况<br><img src="/2019/05/29/pring-admin配置/3.png" alt="logo"><br>查看日志<br><img src="/2019/05/29/pring-admin配置/4.png" alt="logo"><br>流量情况：<br><img src="/2019/05/29/pring-admin配置/5.png" alt="logo"></p><p>参考：<a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">https://github.com/codecentric/spring-boot-admin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring admin 接入 eureka&lt;/p&gt;
&lt;p&gt;pom.xml&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/categories/spring-cloud/"/>
    
    
      <category term="springAdmin" scheme="https://blog.yanwentan.xyz/tags/springAdmin/"/>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>查询rabbitmq 队列信息</title>
    <link href="https://blog.yanwentan.xyz/2019/05/29/rabbitmq-%E9%98%9F%E5%88%97%E4%BF%A1%E6%81%AF/"/>
    <id>https://blog.yanwentan.xyz/2019/05/29/rabbitmq-队列信息/</id>
    <published>2019-05-29T08:48:00.000Z</published>
    <updated>2019-06-09T15:13:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要做mq 消息预警，消息一旦堆积某个数量就报警。</p><p>RabbitMQ自己就提供了HTTP API手册，比如我本地的API手册地址为：<a href="http://localhost:15672/api" target="_blank" rel="noopener">http://localhost:15672/api</a></p><p><a href="http://localhost:15672/api/queues/%2F/soaSyncPwdQueue" target="_blank" rel="noopener">http://localhost:15672/api/queues/%2F/soaSyncPwdQueue</a><br>可以看到队列相关的所有信息都有记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;consumer_details&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;arguments&quot;: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;channel_details&quot;: &#123;</span><br><span class="line">        &quot;connection_name&quot;: &quot;10.143.172.86:35833 -&gt; 10.210.93.176:5672&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;10.143.172.86:35833 -&gt; 10.210.93.176:5672 (1)&quot;,</span><br><span class="line">        &quot;node&quot;: &quot;rabbit@CNQLS03247&quot;,</span><br><span class="line">        &quot;number&quot;: 1,</span><br><span class="line">        &quot;peer_host&quot;: &quot;10.143.172.86&quot;,</span><br><span class="line">        &quot;peer_port&quot;: 35833,</span><br><span class="line">        &quot;user&quot;: &quot;logincenter&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;ack_required&quot;: true,</span><br><span class="line">      &quot;consumer_tag&quot;: &quot;amq.ctag-Gvgmd8yxscKvBkBiGp3J3g&quot;,</span><br><span class="line">      &quot;exclusive&quot;: false,</span><br><span class="line">      &quot;prefetch_count&quot;: 0,</span><br><span class="line">      &quot;queue&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;soaSyncPwdQueue&quot;,</span><br><span class="line">        &quot;vhost&quot;: &quot;/&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;arguments&quot;: &#123;</span><br><span class="line">    &quot;x-dead-letter-exchange&quot;: &quot;&quot;,</span><br><span class="line">    &quot;x-dead-letter-routing-key&quot;: &quot;DL_soaSyncPwdQueue&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;auto_delete&quot;: false,</span><br><span class="line">  &quot;backing_queue_status&quot;: &#123;</span><br><span class="line">    &quot;avg_ack_egress_rate&quot;: 0.00021645676867156752,</span><br><span class="line">    &quot;avg_ack_ingress_rate&quot;: 0.00021645676867156752,</span><br><span class="line">    &quot;avg_egress_rate&quot;: 0.00021645676867156752,</span><br><span class="line">    &quot;avg_ingress_rate&quot;: 0.00021645676867156752,</span><br><span class="line">    &quot;delta&quot;: [</span><br><span class="line">      &quot;delta&quot;,</span><br><span class="line">      &quot;undefined&quot;,</span><br><span class="line">      0,</span><br><span class="line">      0,</span><br><span class="line">      &quot;undefined&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;len&quot;: 0,</span><br><span class="line">    &quot;mode&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;next_seq_id&quot;: 2177,</span><br><span class="line">    &quot;q1&quot;: 0,</span><br><span class="line">    &quot;q2&quot;: 0,</span><br><span class="line">    &quot;q3&quot;: 0,</span><br><span class="line">    &quot;q4&quot;: 0,</span><br><span class="line">    &quot;target_ram_count&quot;: &quot;infinity&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;consumer_utilisation&quot;: null,</span><br><span class="line">  &quot;consumers&quot;: 1,</span><br><span class="line">  &quot;deliveries&quot;: [</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  &quot;durable&quot;: true,</span><br><span class="line">  &quot;effective_policy_definition&quot;: [</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  &quot;exclusive&quot;: false,</span><br><span class="line">  &quot;exclusive_consumer_tag&quot;: null,</span><br><span class="line">  &quot;garbage_collection&quot;: &#123;</span><br><span class="line">    &quot;fullsweep_after&quot;: 65535,</span><br><span class="line">    &quot;max_heap_size&quot;: 0,</span><br><span class="line">    &quot;min_bin_vheap_size&quot;: 46422,</span><br><span class="line">    &quot;min_heap_size&quot;: 233,</span><br><span class="line">    &quot;minor_gcs&quot;: 294</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;head_message_timestamp&quot;: null,</span><br><span class="line">  &quot;idle_since&quot;: &quot;2019-05-29 7:34:01&quot;,</span><br><span class="line">  &quot;incoming&quot;: [</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  &quot;memory&quot;: 18808,</span><br><span class="line">  &quot;message_bytes&quot;: 0,</span><br><span class="line">  &quot;message_bytes_paged_out&quot;: 0,</span><br><span class="line">  &quot;message_bytes_persistent&quot;: 0,</span><br><span class="line">  &quot;message_bytes_ram&quot;: 0,</span><br><span class="line">  &quot;message_bytes_ready&quot;: 0,</span><br><span class="line">  &quot;message_bytes_unacknowledged&quot;: 0,</span><br><span class="line">  &quot;message_stats&quot;: &#123;</span><br><span class="line">    &quot;ack&quot;: 2007,</span><br><span class="line">    &quot;ack_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;deliver&quot;: 2181,</span><br><span class="line">    &quot;deliver_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;deliver_get&quot;: 2181,</span><br><span class="line">    &quot;deliver_get_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;deliver_no_ack&quot;: 0,</span><br><span class="line">    &quot;deliver_no_ack_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;get&quot;: 0,</span><br><span class="line">    &quot;get_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;get_no_ack&quot;: 0,</span><br><span class="line">    &quot;get_no_ack_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;publish&quot;: 2177,</span><br><span class="line">    &quot;publish_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;redeliver&quot;: 4,</span><br><span class="line">    &quot;redeliver_details&quot;: &#123;</span><br><span class="line">      &quot;rate&quot;: 0.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;messages&quot;: 0,</span><br><span class="line">  &quot;messages_details&quot;: &#123;</span><br><span class="line">    &quot;rate&quot;: 0.0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;messages_paged_out&quot;: 0,</span><br><span class="line">  &quot;messages_persistent&quot;: 0,</span><br><span class="line">  &quot;messages_ram&quot;: 0,</span><br><span class="line">  &quot;messages_ready&quot;: 0, //消息未消费</span><br><span class="line">  &quot;messages_ready_details&quot;: &#123;</span><br><span class="line">    &quot;rate&quot;: 0.0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;messages_ready_ram&quot;: 0,</span><br><span class="line">  &quot;messages_unacknowledged&quot;: 0, //正在消费</span><br><span class="line">  &quot;messages_unacknowledged_details&quot;: &#123;</span><br><span class="line">    &quot;rate&quot;: 0.0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;messages_unacknowledged_ram&quot;: 0,</span><br><span class="line">  &quot;name&quot;: &quot;soaSyncPwdQueue&quot;,</span><br><span class="line">  &quot;node&quot;: &quot;rabbit@CNQLS03247&quot;,</span><br><span class="line">  &quot;operator_policy&quot;: null,</span><br><span class="line">  &quot;policy&quot;: null,</span><br><span class="line">  &quot;recoverable_slaves&quot;: null,</span><br><span class="line">  &quot;reductions&quot;: 23652972,</span><br><span class="line">  &quot;reductions_details&quot;: &#123;</span><br><span class="line">    &quot;rate&quot;: 0.0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;state&quot;: &quot;running&quot;,</span><br><span class="line">  &quot;vhost&quot;: &quot;/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：<br>虚拟主机名Virtual host在设置的时候不要带/，不然会访问不到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;:&quot;Object Not Found&quot;,&quot;reason&quot;:&quot;\&quot;Not Found\&quot;\n&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>之前就是被这个坑了好久，明明按照API写的格式来的，就是访问不到。<br>java代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">jdk 1.8</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Base64;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String host = &quot;&quot;;</span><br><span class="line">        String port = &quot;&quot;;</span><br><span class="line">        String virtualHost = &quot;&quot;;</span><br><span class="line">        String queueName = &quot;&quot;;</span><br><span class="line">        // 发送一个GET请求</span><br><span class="line">        HttpURLConnection httpConn = null;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line"></span><br><span class="line">        String urlString = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/queues/&quot; + virtualHost + &quot;/&quot; + queueName;</span><br><span class="line">        // urlString = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/queues/&quot;;</span><br><span class="line">        URL url = new URL(urlString);</span><br><span class="line">        httpConn = (HttpURLConnection) url.openConnection();</span><br><span class="line">        // 设置用户名密码</span><br><span class="line">        String user=&quot;&quot;;</span><br><span class="line">        String password=&quot;&quot;;</span><br><span class="line">        String auth = user + &quot;:&quot; + password;</span><br><span class="line"></span><br><span class="line">        String encoding = new String(Base64.getEncoder().encode(auth.getBytes()));</span><br><span class="line">        httpConn.setDoOutput(true);</span><br><span class="line">        httpConn.setRequestProperty(&quot;Authorization&quot;, &quot;Basic &quot; + encoding);</span><br><span class="line">        // 建立实际的连接</span><br><span class="line">        httpConn.connect();</span><br><span class="line">        // 读取响应</span><br><span class="line">        if (httpConn.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            StringBuilder content = new StringBuilder();</span><br><span class="line">            String tempStr = &quot;&quot;;</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(httpConn.getInputStream()));</span><br><span class="line">            while ((tempStr = in.readLine()) != null) &#123;</span><br><span class="line">                content.append(tempStr);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            httpConn.disconnect();</span><br><span class="line">            System.out.println(content.toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(httpConn.getResponseCode());</span><br><span class="line">            httpConn.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要做mq 消息预警，消息一旦堆积某个数量就报警。&lt;/p&gt;
&lt;p&gt;RabbitMQ自己就提供了HTTP API手册，比如我本地的API手册地址为：&lt;a href=&quot;http://localhost:15672/api&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/tags/spring-cloud/"/>
    
      <category term="rabbitMq" scheme="https://blog.yanwentan.xyz/tags/rabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>resttemplate 问题</title>
    <link href="https://blog.yanwentan.xyz/2019/05/29/sttemplate-%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.yanwentan.xyz/2019/05/29/sttemplate-问题/</id>
    <published>2019-05-29T08:38:00.000Z</published>
    <updated>2019-06-09T15:13:13.727Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题：<br>mq消费 同步调用其他服务，突然不消费mq数据，且mq数据一直堆积</p><p>原因：<br>如果什么都不设置，RestTemplate默认使用的是SimpleClientHttpRequestFactory，其内部使用的是jdk的java.net.HttpURLConnection创建底层连接，默认是没有连接池的，connectTimeout和readTimeout都是 -1，即没有超时时间</p><p>解决方案：<br>http链接池配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;http-pool&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class HttpPoolProperties &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer maxTotal;</span><br><span class="line">    private Integer defaultMaxPerRoute;</span><br><span class="line">    private Integer connectTimeout;</span><br><span class="line">    private Integer connectionRequestTimeout;</span><br><span class="line">    private Integer socketTimeout;</span><br><span class="line">    private Integer validateAfterInactivity;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http-pool.maxTotal=200</span><br><span class="line">http-pool.defaultMaxPerRoute=100</span><br><span class="line">http-pool.connectTimeout=5000</span><br><span class="line">http-pool.connectionRequestTimeout=1000</span><br><span class="line">http-pool.socketTimeout=600000</span><br><span class="line">http-pool.validateAfterInactivity=2000</span><br></pre></td></tr></table></figure></p><p>RestTemplateConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RestTemplateConfig &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private HttpPoolProperties httpPoolProperties;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate(httpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    public ClientHttpRequestFactory httpRequestFactory() &#123;</span><br><span class="line">        return new HttpComponentsClientHttpRequestFactory(httpClient());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    public HttpClient httpClient() &#123;</span><br><span class="line">        Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()</span><br><span class="line">                .register(&quot;http&quot;, PlainConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                .register(&quot;https&quot;, SSLConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                .build();</span><br><span class="line">        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(registry);</span><br><span class="line">        connectionManager.setMaxTotal(httpPoolProperties.getMaxTotal());</span><br><span class="line">        connectionManager.setDefaultMaxPerRoute(httpPoolProperties.getDefaultMaxPerRoute());</span><br><span class="line">        connectionManager.setValidateAfterInactivity(httpPoolProperties.getValidateAfterInactivity());</span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                .setSocketTimeout(httpPoolProperties.getSocketTimeout()) //服务器返回数据(response)的时间，超过抛出read timeout</span><br><span class="line">                .setConnectTimeout(httpPoolProperties.getConnectTimeout()) //连接上服务器(握手成功)的时间，超出抛出connect timeout</span><br><span class="line">                .setConnectionRequestTimeout(httpPoolProperties.getConnectionRequestTimeout())//从连接池中获取连接的超时时间，超时间未拿到可用连接，会抛出org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting for connection from pool</span><br><span class="line">                .build();</span><br><span class="line">        return HttpClientBuilder.create()</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .setConnectionManager(connectionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">  private RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个问题：&lt;br&gt;mq消费 同步调用其他服务，突然不消费mq数据，且mq数据一直堆积&lt;/p&gt;
&lt;p&gt;原因：&lt;br&gt;如果什么都不设置，RestTemplate默认使用的是SimpleClientHttpRequestFactory，其内部使用的是jdk的java.ne
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/tags/spring-cloud/"/>
    
      <category term="resttemplate" scheme="https://blog.yanwentan.xyz/tags/resttemplate/"/>
    
  </entry>
  
  <entry>
    <title>底层代码构造sql忽略NUll条件</title>
    <link href="https://blog.yanwentan.xyz/2019/05/06/A%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.yanwentan.xyz/2019/05/06/A问题/</id>
    <published>2019-05-06T03:00:00.000Z</published>
    <updated>2019-06-09T15:13:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃</p><p>代码：com.test.common.jpa.repository.JpaRepoUtil<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static StringBuilder generateQlForQueryByProperties(Map&lt;String, Object&gt; propertiesMap,</span><br><span class="line">StringBuilder ql, Map&lt;Integer, Object&gt; params, FindByPropertiesType findType) &#123;</span><br><span class="line">int index = 0;</span><br><span class="line"></span><br><span class="line">if (propertiesMap != null &amp;&amp; !propertiesMap.isEmpty()) &#123;</span><br><span class="line">boolean doDeleteAnd = false, doDeletewWere = true;</span><br><span class="line">ql.append(&quot; where &quot;);</span><br><span class="line">        for (Entry&lt;String,Object&gt; entry: propertiesMap.entrySet()) &#123;</span><br><span class="line">        Object value = entry.getValue();</span><br><span class="line">               //忽略null 的值</span><br><span class="line">        if (value != null) &#123;</span><br><span class="line">        if (doDeletewWere) </span><br><span class="line">        doDeletewWere = false;</span><br><span class="line">        </span><br><span class="line">        if (value instanceof String &amp;&amp; (findType == null || FindByPropertiesType.Fuzzy.equals(findType))) &#123;</span><br><span class="line">        String valueStr = (String) entry.getValue();</span><br><span class="line">        ql.append(&quot;upper(model.&quot; + entry.getKey() + &quot;) like :propertyValue&quot; + index + &quot; and &quot;);</span><br><span class="line">        params.put(index++, &quot;%&quot; + valueStr.trim().toUpperCase() + &quot;%&quot;);</span><br><span class="line">        &#125; else if(QueryValue.NULL.equals(value)) &#123;</span><br><span class="line">        ql.append(&quot;model.&quot; + entry.getKey() + &quot; is null and &quot;);</span><br><span class="line">        &#125; else if(QueryValue.NotNull.equals(value)) &#123;</span><br><span class="line">        ql.append(&quot;model.&quot; + entry.getKey() + &quot; is not null and &quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        ql.append(&quot;model.&quot; + entry.getKey() + &quot;=:propertyValue&quot; + index + &quot; and &quot;);</span><br><span class="line">        params.put(index++, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        doDeleteAnd = true;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (doDeleteAnd)</span><br><span class="line">        ql = ql.delete(ql.toString().lastIndexOf(&quot; and &quot;), ql.toString().length());</span><br><span class="line">        if (doDeletewWere)</span><br><span class="line">       ql = ql.delete(ql.toString().lastIndexOf(&quot; where &quot;), ql.toString().length());</span><br><span class="line">&#125;</span><br><span class="line">return ql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/05/06/A问题/1.png" alt="upload successful"></p><p>总结：需要深度了解底层代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码没有判断查询的值null，导致把全部数据load内存里，这样系统崩溃&lt;/p&gt;
&lt;p&gt;代码：com.test.common.jpa.repository.JpaRepoUtil&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="spring cloud" scheme="https://blog.yanwentan.xyz/categories/spring-cloud/"/>
    
    
      <category term="jpa" scheme="https://blog.yanwentan.xyz/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>在windows下atom上搭建PlantUML书写环境</title>
    <link href="https://blog.yanwentan.xyz/2018/10/14/windows%E4%B8%8Batom%E4%B8%8A%E6%90%AD%E5%BB%BAPlantUML%E4%B9%A6%E5%86%99%E7%8E%AF%E5%A2%83/"/>
    <id>https://blog.yanwentan.xyz/2018/10/14/windows下atom上搭建PlantUML书写环境/</id>
    <published>2018-10-14T07:36:00.000Z</published>
    <updated>2019-05-05T02:41:23.263Z</updated>
    
    <content type="html"><![CDATA[<p>PlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ul><li>atom</li><li>graphviz<br><a href="http://www.graphviz.org/" target="_blank" rel="noopener">Graphviz</a>是一款开源图形可视化软件。Atom的PlantUML插件使用graphviz将PlantUML语言绘制成相应的图形。<h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1>github上已经有开发者为atom开发了PlantUML相关的插件。这里推荐以下两个插件</li><li>language-plantuml</li><li>plantuml-viewer<br>其中language-plantuml提供了PlantUML语法高亮支持，plantuml-viewer负责把PlantUML语句转化为对应的UML图。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有很多博客使用plantuml-preview。本人试用了这两款插件，发现都能很好的支持PlantUML。</span><br><span class="line">但是plantuml-viewer更有优势：plantuml-viewer能够实时显示PlantUML语言描述的图形，</span><br><span class="line">并且可以通过鼠标滚轮流畅的调节图形大小。此外，plantuml-preview需要显式的配置java和plantuml.jar，</span><br><span class="line">而plantuml-viewer不需要，因此我推荐plantuml-viewer</span><br></pre></td></tr></table></figure></li></ul><p>安装方法很简单：atom下 File -&gt; Settings -&gt; Install<br><img src="/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_plugin.png" alt="logo"></p><h1 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h1><p>plantuml-viewer按如下配置<br><img src="/2018/10/14/windows下atom上搭建PlantUML书写环境/plantuml_viewer_setting.png" alt="logo"></p><ul><li>Charset配置成utf-8在生成图形的时候中文不会乱码</li><li>graphviz从官网下载后安装到自定义位置，在plant-viewer中指定dot.exe路径</li></ul><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>用PlantUML生成工厂模式UML<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">skinparam classAttributeIconSize 0</span><br><span class="line">class Product</span><br><span class="line">class ConcreteProduct</span><br><span class="line">class Creator &#123;</span><br><span class="line">  + &#123;abstract&#125; FactoryMethod()</span><br><span class="line">&#125;</span><br><span class="line">class ConcreteCreator &#123;</span><br><span class="line">  + FactoryMethod()</span><br><span class="line">&#125;</span><br><span class="line">Product &lt;|-- ConcreteProduct</span><br><span class="line">Creator &lt;|-- ConcreteCreator</span><br><span class="line">ConcreteProduct &lt;.l. ConcreteCreator</span><br><span class="line">note left of Product: 定义工厂方法所创建的对象的接口</span><br><span class="line">note right of Creator: 声明工厂方法，该方法返回一个Product类型的对象</span><br><span class="line">note left of ConcreteProduct: 具体产品，实现了Product的接口</span><br><span class="line">note right of ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="/2018/10/14/windows下atom上搭建PlantUML书写环境/3.png" alt="logo"></p><p><a href="http://plantuml.com/" target="_blank" rel="noopener">plantuml语法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PlantUML是一款使用纯文本绘制UML图的开源软件。它的优点是能够帮助作者把精力集中到内容的书写上而不是格式的调整。本文介绍了一种在windows环境下atom编辑器上搭建PlantUML书写环境的方法。&lt;/p&gt;
&lt;h1 id=&quot;工具准备&quot;&gt;&lt;a href=&quot;#工具准备
      
    
    </summary>
    
      <category term="atom" scheme="https://blog.yanwentan.xyz/categories/atom/"/>
    
    
      <category term="plantuml" scheme="https://blog.yanwentan.xyz/tags/plantuml/"/>
    
      <category term="atom" scheme="https://blog.yanwentan.xyz/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>Solr的主从模式Master-Slave</title>
    <link href="https://blog.yanwentan.xyz/2018/10/14/olr%E7%9A%84%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8FMaster-Slave/"/>
    <id>https://blog.yanwentan.xyz/2018/10/14/olr的主从模式Master-Slave/</id>
    <published>2018-10-14T07:25:00.000Z</published>
    <updated>2019-05-05T02:41:23.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，Master-Slave模式，为什么要提及这种方式，因为我们公司目前用的就是这种方式。</p><h1 id="引入Master-Slave"><a href="#引入Master-Slave" class="headerlink" title="引入Master-Slave"></a>引入Master-Slave</h1><p>Solr在查询的时候，特别忌讳进行写操作，因为它是IO阻塞型的。现在的流行的Elasticsearch就对此有很好的改进。在引入Master-Slave以后，将读写分配到不同的服务器上，你可以使用master来做索引，然后使用slaves来做查询。<br>1.在多台服务器上分别搭建好可以独立运行的Solr，参见<a href="https://smallwenzi.github.io/2018/10/13/lr%E6%95%99%E7%A8%8B/">这里</a><br>2.指定其中的一台为Master，只需要在SolrConifg.xml中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot;&gt;</span><br><span class="line">     &lt;lst name=&quot;master&quot;&gt;</span><br><span class="line">         &lt;str name=&quot;enable&quot;&gt;$&#123;enable.master:true&#125;&lt;/str&gt;</span><br><span class="line">         &lt;!--</span><br><span class="line">             Create a backup after &apos;optimize&apos;. Other values can be &apos;commit&apos;, &apos;startup&apos;.</span><br><span class="line">             It is possible to have multiple entries of this config string.</span><br><span class="line">             Note that this is just for backup, replication does not require this.</span><br><span class="line">         --&gt;</span><br><span class="line">         &lt;str name=&quot;backupAfter&quot;&gt;optimize&lt;/str&gt;</span><br><span class="line">         &lt;!-- Replicate on &apos;commit&apos;. &apos;startup&apos; and &apos;optimize&apos; are also the valid values for replicateAfter. --&gt;</span><br><span class="line">         &lt;str name=&quot;replicateAfter&quot;&gt;commit&lt;/str&gt;</span><br><span class="line">         &lt;!-- If configuration files need to be replicated give the names here, separated by comma --&gt;</span><br><span class="line">         &lt;str name=&quot;confFiles&quot;&gt;schema.xml,dict.txt,synonyms.txt&lt;/str&gt;</span><br><span class="line">         &lt;str name=&quot;commitReserveDuration&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class="line">     &lt;/lst&gt;</span><br><span class="line">     &lt;int name=&quot;maxNumberOfBackups&quot;&gt;2&lt;/int&gt;</span><br><span class="line">        &lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p><p>3.指定其他多有的服务为Slave，只需要分别SolrConifg.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;requestHandler name=&quot;/replication&quot; class=&quot;solr.ReplicationHandler&quot; &gt;</span><br><span class="line">  &lt;lst name=&quot;slave&quot;&gt;</span><br><span class="line">      &lt;str name=&quot;enable&quot;&gt;$&#123;enable.slave:true&#125;&lt;/str&gt;</span><br><span class="line">      &lt;str name=&quot;masterUrl&quot;&gt;http://192.168.1.102:8983/solr/jcg&lt;/str&gt;</span><br><span class="line">      &lt;str name=&quot;pollInterval&quot;&gt;00:00:10&lt;/str&gt;</span><br><span class="line">      &lt;str name=&quot;httpConnTimeout&quot;&gt;5000&lt;/str&gt;</span><br><span class="line">      &lt;str name=&quot;httpReadTimeout&quot;&gt;10000&lt;/str&gt;</span><br><span class="line">   &lt;/lst&gt;</span><br><span class="line">&lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p><p>4.重启所有的master-slave服务即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot; title=&quot;摘要：&quot;&gt;&lt;/a&gt;摘要：&lt;/h1&gt;&lt;p&gt;如今，为了提高Solr的搜索速度，使其具有很好的容灾能力，往往会配置SolrCloud，但在Solr4之前，还有一种很流行的方式，M
      
    
    </summary>
    
      <category term="solr" scheme="https://blog.yanwentan.xyz/categories/solr/"/>
    
    
      <category term="solr" scheme="https://blog.yanwentan.xyz/tags/solr/"/>
    
      <category term="solr-master" scheme="https://blog.yanwentan.xyz/tags/solr-master/"/>
    
      <category term="solr-slave" scheme="https://blog.yanwentan.xyz/tags/solr-slave/"/>
    
  </entry>
  
  <entry>
    <title>solr教程</title>
    <link href="https://blog.yanwentan.xyz/2018/10/13/lr%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.yanwentan.xyz/2018/10/13/lr教程/</id>
    <published>2018-10-13T05:50:00.000Z</published>
    <updated>2019-05-05T02:41:23.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-为什么选择Apache-Solr"><a href="#1-为什么选择Apache-Solr" class="headerlink" title="1.为什么选择Apache Solr"></a>1.为什么选择Apache Solr</h1><p>Apache Solr是一个功能强大的搜索服务器，它支持REST风格API。Solr是基于Lucene的，Lucene 支持强大的匹配能力，如短语，通配符，连接，分组和更多不同的数据类型。它使用 Apache Zookeeper特别针对高流量进行优化。Apache Solr提供各式各样的功能，我们列出了部分最主要的功能。</p><ul><li>先进的全文搜索功能。</li><li>XML，JSON和HTTP - 基于开放接口标准。</li><li>高度可扩展和容错。</li><li>同时支持模式和无模式配置。</li><li>分页搜索和过滤。</li><li>支持像英语，德语，中国，日本，法国和许多主要语言</li><li>丰富的文档分析。</li></ul><h1 id="安装solr"><a href="#安装solr" class="headerlink" title="安装solr"></a>安装solr</h1><p>要首先让从以下位置下载最新版本的Apache Solr：<br><a href="http://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">http://lucene.apache.org/solr/downloads.html</a><br>在撰写本文时，可用的稳定版本是7.4.0。<br>一旦Solr的zip文件下载将它解压缩到一个文件夹。提取的文件夹看起来像下面。<br><img src="/2018/10/13/lr教程/1.png" alt="logo"><br>Solr的文件夹</p><p>bin文件夹中包含用来启动和停止服务器的脚本。example 文件夹包含几个示例文件。我们将使用其中的一种，以说明Solr如何索引数据。server 文件夹包含logs 文件夹，所有的Solr的日志都写入该文件夹。这将有助于索引过程来检查任何错误日志。在sever文件夹下的Solr文件夹包含不同的集合或核心（core/collection）。对于各集合或核心的配置和数据都存储在相应的集合或核心文件夹。<br>Apache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。<br>我们可以使用命令行脚本启动服务器。让我们去solr的bin目录，从命令提示符输入出以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr start</span><br></pre></td></tr></table></figure></p><p>这将启动下的默认端口8983 Solr的服务器。</p><p>现在，我们可以在浏览器中打开以下网址和验证，我们的Solr的实例正在运行。solr的管理工具的细节超出了示例的范围。</p><p><a href="http://localhost:8983/Solr/" target="_blank" rel="noopener">http://localhost:8983/Solr/</a><br><img src="/2018/10/13/lr教程/2.png" alt="logo"></p><h1 id="配置Apache-Solr"><a href="#配置Apache-Solr" class="headerlink" title="配置Apache Solr"></a>配置Apache Solr</h1><p>在本节中，我们将告诉你如何配置的核心/集合作为Solr实例，以及如何定义的字段。Apache Solr附带称为无模式模式的选项。这个选项允许用户构建有效的架构，而无需手动编辑模式文件。但是，在这个例子中，我们将使用架构配置理解Solr的内部。</p><h2 id="建立核心（core）"><a href="#建立核心（core）" class="headerlink" title="建立核心（core）"></a>建立核心（core）</h2><p>当Solr的服务器在独立模式下启动的配置称为核心，当它在SolrCloud模式启动的配置称为集合。在这个例子中，我们将有关独立服务器和核心讨论。我们将在以后再讨论SolrCloud。首先，我们需要创建一个核心的索引数据。Solr的创建命令有以下选项：</p><p>-c <name> -要创建的核心或集合的名称（必需）。<br>-d <confdir> -配置目录，在SolrCloud模式非常有用。<br>-n <configname> -配置名称。这将默认为核心或集合的名称。<br>-p <port> -本地Solr的实例的端口发送create命令; 默认脚本试图通过寻找运行Solr的实例来检测端口。<br>-s <shards> -Number of shards to split a collection into, default is 1.<br>-rf <replicas> -集合中的每个文件的份数。默认值是1。<br>在这个例子中，我们将使用的核心名称和配置目录-d参数-c参数。对于所有其它参数我们使用默认设置。</replicas></shards></port></configname></confdir></name></p><p>现在在命令窗口浏览 solr-7.4.0\bin文件夹，并发出以下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solr create -c jcg</span><br></pre></td></tr></table></figure></p><p>我们可以看到在命令窗口中下面的输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Creating new core &apos;jcg&apos; using command:</span><br><span class="line">http://localhost:8983/solr/admin/cores?action=CREATE&amp;name=jcg&amp;instanceDir=jcg</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;responseHeader&quot;:&#123;</span><br><span class="line"> &quot;status&quot;:0,</span><br><span class="line"> &quot;QTime&quot;:663&#125;,</span><br><span class="line"> &quot;core&quot;:&quot;jcg&quot;&#125;</span><br><span class="line"> ``` </span><br><span class="line">现在我们导航到以下网址，我们可以看到JCG核心被填充在核心选择器上。还可以看到核心的统计信息。</span><br><span class="line">http://localhost:8983/Solr</span><br><span class="line">![logo](lr教程/3.png)</span><br><span class="line"></span><br><span class="line">## 修改Schema.xml文件</span><br><span class="line">我们需要修改schema.xml中文件的文件夹下，server\solr\jcg\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-7.4.0\example\exampledocs</span><br><span class="line"></span><br><span class="line">现在，我们定位到该文件夹  server\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。</span><br><span class="line">现在编辑\server\solr\jcg\conf\server\solr\jcg\conf\schema.xml文件，设置唯一元素后添加以下内容。</span><br><span class="line">我们已经设置了属性索引为true。这指定字段用于索引和记录可以使用索引进行检索。该值设置为false将只存储领域，但不能进行查询。</span><br><span class="line">另外请注意另一个属性stored并将其设置为true。这指定字段被存储，并且可以在输出被返回。将此字段设置为假将使字段唯一索引，并且不能在输出进行检索。</span><br><span class="line">我们已经分配给存在于此处的“books.csv”文件中的字段的类型。在CSV文件“ID”第一场由索引Schema.xml文件的唯一键自动元素的照顾。如果你注意，我们已经略过字段series_t，sequence_i和genre_s未做任何条目。但是，当我们执行索引时，所有这些字段都被索引且没有任何问题。如果你想知道这种情况需要在Schema.xml文件的dynamicField部分一探究竟。</span><br><span class="line">[schema.xml](schema.xml)</span><br><span class="line"></span><br><span class="line">既然我们已经修改了配置，我们必须停止和启动服务器。要做到这一点，我们需要通过命令行发出从bin目录下面的命令。</span><br></pre></td></tr></table></figure></p><p>Solr  stop -all<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器将停止现在。现在启动服务器问题从bin目录中通过命令行运行以下命令。</span><br></pre></td></tr></table></figure></p><p>Solr start<br><code>`</code></p><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><p>Apache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\exampledocs可看到。<br>现在，我们在命令行定位到example\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。<br><img src="/2018/10/13/lr教程/4.png" alt="logo"><br>正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-7.4.0\example\exampledocs在命令提示符并发出以下命令。<br><img src="/2018/10/13/lr教程/5.png" alt="logo"><br>现在我们导航到以下网址并选择核心JCG。<br><a href="http://localhost:8983/solr" target="_blank" rel="noopener">http://localhost:8983/solr</a><br><img src="/2018/10/13/lr教程/6.png" alt="logo"><br>Solr的JCG核心数据<br>就拿在统计部分仔细一看，该民文档参数将显示索引的行数。</p><h1 id="访问索引的文档"><a href="#访问索引的文档" class="headerlink" title="访问索引的文档"></a>访问索引的文档</h1><p>Apache Solr提供了一种基于REST API来访问的数据，并还提供了不同的参数，以检索数据。我们将向您展示一些基于场景的查询。</p><h2 id="按名称搜索"><a href="#按名称搜索" class="headerlink" title="按名称搜索"></a>按名称搜索</h2><p>我们将用它的名字检索书的细节。要做到这一点，我们将使用下面的语法。URL中的参数“Q”是查询事件。<br>打开浏览器下列URL。<br><a href="http://localhost:8983/solr/jcg/select?q=name:&quot;A" target="_blank" rel="noopener">http://localhost:8983/solr/jcg/select?q=name:&quot;A</a> Clash of Kings”<br>输出将在下面，如图所示。<br><img src="/2018/10/13/lr教程/7.png" alt="logo"></p><h2 id="首字母搜索"><a href="#首字母搜索" class="headerlink" title="首字母搜索"></a>首字母搜索</h2><p>现在我们将告诉你如何搜索记录，如果我们只知道起始字母或单词，不记得完整的标题。我们可以用下面的查询检索结果。<br><a href="http://localhost:8983/solr/jcg/select?q=name:&quot;A&quot;" target="_blank" rel="noopener">http://localhost:8983/solr/jcg/select?q=name:&quot;A&quot;</a><br>输出将列出所有的书籍字母A盯着<br><img src="/2018/10/13/lr教程/8.png" alt="logo"></p><h2 id="搜索使用通配符"><a href="#搜索使用通配符" class="headerlink" title="搜索使用通配符"></a>搜索使用通配符</h2><p>Solr的支持通配符搜索。我们将下面的展示如何检索所有书名包含“of”的书。<br><a href="http://localhost:8983/solr/jcg/select?q=name:&quot;*of&quot;" target="_blank" rel="noopener">http://localhost:8983/solr/jcg/select?q=name:&quot;*of&quot;</a><br><img src="/2018/10/13/lr教程/9.png" alt="logo"></p><h2 id="搜索使用的条件"><a href="#搜索使用的条件" class="headerlink" title="搜索使用的条件"></a>搜索使用的条件</h2><p>Solr的支持条件的搜索。我们可以设置条件，我们的查询提供了“FQ”参数。在下面我们将告诉你如何查询价格低于￥6的书。<br><a href="http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0" target="_blank" rel="noopener">http://localhost:8983/solr/jcg/select?q=*&amp;fq=price:[0</a> TO 6]<br>输出将只列出这是低于$ 6的书籍。<br><img src="/2018/10/13/lr教程/10.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-为什么选择Apache-Solr&quot;&gt;&lt;a href=&quot;#1-为什么选择Apache-Solr&quot; class=&quot;headerlink&quot; title=&quot;1.为什么选择Apache Solr&quot;&gt;&lt;/a&gt;1.为什么选择Apache Solr&lt;/h1&gt;&lt;p&gt;Apache
      
    
    </summary>
    
      <category term="solr" scheme="https://blog.yanwentan.xyz/categories/solr/"/>
    
    
      <category term="solr" scheme="https://blog.yanwentan.xyz/tags/solr/"/>
    
  </entry>
  
</feed>
