<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hexo搭建githubpage博客]]></title>
      <url>https://smallwenzi.github.io/2017/02/20/hexo%20git/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>下载:<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br>参考地址：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装Node.js</a></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="external">git</a></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> d:/hexo</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g <span class="comment">#生成预览</span></div></pre></td></tr></table></figure>
<p>$ hexo g == hexo generate  生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo s == hexo server 启动本地web服务，用于博客的预览<br>$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台）</p>
<p>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。<br><img src="/2017/02/20/hexo git/1.jpeg" alt="logo"></p>
<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<br>hexo-cli: 1.0.2<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 2.7.0<br>node: 7.5.0<br>v8: 5.4.500.48<br>uv: 1.10.2<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>modules: 51<br>openssl: 1.0.2k<br>icu: 58.2<br>unicode: 9.0<br>cldr: 30.0.3<br>tz: 2016j</p>
<h2 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p>
<h3 id="安装主题-在blog目录下"><a href="#安装主题-在blog目录下" class="headerlink" title="安装主题 (在blog目录下)"></a>安装主题 (在blog目录下)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/yilia</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g</div></pre></td></tr></table></figure>
<p>现在打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br><img src="/2017/02/20/hexo git/1.jpeg" alt="logo"></p>
<h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><h3 id="什么是Github-Pages"><a href="#什么是Github-Pages" class="headerlink" title="什么是Github Pages"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a> 来访问你的个人主页。<br>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p>
<p>在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href="http://smallwenzi.github.io/">http://smallwenzi.github.io/</a> 访问了。</p>
<p>参考：<a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">配置SSH keys</a></p>
<h2 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h2><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href="http://smallwenzi.github.io/访问了。">http://smallwenzi.github.io/访问了。</a><br>首先需要明白所谓部署到github的原理。<br>1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href="http://smallwenzi.github.io来直接访问。" target="_blank" rel="external">http://smallwenzi.github.io来直接访问。</a><br>2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p>
<h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：<br>deploy:<br>  type: git<br>  repo: git@github.com:smallwenzi/smallwenzi.github.io.git<br>  branch: master</p>
<p> <img src="/2017/02/20/hexo git/2.png" alt="logo"><br>然后在命令行中执行 (在blog目录下)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>即可完成部署。现在打开<a href="https://smallwenzi.github.io/">https://smallwenzi.github.io/</a> ，</p>
<p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。</p>
<h3 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\yilia_config.yml）：<br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">参考</a>.</p>
<h2 id="Hexo-使用本地图片"><a href="#Hexo-使用本地图片" class="headerlink" title="Hexo 使用本地图片"></a>Hexo 使用本地图片</h2><p>首先确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行</p>
<p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>假设在</p>
<p>MacGesture2-Publish<br>├── apppicker.jpg<br>├── logo.jpg<br>└── rules.jpg<br>MacGesture2-Publish.md</p>
<p><img src="/2017/02/20/hexo git/3.png" alt="logo"></p>
<h2 id="Hexo-后台管理配置"><a href="#Hexo-后台管理配置" class="headerlink" title="Hexo 后台管理配置"></a>Hexo 后台管理配置</h2><p>在blog 跟目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-admin</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>如下图：<br><img src="/2017/02/20/hexo git/4.png" alt="logo"><br><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="external">参考</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> githubpage </tag>
            
            <tag> hexo-admin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 单例模式]]></title>
      <url>https://smallwenzi.github.io/2017/02/20/Singleton/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。<br>从概念中体现出了单例的一些特点：</p>
<blockquote>
<p>（1）、在任何情况下，单例类永远只有一个实例存在<br>（2）、单例需要有能力为整个系统提供这一唯一实例  </p>
</blockquote>
<p>为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：<br>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>
<p>正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。</p>
<h2 id="1、饿汉式单例"><a href="#1、饿汉式单例" class="headerlink" title="1、饿汉式单例"></a>1、饿汉式单例</h2><p>饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s01;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    private static MySingleton instance = new MySingleton();</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s01;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MyThread extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(MySingleton.getInstance().hashCode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        MyThread[] mts = new MyThread[10];</div><div class="line">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class="line">            mts[i] = new MyThread();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class="line">            mts[j].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div><div class="line">15779934</div></pre></td></tr></table></figure></p>
<p>从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了</p>
<h2 id="2、懒汉式单例"><a href="#2、懒汉式单例" class="headerlink" title="2、懒汉式单例"></a>2、懒汉式单例</h2><p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package org.mlinge.s02;  </div><div class="line">  </div><div class="line">public class MySingleton &#123;  </div><div class="line">      </div><div class="line">    private static MySingleton instance = null;  </div><div class="line">      </div><div class="line">    private MySingleton()&#123;&#125;  </div><div class="line">      </div><div class="line">    public static MySingleton getInstance() &#123;  </div><div class="line">        try &#123;   </div><div class="line">            if(instance != null)&#123;//懒汉式   </div><div class="line">                  </div><div class="line">            &#125;else&#123;  </div><div class="line">                //创建实例之前可能会有一些准备性的耗时工作   </div><div class="line">                Thread.sleep(300);  </div><div class="line">                instance = new MySingleton();  </div><div class="line">            &#125;  </div><div class="line">        &#125; catch (InterruptedException e) &#123;   </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        return instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s02;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MyThread extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(MySingleton.getInstance().hashCode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        MyThread[] mts = new MyThread[10];</div><div class="line">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class="line">            mts[i] = new MyThread();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class="line">            mts[j].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">30863650</div><div class="line">7408068</div><div class="line">20469344</div><div class="line">28235257</div><div class="line">23191477</div><div class="line">10884088</div><div class="line">23667197</div><div class="line">20358204</div><div class="line">5807702</div><div class="line">213274</div></pre></td></tr></table></figure></p>
<h2 id="3、线程安全的懒汉式单例"><a href="#3、线程安全的懒汉式单例" class="headerlink" title="3、线程安全的懒汉式单例"></a>3、线程安全的懒汉式单例</h2><p>要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。</p>
<ul>
<li>（1）方法中声明synchronized关键字<br>出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s03;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    private static MySingleton instance = null;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    public synchronized static MySingleton getInstance() &#123;</div><div class="line">        try &#123;</div><div class="line">            if(instance != null)&#123;//懒汉式</div><div class="line"></div><div class="line">            &#125;else&#123;</div><div class="line">                //创建实例之前可能会有一些准备性的耗时工作</div><div class="line">                Thread.sleep(300);</div><div class="line">                instance = new MySingleton();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div></pre></td></tr></table></figure>
<p>从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现：</p>
<ul>
<li>（2）、 同步代码块实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s03;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    private static MySingleton instance = null;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    //public synchronized static MySingleton getInstance() &#123;</div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        try &#123;</div><div class="line">            synchronized (MySingleton.class) &#123;</div><div class="line">                if(instance != null)&#123;//懒汉式</div><div class="line"></div><div class="line">                &#125;else&#123;</div><div class="line">                    //创建实例之前可能会有一些准备性的耗时工作</div><div class="line">                    Thread.sleep(300);</div><div class="line">                    instance = new MySingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。</p>
<ul>
<li>（3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s04;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    private static MySingleton instance = null;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        try &#123;</div><div class="line">            if(instance != null)&#123;//懒汉式</div><div class="line"></div><div class="line">            &#125;else&#123;</div><div class="line">                //创建实例之前可能会有一些准备性的耗时工作</div><div class="line">                Thread.sleep(300);</div><div class="line">                synchronized (MySingleton.class) &#123;</div><div class="line">                    instance = new MySingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">30863650</div><div class="line">7408068</div><div class="line">20469344</div><div class="line">28235257</div><div class="line">23191477</div><div class="line">10884088</div><div class="line">23667197</div><div class="line">20358204</div><div class="line">20358204</div><div class="line">5807702</div></pre></td></tr></table></figure></p>
<p>从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。</p>
<ul>
<li>（4）、 Double Check Locking 双检查锁机制（推荐）<br>为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s05;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    //使用volatile关键字保其可见性</div><div class="line">    volatile private static MySingleton instance = null;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        try &#123;</div><div class="line">            if(instance != null)&#123;//懒汉式</div><div class="line"></div><div class="line">            &#125;else&#123;</div><div class="line">                //创建实例之前可能会有一些准备性的耗时工作</div><div class="line">                Thread.sleep(300);</div><div class="line">                synchronized (MySingleton.class) &#123;</div><div class="line">                    if(instance == null)&#123;//二次检查</div><div class="line">                        instance = new MySingleton();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div><div class="line">30863650</div></pre></td></tr></table></figure></p>
<p>从运行结果来看，该中方法保证了多线程并发下的线程安全性。<br>这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。</p>
<h2 id="4、使用静态内置类实现单例模式"><a href="#4、使用静态内置类实现单例模式" class="headerlink" title="4、使用静态内置类实现单例模式"></a>4、使用静态内置类实现单例模式</h2><p>DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s06;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton &#123;</div><div class="line"></div><div class="line">    //内部类</div><div class="line">    private static class MySingletonHandler&#123;</div><div class="line">        private static MySingleton instance = new MySingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        return MySingletonHandler.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div><div class="line">1696092</div></pre></td></tr></table></figure>
<p>从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。</p>
<h2 id="5、序列化与反序列化的单例模式实现"><a href="#5、序列化与反序列化的单例模式实现" class="headerlink" title="5、序列化与反序列化的单例模式实现"></a>5、序列化与反序列化的单例模式实现</h2><p>静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。<br>代码实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s07;</div><div class="line"></div><div class="line">import java.io.ObjectStreamException;</div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">    //内部类</div><div class="line">    private static class MySingletonHandler&#123;</div><div class="line">        private static MySingleton instance = new MySingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        return MySingletonHandler.instance;</div><div class="line">    &#125;</div><div class="line">    //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉</div><div class="line">    protected Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        System.out.println(&quot;调用了readResolve方法！&quot;);</div><div class="line">        return MySingletonHandler.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>序列化与反序列化测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s07;</div><div class="line"></div><div class="line">import java.io.*;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/23.</div><div class="line"> */</div><div class="line">public class SaveAndReadForSingleton &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MySingleton singleton = MySingleton.getInstance();</div><div class="line"></div><div class="line">        File file = new File(&quot;MySingleton.txt&quot;);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            FileOutputStream fos = new FileOutputStream(file);</div><div class="line">            ObjectOutputStream oos = new ObjectOutputStream(fos);</div><div class="line">            oos.writeObject(singleton);</div><div class="line">            fos.close();</div><div class="line">            oos.close();</div><div class="line">            System.out.println(singleton.hashCode());</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            FileInputStream fis = new FileInputStream(file);</div><div class="line">            ObjectInputStream ois = new ObjectInputStream(fis);</div><div class="line">            MySingleton rSingleton = (MySingleton) ois.readObject();</div><div class="line">            fis.close();</div><div class="line">            ois.close();</div><div class="line">            System.out.println(rSingleton.hashCode());</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行上面的测试代码，得到的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">19235919</div><div class="line">调用了readResolve方法！</div><div class="line">19235919</div></pre></td></tr></table></figure></p>
<p>从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证</p>
<h2 id="6、使用static代码块实现单例"><a href="#6、使用static代码块实现单例" class="headerlink" title="6、使用static代码块实现单例"></a>6、使用static代码块实现单例</h2><p>静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s08;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line">public class MySingleton&#123;</div><div class="line"></div><div class="line">    private static MySingleton instance = null;</div><div class="line"></div><div class="line">    private MySingleton()&#123;&#125;</div><div class="line"></div><div class="line">    static&#123;</div><div class="line">        instance = new MySingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance() &#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s08;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/23.</div><div class="line"> */</div><div class="line">public class MyThread extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            System.out.println(MySingleton.getInstance().hashCode());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        MyThread[] mts = new MyThread[3];</div><div class="line">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class="line">            mts[i] = new MyThread();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class="line">            mts[j].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div><div class="line">27979955</div></pre></td></tr></table></figure></p>
<h2 id="7、使用枚举数据类型实现单例模式"><a href="#7、使用枚举数据类型实现单例模式" class="headerlink" title="7、使用枚举数据类型实现单例模式"></a>7、使用枚举数据类型实现单例模式</h2><p>枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s09;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/22.</div><div class="line"> */</div><div class="line"></div><div class="line">public enum EnumFactory&#123;</div><div class="line"></div><div class="line">    singletonFactory;</div><div class="line"></div><div class="line">    private MySingleton instance;</div><div class="line"></div><div class="line">    private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化</div><div class="line">        instance = new MySingleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MySingleton getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class="line">    public MySingleton()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s09;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/23.</div><div class="line"> */</div><div class="line">public class MyThread extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(EnumFactory.singletonFactory.getInstance().hashCode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        MyThread[] mts = new MyThread[10];</div><div class="line">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class="line">            mts[i] = new MyThread();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class="line">            mts[j].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div><div class="line">15055830</div></pre></td></tr></table></figure></p>
<p>运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。</p>
<h2 id="8、完善使用enum枚举实现单例模式"><a href="#8、完善使用enum枚举实现单例模式" class="headerlink" title="8、完善使用enum枚举实现单例模式"></a>8、完善使用enum枚举实现单例模式</h2><p>不暴露枚举类实现细节的封装代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s10;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/23.</div><div class="line"> */</div><div class="line">public class ClassFactory&#123;</div><div class="line"></div><div class="line">    private enum MyEnumSingleton&#123;</div><div class="line">        singletonFactory;</div><div class="line"></div><div class="line">        private MySingleton instance;</div><div class="line"></div><div class="line">        private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化</div><div class="line">            instance = new MySingleton();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public MySingleton getInstance()&#123;</div><div class="line">            return instance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static MySingleton getInstance()&#123;</div><div class="line">        return MyEnumSingleton.singletonFactory.getInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection</div><div class="line">    public MySingleton()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package wen.design.singleton.s10;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by dell on 2017/2/23.</div><div class="line"> */</div><div class="line">public class MyThread extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(ClassFactory.getInstance().hashCode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        MyThread[] mts = new MyThread[10];</div><div class="line">        for(int i = 0 ; i &lt; mts.length ; i++)&#123;</div><div class="line">            mts[i] = new MyThread();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int j = 0; j &lt; mts.length; j++) &#123;</div><div class="line">            mts[j].start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div><div class="line">25039388</div></pre></td></tr></table></figure></p>
<p>验证结果表明，完善后的单例实现更为合理。<br>以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 单例模式 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
