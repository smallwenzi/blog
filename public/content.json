[{"title":"Hexo搭建githubpage博客","date":"2017-02-20T02:01:00.000Z","path":"2017/02/20/hexo git/","text":"这是一篇很详尽的独立博客搭建教程 里面介绍了github、Hexo和hexo-admin设置等过程 系统环境配置要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！ 安装Node.js下载:Node.js参考地址：安装Node.js 安装Git下载地址：git 安装hexo1$ cd d:/hexo 1$ npm install hexo-cli -g 1$ hexo init blog 1$ cd blog 1$ npm install 1$ hexo s -g #生成预览 $ hexo g == hexo generate 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹$ hexo s == hexo server 启动本地web服务，用于博客的预览$ hexo d == hexo deploy 部署播客到远端（比如github, heroku等平台） 现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。 目前我安装所用的本地环境如下：(可以通过hexo -v查看)hexo-cli: 1.0.2os: Windows_NT 6.1.7601 win32 x64http_parser: 2.7.0node: 7.5.0v8: 5.4.500.48uv: 1.10.2zlib: 1.2.8ares: 1.10.1-DEVmodules: 51openssl: 1.0.2kicu: 58.2unicode: 9.0cldr: 30.0.3tz: 2016j Hexo主题设置这里以主题yilia为例进行说明。 安装主题 (在blog目录下)1$ hexo clean 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 启用主题修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。 更新主题1$ cd themes/yilia 1$ git pull 1$ hexo s -g 现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。 Github Pages设置什么是Github PagesGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。 在这里我创建了一个github repo叫做 smallwenzi.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://smallwenzi.github.io/ 访问了。 参考：配置SSH keys 部署Hexo到Github Pages这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过http://smallwenzi.github.io/访问了。首先需要明白所谓部署到github的原理。1之前步骤中在Github上创建的那个特别的repo（smallwenzi.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://smallwenzi.github.io来直接访问。2Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。3需要将hexo生成的静态网站，提交(git commit)到github上。明白了原理，怎么做自然就清晰了。 使用hexo deploy部署hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.xml中作如下修改：deploy: type: git repo: git@github.com:smallwenzi/smallwenzi.github.io.git branch: master 然后在命令行中执行 (在blog目录下)1$ npm install hexo-deployer-git --save 1$ hexo d -g 即可完成部署。现在打开https://smallwenzi.github.io/ ， 简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至smallwenzi.github.io的git目录下，然后使用git commit命令提交代码到smallwenzi.github.io这个repo的master branch上。 Hexo 主题配置每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。以我们使用的yilia主题为例，其提供如下的配置项（theme\\yilia_config.yml）：参考. Hexo 使用本地图片首先确认 _config.yml 中有 post_asset_folder:true 。在 hexo 目录，执行 npm install https://github.com/CodeFalling/hexo-asset-image –save假设在 MacGesture2-Publish├── apppicker.jpg├── logo.jpg└── rules.jpgMacGesture2-Publish.md Hexo 后台管理配置在blog 跟目录下1$ npm install --save hexo-admin 1$ hexo server -d 如下图：参考","tags":[{"name":"hexo","slug":"hexo","permalink":"https://smallwenzi.github.io/tags/hexo/"},{"name":"githubpage","slug":"githubpage","permalink":"https://smallwenzi.github.io/tags/githubpage/"},{"name":"hexo-admin","slug":"hexo-admin","permalink":"https://smallwenzi.github.io/tags/hexo-admin/"}]},{"title":"java 单例模式","date":"2017-02-20T02:01:00.000Z","path":"2017/02/20/Singleton/","text":"在所有的设计模式中，单例模式是我们在项目开发中最为常见的设计模式之一，而单例模式有很多种实现方式，你是否都了解呢？高并发下如何保证单例模式的线程安全性呢？如何保证序列化后的单例对象在反序列化后任然是单例的呢？这些问题在看了本文之后都会一一的告诉你答案，赶快来阅读吧 什么是单例模式在文章开始之前我们还是有必要介绍一下什么是单例模式。单例模式是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种模式方法。从概念中体现出了单例的一些特点： （1）、在任何情况下，单例类永远只有一个实例存在（2）、单例需要有能力为整个系统提供这一唯一实例 为了便于读者更好的理解这些概念，下面给出这么一段内容叙述：在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。 正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，但是随着应用场景的不同，也可能带来一些同步问题。 1、饿汉式单例饿汉式单例是指在方法调用前，实例就已经创建好了。下面是实现代码：123456789101112131415package wen.design.singleton.s01;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; private static MySingleton instance = new MySingleton(); private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; return instance; &#125;&#125; 以上是单例的饿汉式实现，我们来看看饿汉式在多线程下的执行情况，给出一段多线程的执行代码：1234567891011121314151617181920212223package wen.design.singleton.s01;/** * Created by dell on 2017/2/22. */public class MyThread extends Thread&#123; @Override public void run() &#123; System.out.println(MySingleton.getInstance().hashCode()); &#125; public static void main(String[] args) &#123; MyThread[] mts = new MyThread[10]; for(int i = 0 ; i &lt; mts.length ; i++)&#123; mts[i] = new MyThread(); &#125; for (int j = 0; j &lt; mts.length; j++) &#123; mts[j].start(); &#125; &#125;&#125; 以上代码运行结果：1234567891015779934157799341577993415779934157799341577993415779934157799341577993415779934 从运行结果可以看出实例变量额hashCode值一致，这说明对象是同一个，饿汉式单例实现了 2、懒汉式单例懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。下面是实现代码：1234567891011121314151617181920212223package org.mlinge.s02; public class MySingleton &#123; private static MySingleton instance = null; private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; try &#123; if(instance != null)&#123;//懒汉式 &#125;else&#123; //创建实例之前可能会有一些准备性的耗时工作 Thread.sleep(300); instance = new MySingleton(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return instance; &#125; &#125; 这里假设在创建实例前有一些准备性的耗时工作要处理，多线程调用1234567891011121314151617181920212223package wen.design.singleton.s02;/** * Created by dell on 2017/2/22. */public class MyThread extends Thread&#123; @Override public void run() &#123; System.out.println(MySingleton.getInstance().hashCode()); &#125; public static void main(String[] args) &#123; MyThread[] mts = new MyThread[10]; for(int i = 0 ; i &lt; mts.length ; i++)&#123; mts[i] = new MyThread(); &#125; for (int j = 0; j &lt; mts.length; j++) &#123; mts[j].start(); &#125; &#125;&#125; 执行结果如下：123456789103086365074080682046934428235257231914771088408823667197203582045807702213274 3、线程安全的懒汉式单例要保证线程安全，我们就得需要使用同步锁机制，下面就来看看我们如何一步步的解决 存在线程安全问题的懒汉式单例（错误的单例）。 （1）方法中声明synchronized关键字出现非线程安全问题，是由于多个线程可以同时进入getInstance()方法，那么只需要对该方法进行synchronized的锁同步即可： 1234567891011121314151617181920212223242526package wen.design.singleton.s03;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; private static MySingleton instance = null; private MySingleton()&#123;&#125; public synchronized static MySingleton getInstance() &#123; try &#123; if(instance != null)&#123;//懒汉式 &#125;else&#123; //创建实例之前可能会有一些准备性的耗时工作 Thread.sleep(300); instance = new MySingleton(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return instance; &#125;&#125; 此时任然使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singletonge.s03包下运行，执行结果如下： 1234567891030863650308636503086365030863650308636503086365030863650308636503086365030863650 从执行结果上来看，问题已经解决了，但是这种实现方式的运行效率会很低。同步方法效率低，那我们考虑使用同步代码块来实现： （2）、 同步代码块实现 1234567891011121314151617181920212223242526272829package wen.design.singleton.s03;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; private static MySingleton instance = null; private MySingleton()&#123;&#125; //public synchronized static MySingleton getInstance() &#123; public static MySingleton getInstance() &#123; try &#123; synchronized (MySingleton.class) &#123; if(instance != null)&#123;//懒汉式 &#125;else&#123; //创建实例之前可能会有一些准备性的耗时工作 Thread.sleep(300); instance = new MySingleton(); &#125; &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return instance; &#125;&#125; 这里的实现能够保证多线程并发下的线程安全性，但是这样的实现将全部的代码都被锁上了，同样的效率很低下。 （3）、 针对某些重要的代码进行单独的同步，而不是全部进行同步，可以极大的提高执行效率，我们来看一下： 12345678910111213141516171819202122232425262728package wen.design.singleton.s04;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; private static MySingleton instance = null; private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; try &#123; if(instance != null)&#123;//懒汉式 &#125;else&#123; //创建实例之前可能会有一些准备性的耗时工作 Thread.sleep(300); synchronized (MySingleton.class) &#123; instance = new MySingleton(); &#125; &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return instance; &#125;&#125; 此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s04包下运行，执行结果如下：12345678910308636507408068204693442823525723191477108840882366719720358204203582045807702 从运行结果来看，这样的方法进行代码块同步，代码的运行效率是能够得到提升，但是却没能保住线程的安全性。看来还得进一步考虑如何解决此问题。 （4）、 Double Check Locking 双检查锁机制（推荐）为了达到线程安全，又能提高代码执行效率，我们这里可以采用DCL的双检查锁机制来完成，代码实现如下： 12345678910111213141516171819202122232425262728293031package wen.design.singleton.s05;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; //使用volatile关键字保其可见性 volatile private static MySingleton instance = null; private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; try &#123; if(instance != null)&#123;//懒汉式 &#125;else&#123; //创建实例之前可能会有一些准备性的耗时工作 Thread.sleep(300); synchronized (MySingleton.class) &#123; if(instance == null)&#123;//二次检查 instance = new MySingleton(); &#125; &#125; &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return instance; &#125;&#125; 此时同样使用前面验证多线程下执行情况的MyThread类来进行验证，将其放入wen.design.singleton.s05包下运行，执行结果如下1234567891030863650308636503086365030863650308636503086365030863650308636503086365030863650 从运行结果来看，该中方法保证了多线程并发下的线程安全性。这里在声明变量时使用了volatile关键字来保证其线程间的可见性；在同步代码块中使用二次检查，以保证其不被重复实例化。集合其二者，这种实现方式既保证了其高效性，也保证了其线程安全性。 4、使用静态内置类实现单例模式DCL解决了多线程并发下的线程安全问题，其实使用其他方式也可以达到同样的效果，代码实现如下： 123456789101112131415161718package wen.design.singleton.s06;/** * Created by dell on 2017/2/22. */public class MySingleton &#123; //内部类 private static class MySingletonHandler&#123; private static MySingleton instance = new MySingleton(); &#125; private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; return MySingletonHandler.instance; &#125;&#125; 以上代码就是使用静态内置类实现了单例模式，这里将前面验证多线程下执行情况的MyThread类放入到wen.design.singleton.s06包下运行，执行结果如下： 123456789101696092169609216960921696092169609216960921696092169609216960921696092 从运行结果来看，静态内部类实现的单例在多线程并发下单个实例得到了保证。 5、序列化与反序列化的单例模式实现静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的。代码实现如下： 123456789101112131415161718192021222324252627package wen.design.singleton.s07;import java.io.ObjectStreamException;import java.io.Serializable;/** * Created by dell on 2017/2/22. */public class MySingleton implements Serializable &#123; private static final long serialVersionUID = 1L; //内部类 private static class MySingletonHandler&#123; private static MySingleton instance = new MySingleton(); &#125; private MySingleton()&#123;&#125; public static MySingleton getInstance() &#123; return MySingletonHandler.instance; &#125; //该方法在反序列化时会被调用，该方法不是接口定义的方法，有点儿约定俗成的感觉 protected Object readResolve() throws ObjectStreamException &#123; System.out.println(&quot;调用了readResolve方法！&quot;); return MySingletonHandler.instance; &#125;&#125; 序列化与反序列化测试代码：12345678910111213141516171819202122232425262728293031323334353637383940414243package wen.design.singleton.s07;import java.io.*;/** * Created by dell on 2017/2/23. */public class SaveAndReadForSingleton &#123; public static void main(String[] args) &#123; MySingleton singleton = MySingleton.getInstance(); File file = new File(&quot;MySingleton.txt&quot;); try &#123; FileOutputStream fos = new FileOutputStream(file); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeObject(singleton); fos.close(); oos.close(); System.out.println(singleton.hashCode()); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; try &#123; FileInputStream fis = new FileInputStream(file); ObjectInputStream ois = new ObjectInputStream(fis); MySingleton rSingleton = (MySingleton) ois.readObject(); fis.close(); ois.close(); System.out.println(rSingleton.hashCode()); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 运行上面的测试代码，得到的结果如下：12319235919调用了readResolve方法！19235919 从运行结果可知，添加readResolve方法后反序列化后得到的实例和序列化前的是同一个实例，单个实例得到了保证 6、使用static代码块实现单例静态代码块中的代码在使用类的时候就已经执行了，所以可以应用静态代码块的这个特性的实现单例设计模式。12345678910111213141516171819package wen.design.singleton.s08;/** * Created by dell on 2017/2/22. */public class MySingleton&#123; private static MySingleton instance = null; private MySingleton()&#123;&#125; static&#123; instance = new MySingleton(); &#125; public static MySingleton getInstance() &#123; return instance; &#125;&#125; 测试代码如下：1234567891011121314151617181920212223242526package wen.design.singleton.s08;/** * Created by dell on 2017/2/23. */public class MyThread extends Thread&#123; @Override public void run() &#123; for (int i = 0; i &lt; 5; i++) &#123; System.out.println(MySingleton.getInstance().hashCode()); &#125; &#125; public static void main(String[] args) &#123; MyThread[] mts = new MyThread[3]; for(int i = 0 ; i &lt; mts.length ; i++)&#123; mts[i] = new MyThread(); &#125; for (int j = 0; j &lt; mts.length; j++) &#123; mts[j].start(); &#125; &#125;&#125; 运行结果：123456789101112131415279799552797995527979955279799552797995527979955279799552797995527979955279799552797995527979955279799552797995527979955 7、使用枚举数据类型实现单例模式枚举enum和静态代码块的特性相似，在使用枚举时，构造方法会被自动调用，利用这一特性也可以实现单例：12345678910111213141516171819202122232425package wen.design.singleton.s09;/** * Created by dell on 2017/2/22. */public enum EnumFactory&#123; singletonFactory; private MySingleton instance; private EnumFactory()&#123;//枚举类的构造方法在类加载是被实例化 instance = new MySingleton(); &#125; public MySingleton getInstance()&#123; return instance; &#125;&#125;class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection public MySingleton()&#123;&#125;&#125; 测试代码123456789101112131415161718192021222324package wen.design.singleton.s09;/** * Created by dell on 2017/2/23. */public class MyThread extends Thread&#123; @Override public void run() &#123; System.out.println(EnumFactory.singletonFactory.getInstance().hashCode()); &#125; public static void main(String[] args) &#123; MyThread[] mts = new MyThread[10]; for(int i = 0 ; i &lt; mts.length ; i++)&#123; mts[i] = new MyThread(); &#125; for (int j = 0; j &lt; mts.length; j++) &#123; mts[j].start(); &#125; &#125;&#125; 运行结果：1234567891015055830150558301505583015055830150558301505583015055830150558301505583015055830 运行结果表明单例得到了保证，但是这样写枚举类被完全暴露了，据说违反了“职责单一原则”，那我们来看看怎么进行改造呢。 8、完善使用enum枚举实现单例模式不暴露枚举类实现细节的封装代码如下：1234567891011121314151617181920212223242526272829package wen.design.singleton.s10;/** * Created by dell on 2017/2/23. */public class ClassFactory&#123; private enum MyEnumSingleton&#123; singletonFactory; private MySingleton instance; private MyEnumSingleton()&#123;//枚举类的构造方法在类加载是被实例化 instance = new MySingleton(); &#125; public MySingleton getInstance()&#123; return instance; &#125; &#125; public static MySingleton getInstance()&#123; return MyEnumSingleton.singletonFactory.getInstance(); &#125;&#125;class MySingleton&#123;//需要获实现单例的类，比如数据库连接Connection public MySingleton()&#123;&#125;&#125; 测试代码123456789101112131415161718192021222324package wen.design.singleton.s10;/** * Created by dell on 2017/2/23. */public class MyThread extends Thread&#123; @Override public void run() &#123; System.out.println(ClassFactory.getInstance().hashCode()); &#125; public static void main(String[] args) &#123; MyThread[] mts = new MyThread[10]; for(int i = 0 ; i &lt; mts.length ; i++)&#123; mts[i] = new MyThread(); &#125; for (int j = 0; j &lt; mts.length; j++) &#123; mts[j].start(); &#125; &#125;&#125; 运行结果1234567891025039388250393882503938825039388250393882503938825039388250393882503938825039388 验证结果表明，完善后的单例实现更为合理。以上就是本文要介绍的所有单例模式的实现，相信认真阅读的读者都已经明白文章开头所引入的那几个问题了，祝大家读得开心:-D！","tags":[{"name":"java","slug":"java","permalink":"https://smallwenzi.github.io/tags/java/"},{"name":"单例模式","slug":"单例模式","permalink":"https://smallwenzi.github.io/tags/单例模式/"},{"name":"设计模式","slug":"设计模式","permalink":"https://smallwenzi.github.io/tags/设计模式/"},{"name":"线程","slug":"线程","permalink":"https://smallwenzi.github.io/tags/线程/"}]}]